/*
 * Copyright 2021 Charles Giessen (cdgiessen@gmail.com)
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files
 * (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
// clang-format off
#include "vulkan_string.h"
const char * to_string(VkAttachmentLoadOp val) {
    switch(val) {
        case(VkAttachmentLoadOp::VK_ATTACHMENT_LOAD_OP_LOAD): return "VK_ATTACHMENT_LOAD_OP_LOAD";
        case(VkAttachmentLoadOp::VK_ATTACHMENT_LOAD_OP_CLEAR): return "VK_ATTACHMENT_LOAD_OP_CLEAR";
        case(VkAttachmentLoadOp::VK_ATTACHMENT_LOAD_OP_DONT_CARE): return "VK_ATTACHMENT_LOAD_OP_DONT_CARE";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkAttachmentStoreOp val) {
    switch(val) {
        case(VkAttachmentStoreOp::VK_ATTACHMENT_STORE_OP_STORE): return "VK_ATTACHMENT_STORE_OP_STORE";
        case(VkAttachmentStoreOp::VK_ATTACHMENT_STORE_OP_DONT_CARE): return "VK_ATTACHMENT_STORE_OP_DONT_CARE";
        case(VkAttachmentStoreOp::VK_ATTACHMENT_STORE_OP_NONE_QCOM): return "VK_ATTACHMENT_STORE_OP_NONE_QCOM";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkBlendFactor val) {
    switch(val) {
        case(VkBlendFactor::VK_BLEND_FACTOR_ZERO): return "VK_BLEND_FACTOR_ZERO";
        case(VkBlendFactor::VK_BLEND_FACTOR_ONE): return "VK_BLEND_FACTOR_ONE";
        case(VkBlendFactor::VK_BLEND_FACTOR_SRC_COLOR): return "VK_BLEND_FACTOR_SRC_COLOR";
        case(VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR): return "VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR";
        case(VkBlendFactor::VK_BLEND_FACTOR_DST_COLOR): return "VK_BLEND_FACTOR_DST_COLOR";
        case(VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR): return "VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR";
        case(VkBlendFactor::VK_BLEND_FACTOR_SRC_ALPHA): return "VK_BLEND_FACTOR_SRC_ALPHA";
        case(VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA): return "VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA";
        case(VkBlendFactor::VK_BLEND_FACTOR_DST_ALPHA): return "VK_BLEND_FACTOR_DST_ALPHA";
        case(VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA): return "VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA";
        case(VkBlendFactor::VK_BLEND_FACTOR_CONSTANT_COLOR): return "VK_BLEND_FACTOR_CONSTANT_COLOR";
        case(VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR): return "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR";
        case(VkBlendFactor::VK_BLEND_FACTOR_CONSTANT_ALPHA): return "VK_BLEND_FACTOR_CONSTANT_ALPHA";
        case(VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA): return "VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA";
        case(VkBlendFactor::VK_BLEND_FACTOR_SRC_ALPHA_SATURATE): return "VK_BLEND_FACTOR_SRC_ALPHA_SATURATE";
        case(VkBlendFactor::VK_BLEND_FACTOR_SRC1_COLOR): return "VK_BLEND_FACTOR_SRC1_COLOR";
        case(VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR): return "VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR";
        case(VkBlendFactor::VK_BLEND_FACTOR_SRC1_ALPHA): return "VK_BLEND_FACTOR_SRC1_ALPHA";
        case(VkBlendFactor::VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA): return "VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkBlendOp val) {
    switch(val) {
        case(VkBlendOp::VK_BLEND_OP_ADD): return "VK_BLEND_OP_ADD";
        case(VkBlendOp::VK_BLEND_OP_SUBTRACT): return "VK_BLEND_OP_SUBTRACT";
        case(VkBlendOp::VK_BLEND_OP_REVERSE_SUBTRACT): return "VK_BLEND_OP_REVERSE_SUBTRACT";
        case(VkBlendOp::VK_BLEND_OP_MIN): return "VK_BLEND_OP_MIN";
        case(VkBlendOp::VK_BLEND_OP_MAX): return "VK_BLEND_OP_MAX";
        case(VkBlendOp::VK_BLEND_OP_ZERO_EXT): return "VK_BLEND_OP_ZERO_EXT";
        case(VkBlendOp::VK_BLEND_OP_SRC_EXT): return "VK_BLEND_OP_SRC_EXT";
        case(VkBlendOp::VK_BLEND_OP_DST_EXT): return "VK_BLEND_OP_DST_EXT";
        case(VkBlendOp::VK_BLEND_OP_SRC_OVER_EXT): return "VK_BLEND_OP_SRC_OVER_EXT";
        case(VkBlendOp::VK_BLEND_OP_DST_OVER_EXT): return "VK_BLEND_OP_DST_OVER_EXT";
        case(VkBlendOp::VK_BLEND_OP_SRC_IN_EXT): return "VK_BLEND_OP_SRC_IN_EXT";
        case(VkBlendOp::VK_BLEND_OP_DST_IN_EXT): return "VK_BLEND_OP_DST_IN_EXT";
        case(VkBlendOp::VK_BLEND_OP_SRC_OUT_EXT): return "VK_BLEND_OP_SRC_OUT_EXT";
        case(VkBlendOp::VK_BLEND_OP_DST_OUT_EXT): return "VK_BLEND_OP_DST_OUT_EXT";
        case(VkBlendOp::VK_BLEND_OP_SRC_ATOP_EXT): return "VK_BLEND_OP_SRC_ATOP_EXT";
        case(VkBlendOp::VK_BLEND_OP_DST_ATOP_EXT): return "VK_BLEND_OP_DST_ATOP_EXT";
        case(VkBlendOp::VK_BLEND_OP_XOR_EXT): return "VK_BLEND_OP_XOR_EXT";
        case(VkBlendOp::VK_BLEND_OP_MULTIPLY_EXT): return "VK_BLEND_OP_MULTIPLY_EXT";
        case(VkBlendOp::VK_BLEND_OP_SCREEN_EXT): return "VK_BLEND_OP_SCREEN_EXT";
        case(VkBlendOp::VK_BLEND_OP_OVERLAY_EXT): return "VK_BLEND_OP_OVERLAY_EXT";
        case(VkBlendOp::VK_BLEND_OP_DARKEN_EXT): return "VK_BLEND_OP_DARKEN_EXT";
        case(VkBlendOp::VK_BLEND_OP_LIGHTEN_EXT): return "VK_BLEND_OP_LIGHTEN_EXT";
        case(VkBlendOp::VK_BLEND_OP_COLORDODGE_EXT): return "VK_BLEND_OP_COLORDODGE_EXT";
        case(VkBlendOp::VK_BLEND_OP_COLORBURN_EXT): return "VK_BLEND_OP_COLORBURN_EXT";
        case(VkBlendOp::VK_BLEND_OP_HARDLIGHT_EXT): return "VK_BLEND_OP_HARDLIGHT_EXT";
        case(VkBlendOp::VK_BLEND_OP_SOFTLIGHT_EXT): return "VK_BLEND_OP_SOFTLIGHT_EXT";
        case(VkBlendOp::VK_BLEND_OP_DIFFERENCE_EXT): return "VK_BLEND_OP_DIFFERENCE_EXT";
        case(VkBlendOp::VK_BLEND_OP_EXCLUSION_EXT): return "VK_BLEND_OP_EXCLUSION_EXT";
        case(VkBlendOp::VK_BLEND_OP_INVERT_EXT): return "VK_BLEND_OP_INVERT_EXT";
        case(VkBlendOp::VK_BLEND_OP_INVERT_RGB_EXT): return "VK_BLEND_OP_INVERT_RGB_EXT";
        case(VkBlendOp::VK_BLEND_OP_LINEARDODGE_EXT): return "VK_BLEND_OP_LINEARDODGE_EXT";
        case(VkBlendOp::VK_BLEND_OP_LINEARBURN_EXT): return "VK_BLEND_OP_LINEARBURN_EXT";
        case(VkBlendOp::VK_BLEND_OP_VIVIDLIGHT_EXT): return "VK_BLEND_OP_VIVIDLIGHT_EXT";
        case(VkBlendOp::VK_BLEND_OP_LINEARLIGHT_EXT): return "VK_BLEND_OP_LINEARLIGHT_EXT";
        case(VkBlendOp::VK_BLEND_OP_PINLIGHT_EXT): return "VK_BLEND_OP_PINLIGHT_EXT";
        case(VkBlendOp::VK_BLEND_OP_HARDMIX_EXT): return "VK_BLEND_OP_HARDMIX_EXT";
        case(VkBlendOp::VK_BLEND_OP_HSL_HUE_EXT): return "VK_BLEND_OP_HSL_HUE_EXT";
        case(VkBlendOp::VK_BLEND_OP_HSL_SATURATION_EXT): return "VK_BLEND_OP_HSL_SATURATION_EXT";
        case(VkBlendOp::VK_BLEND_OP_HSL_COLOR_EXT): return "VK_BLEND_OP_HSL_COLOR_EXT";
        case(VkBlendOp::VK_BLEND_OP_HSL_LUMINOSITY_EXT): return "VK_BLEND_OP_HSL_LUMINOSITY_EXT";
        case(VkBlendOp::VK_BLEND_OP_PLUS_EXT): return "VK_BLEND_OP_PLUS_EXT";
        case(VkBlendOp::VK_BLEND_OP_PLUS_CLAMPED_EXT): return "VK_BLEND_OP_PLUS_CLAMPED_EXT";
        case(VkBlendOp::VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT): return "VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT";
        case(VkBlendOp::VK_BLEND_OP_PLUS_DARKER_EXT): return "VK_BLEND_OP_PLUS_DARKER_EXT";
        case(VkBlendOp::VK_BLEND_OP_MINUS_EXT): return "VK_BLEND_OP_MINUS_EXT";
        case(VkBlendOp::VK_BLEND_OP_MINUS_CLAMPED_EXT): return "VK_BLEND_OP_MINUS_CLAMPED_EXT";
        case(VkBlendOp::VK_BLEND_OP_CONTRAST_EXT): return "VK_BLEND_OP_CONTRAST_EXT";
        case(VkBlendOp::VK_BLEND_OP_INVERT_OVG_EXT): return "VK_BLEND_OP_INVERT_OVG_EXT";
        case(VkBlendOp::VK_BLEND_OP_RED_EXT): return "VK_BLEND_OP_RED_EXT";
        case(VkBlendOp::VK_BLEND_OP_GREEN_EXT): return "VK_BLEND_OP_GREEN_EXT";
        case(VkBlendOp::VK_BLEND_OP_BLUE_EXT): return "VK_BLEND_OP_BLUE_EXT";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkBorderColor val) {
    switch(val) {
        case(VkBorderColor::VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK): return "VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK";
        case(VkBorderColor::VK_BORDER_COLOR_INT_TRANSPARENT_BLACK): return "VK_BORDER_COLOR_INT_TRANSPARENT_BLACK";
        case(VkBorderColor::VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK): return "VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK";
        case(VkBorderColor::VK_BORDER_COLOR_INT_OPAQUE_BLACK): return "VK_BORDER_COLOR_INT_OPAQUE_BLACK";
        case(VkBorderColor::VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE): return "VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE";
        case(VkBorderColor::VK_BORDER_COLOR_INT_OPAQUE_WHITE): return "VK_BORDER_COLOR_INT_OPAQUE_WHITE";
        case(VkBorderColor::VK_BORDER_COLOR_FLOAT_CUSTOM_EXT): return "VK_BORDER_COLOR_FLOAT_CUSTOM_EXT";
        case(VkBorderColor::VK_BORDER_COLOR_INT_CUSTOM_EXT): return "VK_BORDER_COLOR_INT_CUSTOM_EXT";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkPipelineCacheHeaderVersion val) {
    switch(val) {
        case(VkPipelineCacheHeaderVersion::VK_PIPELINE_CACHE_HEADER_VERSION_ONE): return "VK_PIPELINE_CACHE_HEADER_VERSION_ONE";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkComponentSwizzle val) {
    switch(val) {
        case(VkComponentSwizzle::VK_COMPONENT_SWIZZLE_IDENTITY): return "VK_COMPONENT_SWIZZLE_IDENTITY";
        case(VkComponentSwizzle::VK_COMPONENT_SWIZZLE_ZERO): return "VK_COMPONENT_SWIZZLE_ZERO";
        case(VkComponentSwizzle::VK_COMPONENT_SWIZZLE_ONE): return "VK_COMPONENT_SWIZZLE_ONE";
        case(VkComponentSwizzle::VK_COMPONENT_SWIZZLE_R): return "VK_COMPONENT_SWIZZLE_R";
        case(VkComponentSwizzle::VK_COMPONENT_SWIZZLE_G): return "VK_COMPONENT_SWIZZLE_G";
        case(VkComponentSwizzle::VK_COMPONENT_SWIZZLE_B): return "VK_COMPONENT_SWIZZLE_B";
        case(VkComponentSwizzle::VK_COMPONENT_SWIZZLE_A): return "VK_COMPONENT_SWIZZLE_A";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkCommandBufferLevel val) {
    switch(val) {
        case(VkCommandBufferLevel::VK_COMMAND_BUFFER_LEVEL_PRIMARY): return "VK_COMMAND_BUFFER_LEVEL_PRIMARY";
        case(VkCommandBufferLevel::VK_COMMAND_BUFFER_LEVEL_SECONDARY): return "VK_COMMAND_BUFFER_LEVEL_SECONDARY";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkCompareOp val) {
    switch(val) {
        case(VkCompareOp::VK_COMPARE_OP_NEVER): return "VK_COMPARE_OP_NEVER";
        case(VkCompareOp::VK_COMPARE_OP_LESS): return "VK_COMPARE_OP_LESS";
        case(VkCompareOp::VK_COMPARE_OP_EQUAL): return "VK_COMPARE_OP_EQUAL";
        case(VkCompareOp::VK_COMPARE_OP_LESS_OR_EQUAL): return "VK_COMPARE_OP_LESS_OR_EQUAL";
        case(VkCompareOp::VK_COMPARE_OP_GREATER): return "VK_COMPARE_OP_GREATER";
        case(VkCompareOp::VK_COMPARE_OP_NOT_EQUAL): return "VK_COMPARE_OP_NOT_EQUAL";
        case(VkCompareOp::VK_COMPARE_OP_GREATER_OR_EQUAL): return "VK_COMPARE_OP_GREATER_OR_EQUAL";
        case(VkCompareOp::VK_COMPARE_OP_ALWAYS): return "VK_COMPARE_OP_ALWAYS";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkDescriptorType val) {
    switch(val) {
        case(VkDescriptorType::VK_DESCRIPTOR_TYPE_SAMPLER): return "VK_DESCRIPTOR_TYPE_SAMPLER";
        case(VkDescriptorType::VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER): return "VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER";
        case(VkDescriptorType::VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE): return "VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE";
        case(VkDescriptorType::VK_DESCRIPTOR_TYPE_STORAGE_IMAGE): return "VK_DESCRIPTOR_TYPE_STORAGE_IMAGE";
        case(VkDescriptorType::VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER): return "VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER";
        case(VkDescriptorType::VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER): return "VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER";
        case(VkDescriptorType::VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER): return "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER";
        case(VkDescriptorType::VK_DESCRIPTOR_TYPE_STORAGE_BUFFER): return "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER";
        case(VkDescriptorType::VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC): return "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC";
        case(VkDescriptorType::VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC): return "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC";
        case(VkDescriptorType::VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT): return "VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT";
        case(VkDescriptorType::VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT): return "VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT";
        case(VkDescriptorType::VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR): return "VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR";
        case(VkDescriptorType::VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV): return "VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV";
        case(VkDescriptorType::VK_DESCRIPTOR_TYPE_MUTABLE_VALVE): return "VK_DESCRIPTOR_TYPE_MUTABLE_VALVE";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkDynamicState val) {
    switch(val) {
        case(VkDynamicState::VK_DYNAMIC_STATE_VIEWPORT): return "VK_DYNAMIC_STATE_VIEWPORT";
        case(VkDynamicState::VK_DYNAMIC_STATE_SCISSOR): return "VK_DYNAMIC_STATE_SCISSOR";
        case(VkDynamicState::VK_DYNAMIC_STATE_LINE_WIDTH): return "VK_DYNAMIC_STATE_LINE_WIDTH";
        case(VkDynamicState::VK_DYNAMIC_STATE_DEPTH_BIAS): return "VK_DYNAMIC_STATE_DEPTH_BIAS";
        case(VkDynamicState::VK_DYNAMIC_STATE_BLEND_CONSTANTS): return "VK_DYNAMIC_STATE_BLEND_CONSTANTS";
        case(VkDynamicState::VK_DYNAMIC_STATE_DEPTH_BOUNDS): return "VK_DYNAMIC_STATE_DEPTH_BOUNDS";
        case(VkDynamicState::VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK): return "VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK";
        case(VkDynamicState::VK_DYNAMIC_STATE_STENCIL_WRITE_MASK): return "VK_DYNAMIC_STATE_STENCIL_WRITE_MASK";
        case(VkDynamicState::VK_DYNAMIC_STATE_STENCIL_REFERENCE): return "VK_DYNAMIC_STATE_STENCIL_REFERENCE";
        case(VkDynamicState::VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV): return "VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV";
        case(VkDynamicState::VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT): return "VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT";
        case(VkDynamicState::VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT): return "VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT";
        case(VkDynamicState::VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR): return "VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR";
        case(VkDynamicState::VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV): return "VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV";
        case(VkDynamicState::VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV): return "VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV";
        case(VkDynamicState::VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV): return "VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV";
        case(VkDynamicState::VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR): return "VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR";
        case(VkDynamicState::VK_DYNAMIC_STATE_LINE_STIPPLE_EXT): return "VK_DYNAMIC_STATE_LINE_STIPPLE_EXT";
        case(VkDynamicState::VK_DYNAMIC_STATE_CULL_MODE_EXT): return "VK_DYNAMIC_STATE_CULL_MODE_EXT";
        case(VkDynamicState::VK_DYNAMIC_STATE_FRONT_FACE_EXT): return "VK_DYNAMIC_STATE_FRONT_FACE_EXT";
        case(VkDynamicState::VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT): return "VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT";
        case(VkDynamicState::VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT): return "VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT";
        case(VkDynamicState::VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT): return "VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT";
        case(VkDynamicState::VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT): return "VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT";
        case(VkDynamicState::VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT): return "VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT";
        case(VkDynamicState::VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT): return "VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT";
        case(VkDynamicState::VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT): return "VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT";
        case(VkDynamicState::VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT): return "VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT";
        case(VkDynamicState::VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT): return "VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT";
        case(VkDynamicState::VK_DYNAMIC_STATE_STENCIL_OP_EXT): return "VK_DYNAMIC_STATE_STENCIL_OP_EXT";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkPolygonMode val) {
    switch(val) {
        case(VkPolygonMode::VK_POLYGON_MODE_FILL): return "VK_POLYGON_MODE_FILL";
        case(VkPolygonMode::VK_POLYGON_MODE_LINE): return "VK_POLYGON_MODE_LINE";
        case(VkPolygonMode::VK_POLYGON_MODE_POINT): return "VK_POLYGON_MODE_POINT";
        case(VkPolygonMode::VK_POLYGON_MODE_FILL_RECTANGLE_NV): return "VK_POLYGON_MODE_FILL_RECTANGLE_NV";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkFormat val) {
    switch(val) {
        case(VkFormat::VK_FORMAT_UNDEFINED): return "VK_FORMAT_UNDEFINED";
        case(VkFormat::VK_FORMAT_R4G4_UNORM_PACK8): return "VK_FORMAT_R4G4_UNORM_PACK8";
        case(VkFormat::VK_FORMAT_R4G4B4A4_UNORM_PACK16): return "VK_FORMAT_R4G4B4A4_UNORM_PACK16";
        case(VkFormat::VK_FORMAT_B4G4R4A4_UNORM_PACK16): return "VK_FORMAT_B4G4R4A4_UNORM_PACK16";
        case(VkFormat::VK_FORMAT_R5G6B5_UNORM_PACK16): return "VK_FORMAT_R5G6B5_UNORM_PACK16";
        case(VkFormat::VK_FORMAT_B5G6R5_UNORM_PACK16): return "VK_FORMAT_B5G6R5_UNORM_PACK16";
        case(VkFormat::VK_FORMAT_R5G5B5A1_UNORM_PACK16): return "VK_FORMAT_R5G5B5A1_UNORM_PACK16";
        case(VkFormat::VK_FORMAT_B5G5R5A1_UNORM_PACK16): return "VK_FORMAT_B5G5R5A1_UNORM_PACK16";
        case(VkFormat::VK_FORMAT_A1R5G5B5_UNORM_PACK16): return "VK_FORMAT_A1R5G5B5_UNORM_PACK16";
        case(VkFormat::VK_FORMAT_R8_UNORM): return "VK_FORMAT_R8_UNORM";
        case(VkFormat::VK_FORMAT_R8_SNORM): return "VK_FORMAT_R8_SNORM";
        case(VkFormat::VK_FORMAT_R8_USCALED): return "VK_FORMAT_R8_USCALED";
        case(VkFormat::VK_FORMAT_R8_SSCALED): return "VK_FORMAT_R8_SSCALED";
        case(VkFormat::VK_FORMAT_R8_UINT): return "VK_FORMAT_R8_UINT";
        case(VkFormat::VK_FORMAT_R8_SINT): return "VK_FORMAT_R8_SINT";
        case(VkFormat::VK_FORMAT_R8_SRGB): return "VK_FORMAT_R8_SRGB";
        case(VkFormat::VK_FORMAT_R8G8_UNORM): return "VK_FORMAT_R8G8_UNORM";
        case(VkFormat::VK_FORMAT_R8G8_SNORM): return "VK_FORMAT_R8G8_SNORM";
        case(VkFormat::VK_FORMAT_R8G8_USCALED): return "VK_FORMAT_R8G8_USCALED";
        case(VkFormat::VK_FORMAT_R8G8_SSCALED): return "VK_FORMAT_R8G8_SSCALED";
        case(VkFormat::VK_FORMAT_R8G8_UINT): return "VK_FORMAT_R8G8_UINT";
        case(VkFormat::VK_FORMAT_R8G8_SINT): return "VK_FORMAT_R8G8_SINT";
        case(VkFormat::VK_FORMAT_R8G8_SRGB): return "VK_FORMAT_R8G8_SRGB";
        case(VkFormat::VK_FORMAT_R8G8B8_UNORM): return "VK_FORMAT_R8G8B8_UNORM";
        case(VkFormat::VK_FORMAT_R8G8B8_SNORM): return "VK_FORMAT_R8G8B8_SNORM";
        case(VkFormat::VK_FORMAT_R8G8B8_USCALED): return "VK_FORMAT_R8G8B8_USCALED";
        case(VkFormat::VK_FORMAT_R8G8B8_SSCALED): return "VK_FORMAT_R8G8B8_SSCALED";
        case(VkFormat::VK_FORMAT_R8G8B8_UINT): return "VK_FORMAT_R8G8B8_UINT";
        case(VkFormat::VK_FORMAT_R8G8B8_SINT): return "VK_FORMAT_R8G8B8_SINT";
        case(VkFormat::VK_FORMAT_R8G8B8_SRGB): return "VK_FORMAT_R8G8B8_SRGB";
        case(VkFormat::VK_FORMAT_B8G8R8_UNORM): return "VK_FORMAT_B8G8R8_UNORM";
        case(VkFormat::VK_FORMAT_B8G8R8_SNORM): return "VK_FORMAT_B8G8R8_SNORM";
        case(VkFormat::VK_FORMAT_B8G8R8_USCALED): return "VK_FORMAT_B8G8R8_USCALED";
        case(VkFormat::VK_FORMAT_B8G8R8_SSCALED): return "VK_FORMAT_B8G8R8_SSCALED";
        case(VkFormat::VK_FORMAT_B8G8R8_UINT): return "VK_FORMAT_B8G8R8_UINT";
        case(VkFormat::VK_FORMAT_B8G8R8_SINT): return "VK_FORMAT_B8G8R8_SINT";
        case(VkFormat::VK_FORMAT_B8G8R8_SRGB): return "VK_FORMAT_B8G8R8_SRGB";
        case(VkFormat::VK_FORMAT_R8G8B8A8_UNORM): return "VK_FORMAT_R8G8B8A8_UNORM";
        case(VkFormat::VK_FORMAT_R8G8B8A8_SNORM): return "VK_FORMAT_R8G8B8A8_SNORM";
        case(VkFormat::VK_FORMAT_R8G8B8A8_USCALED): return "VK_FORMAT_R8G8B8A8_USCALED";
        case(VkFormat::VK_FORMAT_R8G8B8A8_SSCALED): return "VK_FORMAT_R8G8B8A8_SSCALED";
        case(VkFormat::VK_FORMAT_R8G8B8A8_UINT): return "VK_FORMAT_R8G8B8A8_UINT";
        case(VkFormat::VK_FORMAT_R8G8B8A8_SINT): return "VK_FORMAT_R8G8B8A8_SINT";
        case(VkFormat::VK_FORMAT_R8G8B8A8_SRGB): return "VK_FORMAT_R8G8B8A8_SRGB";
        case(VkFormat::VK_FORMAT_B8G8R8A8_UNORM): return "VK_FORMAT_B8G8R8A8_UNORM";
        case(VkFormat::VK_FORMAT_B8G8R8A8_SNORM): return "VK_FORMAT_B8G8R8A8_SNORM";
        case(VkFormat::VK_FORMAT_B8G8R8A8_USCALED): return "VK_FORMAT_B8G8R8A8_USCALED";
        case(VkFormat::VK_FORMAT_B8G8R8A8_SSCALED): return "VK_FORMAT_B8G8R8A8_SSCALED";
        case(VkFormat::VK_FORMAT_B8G8R8A8_UINT): return "VK_FORMAT_B8G8R8A8_UINT";
        case(VkFormat::VK_FORMAT_B8G8R8A8_SINT): return "VK_FORMAT_B8G8R8A8_SINT";
        case(VkFormat::VK_FORMAT_B8G8R8A8_SRGB): return "VK_FORMAT_B8G8R8A8_SRGB";
        case(VkFormat::VK_FORMAT_A8B8G8R8_UNORM_PACK32): return "VK_FORMAT_A8B8G8R8_UNORM_PACK32";
        case(VkFormat::VK_FORMAT_A8B8G8R8_SNORM_PACK32): return "VK_FORMAT_A8B8G8R8_SNORM_PACK32";
        case(VkFormat::VK_FORMAT_A8B8G8R8_USCALED_PACK32): return "VK_FORMAT_A8B8G8R8_USCALED_PACK32";
        case(VkFormat::VK_FORMAT_A8B8G8R8_SSCALED_PACK32): return "VK_FORMAT_A8B8G8R8_SSCALED_PACK32";
        case(VkFormat::VK_FORMAT_A8B8G8R8_UINT_PACK32): return "VK_FORMAT_A8B8G8R8_UINT_PACK32";
        case(VkFormat::VK_FORMAT_A8B8G8R8_SINT_PACK32): return "VK_FORMAT_A8B8G8R8_SINT_PACK32";
        case(VkFormat::VK_FORMAT_A8B8G8R8_SRGB_PACK32): return "VK_FORMAT_A8B8G8R8_SRGB_PACK32";
        case(VkFormat::VK_FORMAT_A2R10G10B10_UNORM_PACK32): return "VK_FORMAT_A2R10G10B10_UNORM_PACK32";
        case(VkFormat::VK_FORMAT_A2R10G10B10_SNORM_PACK32): return "VK_FORMAT_A2R10G10B10_SNORM_PACK32";
        case(VkFormat::VK_FORMAT_A2R10G10B10_USCALED_PACK32): return "VK_FORMAT_A2R10G10B10_USCALED_PACK32";
        case(VkFormat::VK_FORMAT_A2R10G10B10_SSCALED_PACK32): return "VK_FORMAT_A2R10G10B10_SSCALED_PACK32";
        case(VkFormat::VK_FORMAT_A2R10G10B10_UINT_PACK32): return "VK_FORMAT_A2R10G10B10_UINT_PACK32";
        case(VkFormat::VK_FORMAT_A2R10G10B10_SINT_PACK32): return "VK_FORMAT_A2R10G10B10_SINT_PACK32";
        case(VkFormat::VK_FORMAT_A2B10G10R10_UNORM_PACK32): return "VK_FORMAT_A2B10G10R10_UNORM_PACK32";
        case(VkFormat::VK_FORMAT_A2B10G10R10_SNORM_PACK32): return "VK_FORMAT_A2B10G10R10_SNORM_PACK32";
        case(VkFormat::VK_FORMAT_A2B10G10R10_USCALED_PACK32): return "VK_FORMAT_A2B10G10R10_USCALED_PACK32";
        case(VkFormat::VK_FORMAT_A2B10G10R10_SSCALED_PACK32): return "VK_FORMAT_A2B10G10R10_SSCALED_PACK32";
        case(VkFormat::VK_FORMAT_A2B10G10R10_UINT_PACK32): return "VK_FORMAT_A2B10G10R10_UINT_PACK32";
        case(VkFormat::VK_FORMAT_A2B10G10R10_SINT_PACK32): return "VK_FORMAT_A2B10G10R10_SINT_PACK32";
        case(VkFormat::VK_FORMAT_R16_UNORM): return "VK_FORMAT_R16_UNORM";
        case(VkFormat::VK_FORMAT_R16_SNORM): return "VK_FORMAT_R16_SNORM";
        case(VkFormat::VK_FORMAT_R16_USCALED): return "VK_FORMAT_R16_USCALED";
        case(VkFormat::VK_FORMAT_R16_SSCALED): return "VK_FORMAT_R16_SSCALED";
        case(VkFormat::VK_FORMAT_R16_UINT): return "VK_FORMAT_R16_UINT";
        case(VkFormat::VK_FORMAT_R16_SINT): return "VK_FORMAT_R16_SINT";
        case(VkFormat::VK_FORMAT_R16_SFLOAT): return "VK_FORMAT_R16_SFLOAT";
        case(VkFormat::VK_FORMAT_R16G16_UNORM): return "VK_FORMAT_R16G16_UNORM";
        case(VkFormat::VK_FORMAT_R16G16_SNORM): return "VK_FORMAT_R16G16_SNORM";
        case(VkFormat::VK_FORMAT_R16G16_USCALED): return "VK_FORMAT_R16G16_USCALED";
        case(VkFormat::VK_FORMAT_R16G16_SSCALED): return "VK_FORMAT_R16G16_SSCALED";
        case(VkFormat::VK_FORMAT_R16G16_UINT): return "VK_FORMAT_R16G16_UINT";
        case(VkFormat::VK_FORMAT_R16G16_SINT): return "VK_FORMAT_R16G16_SINT";
        case(VkFormat::VK_FORMAT_R16G16_SFLOAT): return "VK_FORMAT_R16G16_SFLOAT";
        case(VkFormat::VK_FORMAT_R16G16B16_UNORM): return "VK_FORMAT_R16G16B16_UNORM";
        case(VkFormat::VK_FORMAT_R16G16B16_SNORM): return "VK_FORMAT_R16G16B16_SNORM";
        case(VkFormat::VK_FORMAT_R16G16B16_USCALED): return "VK_FORMAT_R16G16B16_USCALED";
        case(VkFormat::VK_FORMAT_R16G16B16_SSCALED): return "VK_FORMAT_R16G16B16_SSCALED";
        case(VkFormat::VK_FORMAT_R16G16B16_UINT): return "VK_FORMAT_R16G16B16_UINT";
        case(VkFormat::VK_FORMAT_R16G16B16_SINT): return "VK_FORMAT_R16G16B16_SINT";
        case(VkFormat::VK_FORMAT_R16G16B16_SFLOAT): return "VK_FORMAT_R16G16B16_SFLOAT";
        case(VkFormat::VK_FORMAT_R16G16B16A16_UNORM): return "VK_FORMAT_R16G16B16A16_UNORM";
        case(VkFormat::VK_FORMAT_R16G16B16A16_SNORM): return "VK_FORMAT_R16G16B16A16_SNORM";
        case(VkFormat::VK_FORMAT_R16G16B16A16_USCALED): return "VK_FORMAT_R16G16B16A16_USCALED";
        case(VkFormat::VK_FORMAT_R16G16B16A16_SSCALED): return "VK_FORMAT_R16G16B16A16_SSCALED";
        case(VkFormat::VK_FORMAT_R16G16B16A16_UINT): return "VK_FORMAT_R16G16B16A16_UINT";
        case(VkFormat::VK_FORMAT_R16G16B16A16_SINT): return "VK_FORMAT_R16G16B16A16_SINT";
        case(VkFormat::VK_FORMAT_R16G16B16A16_SFLOAT): return "VK_FORMAT_R16G16B16A16_SFLOAT";
        case(VkFormat::VK_FORMAT_R32_UINT): return "VK_FORMAT_R32_UINT";
        case(VkFormat::VK_FORMAT_R32_SINT): return "VK_FORMAT_R32_SINT";
        case(VkFormat::VK_FORMAT_R32_SFLOAT): return "VK_FORMAT_R32_SFLOAT";
        case(VkFormat::VK_FORMAT_R32G32_UINT): return "VK_FORMAT_R32G32_UINT";
        case(VkFormat::VK_FORMAT_R32G32_SINT): return "VK_FORMAT_R32G32_SINT";
        case(VkFormat::VK_FORMAT_R32G32_SFLOAT): return "VK_FORMAT_R32G32_SFLOAT";
        case(VkFormat::VK_FORMAT_R32G32B32_UINT): return "VK_FORMAT_R32G32B32_UINT";
        case(VkFormat::VK_FORMAT_R32G32B32_SINT): return "VK_FORMAT_R32G32B32_SINT";
        case(VkFormat::VK_FORMAT_R32G32B32_SFLOAT): return "VK_FORMAT_R32G32B32_SFLOAT";
        case(VkFormat::VK_FORMAT_R32G32B32A32_UINT): return "VK_FORMAT_R32G32B32A32_UINT";
        case(VkFormat::VK_FORMAT_R32G32B32A32_SINT): return "VK_FORMAT_R32G32B32A32_SINT";
        case(VkFormat::VK_FORMAT_R32G32B32A32_SFLOAT): return "VK_FORMAT_R32G32B32A32_SFLOAT";
        case(VkFormat::VK_FORMAT_R64_UINT): return "VK_FORMAT_R64_UINT";
        case(VkFormat::VK_FORMAT_R64_SINT): return "VK_FORMAT_R64_SINT";
        case(VkFormat::VK_FORMAT_R64_SFLOAT): return "VK_FORMAT_R64_SFLOAT";
        case(VkFormat::VK_FORMAT_R64G64_UINT): return "VK_FORMAT_R64G64_UINT";
        case(VkFormat::VK_FORMAT_R64G64_SINT): return "VK_FORMAT_R64G64_SINT";
        case(VkFormat::VK_FORMAT_R64G64_SFLOAT): return "VK_FORMAT_R64G64_SFLOAT";
        case(VkFormat::VK_FORMAT_R64G64B64_UINT): return "VK_FORMAT_R64G64B64_UINT";
        case(VkFormat::VK_FORMAT_R64G64B64_SINT): return "VK_FORMAT_R64G64B64_SINT";
        case(VkFormat::VK_FORMAT_R64G64B64_SFLOAT): return "VK_FORMAT_R64G64B64_SFLOAT";
        case(VkFormat::VK_FORMAT_R64G64B64A64_UINT): return "VK_FORMAT_R64G64B64A64_UINT";
        case(VkFormat::VK_FORMAT_R64G64B64A64_SINT): return "VK_FORMAT_R64G64B64A64_SINT";
        case(VkFormat::VK_FORMAT_R64G64B64A64_SFLOAT): return "VK_FORMAT_R64G64B64A64_SFLOAT";
        case(VkFormat::VK_FORMAT_B10G11R11_UFLOAT_PACK32): return "VK_FORMAT_B10G11R11_UFLOAT_PACK32";
        case(VkFormat::VK_FORMAT_E5B9G9R9_UFLOAT_PACK32): return "VK_FORMAT_E5B9G9R9_UFLOAT_PACK32";
        case(VkFormat::VK_FORMAT_D16_UNORM): return "VK_FORMAT_D16_UNORM";
        case(VkFormat::VK_FORMAT_X8_D24_UNORM_PACK32): return "VK_FORMAT_X8_D24_UNORM_PACK32";
        case(VkFormat::VK_FORMAT_D32_SFLOAT): return "VK_FORMAT_D32_SFLOAT";
        case(VkFormat::VK_FORMAT_S8_UINT): return "VK_FORMAT_S8_UINT";
        case(VkFormat::VK_FORMAT_D16_UNORM_S8_UINT): return "VK_FORMAT_D16_UNORM_S8_UINT";
        case(VkFormat::VK_FORMAT_D24_UNORM_S8_UINT): return "VK_FORMAT_D24_UNORM_S8_UINT";
        case(VkFormat::VK_FORMAT_D32_SFLOAT_S8_UINT): return "VK_FORMAT_D32_SFLOAT_S8_UINT";
        case(VkFormat::VK_FORMAT_BC1_RGB_UNORM_BLOCK): return "VK_FORMAT_BC1_RGB_UNORM_BLOCK";
        case(VkFormat::VK_FORMAT_BC1_RGB_SRGB_BLOCK): return "VK_FORMAT_BC1_RGB_SRGB_BLOCK";
        case(VkFormat::VK_FORMAT_BC1_RGBA_UNORM_BLOCK): return "VK_FORMAT_BC1_RGBA_UNORM_BLOCK";
        case(VkFormat::VK_FORMAT_BC1_RGBA_SRGB_BLOCK): return "VK_FORMAT_BC1_RGBA_SRGB_BLOCK";
        case(VkFormat::VK_FORMAT_BC2_UNORM_BLOCK): return "VK_FORMAT_BC2_UNORM_BLOCK";
        case(VkFormat::VK_FORMAT_BC2_SRGB_BLOCK): return "VK_FORMAT_BC2_SRGB_BLOCK";
        case(VkFormat::VK_FORMAT_BC3_UNORM_BLOCK): return "VK_FORMAT_BC3_UNORM_BLOCK";
        case(VkFormat::VK_FORMAT_BC3_SRGB_BLOCK): return "VK_FORMAT_BC3_SRGB_BLOCK";
        case(VkFormat::VK_FORMAT_BC4_UNORM_BLOCK): return "VK_FORMAT_BC4_UNORM_BLOCK";
        case(VkFormat::VK_FORMAT_BC4_SNORM_BLOCK): return "VK_FORMAT_BC4_SNORM_BLOCK";
        case(VkFormat::VK_FORMAT_BC5_UNORM_BLOCK): return "VK_FORMAT_BC5_UNORM_BLOCK";
        case(VkFormat::VK_FORMAT_BC5_SNORM_BLOCK): return "VK_FORMAT_BC5_SNORM_BLOCK";
        case(VkFormat::VK_FORMAT_BC6H_UFLOAT_BLOCK): return "VK_FORMAT_BC6H_UFLOAT_BLOCK";
        case(VkFormat::VK_FORMAT_BC6H_SFLOAT_BLOCK): return "VK_FORMAT_BC6H_SFLOAT_BLOCK";
        case(VkFormat::VK_FORMAT_BC7_UNORM_BLOCK): return "VK_FORMAT_BC7_UNORM_BLOCK";
        case(VkFormat::VK_FORMAT_BC7_SRGB_BLOCK): return "VK_FORMAT_BC7_SRGB_BLOCK";
        case(VkFormat::VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK): return "VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK";
        case(VkFormat::VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK): return "VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK";
        case(VkFormat::VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK): return "VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK";
        case(VkFormat::VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK): return "VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK";
        case(VkFormat::VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK): return "VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK";
        case(VkFormat::VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK): return "VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK";
        case(VkFormat::VK_FORMAT_EAC_R11_UNORM_BLOCK): return "VK_FORMAT_EAC_R11_UNORM_BLOCK";
        case(VkFormat::VK_FORMAT_EAC_R11_SNORM_BLOCK): return "VK_FORMAT_EAC_R11_SNORM_BLOCK";
        case(VkFormat::VK_FORMAT_EAC_R11G11_UNORM_BLOCK): return "VK_FORMAT_EAC_R11G11_UNORM_BLOCK";
        case(VkFormat::VK_FORMAT_EAC_R11G11_SNORM_BLOCK): return "VK_FORMAT_EAC_R11G11_SNORM_BLOCK";
        case(VkFormat::VK_FORMAT_ASTC_4x4_UNORM_BLOCK): return "VK_FORMAT_ASTC_4x4_UNORM_BLOCK";
        case(VkFormat::VK_FORMAT_ASTC_4x4_SRGB_BLOCK): return "VK_FORMAT_ASTC_4x4_SRGB_BLOCK";
        case(VkFormat::VK_FORMAT_ASTC_5x4_UNORM_BLOCK): return "VK_FORMAT_ASTC_5x4_UNORM_BLOCK";
        case(VkFormat::VK_FORMAT_ASTC_5x4_SRGB_BLOCK): return "VK_FORMAT_ASTC_5x4_SRGB_BLOCK";
        case(VkFormat::VK_FORMAT_ASTC_5x5_UNORM_BLOCK): return "VK_FORMAT_ASTC_5x5_UNORM_BLOCK";
        case(VkFormat::VK_FORMAT_ASTC_5x5_SRGB_BLOCK): return "VK_FORMAT_ASTC_5x5_SRGB_BLOCK";
        case(VkFormat::VK_FORMAT_ASTC_6x5_UNORM_BLOCK): return "VK_FORMAT_ASTC_6x5_UNORM_BLOCK";
        case(VkFormat::VK_FORMAT_ASTC_6x5_SRGB_BLOCK): return "VK_FORMAT_ASTC_6x5_SRGB_BLOCK";
        case(VkFormat::VK_FORMAT_ASTC_6x6_UNORM_BLOCK): return "VK_FORMAT_ASTC_6x6_UNORM_BLOCK";
        case(VkFormat::VK_FORMAT_ASTC_6x6_SRGB_BLOCK): return "VK_FORMAT_ASTC_6x6_SRGB_BLOCK";
        case(VkFormat::VK_FORMAT_ASTC_8x5_UNORM_BLOCK): return "VK_FORMAT_ASTC_8x5_UNORM_BLOCK";
        case(VkFormat::VK_FORMAT_ASTC_8x5_SRGB_BLOCK): return "VK_FORMAT_ASTC_8x5_SRGB_BLOCK";
        case(VkFormat::VK_FORMAT_ASTC_8x6_UNORM_BLOCK): return "VK_FORMAT_ASTC_8x6_UNORM_BLOCK";
        case(VkFormat::VK_FORMAT_ASTC_8x6_SRGB_BLOCK): return "VK_FORMAT_ASTC_8x6_SRGB_BLOCK";
        case(VkFormat::VK_FORMAT_ASTC_8x8_UNORM_BLOCK): return "VK_FORMAT_ASTC_8x8_UNORM_BLOCK";
        case(VkFormat::VK_FORMAT_ASTC_8x8_SRGB_BLOCK): return "VK_FORMAT_ASTC_8x8_SRGB_BLOCK";
        case(VkFormat::VK_FORMAT_ASTC_10x5_UNORM_BLOCK): return "VK_FORMAT_ASTC_10x5_UNORM_BLOCK";
        case(VkFormat::VK_FORMAT_ASTC_10x5_SRGB_BLOCK): return "VK_FORMAT_ASTC_10x5_SRGB_BLOCK";
        case(VkFormat::VK_FORMAT_ASTC_10x6_UNORM_BLOCK): return "VK_FORMAT_ASTC_10x6_UNORM_BLOCK";
        case(VkFormat::VK_FORMAT_ASTC_10x6_SRGB_BLOCK): return "VK_FORMAT_ASTC_10x6_SRGB_BLOCK";
        case(VkFormat::VK_FORMAT_ASTC_10x8_UNORM_BLOCK): return "VK_FORMAT_ASTC_10x8_UNORM_BLOCK";
        case(VkFormat::VK_FORMAT_ASTC_10x8_SRGB_BLOCK): return "VK_FORMAT_ASTC_10x8_SRGB_BLOCK";
        case(VkFormat::VK_FORMAT_ASTC_10x10_UNORM_BLOCK): return "VK_FORMAT_ASTC_10x10_UNORM_BLOCK";
        case(VkFormat::VK_FORMAT_ASTC_10x10_SRGB_BLOCK): return "VK_FORMAT_ASTC_10x10_SRGB_BLOCK";
        case(VkFormat::VK_FORMAT_ASTC_12x10_UNORM_BLOCK): return "VK_FORMAT_ASTC_12x10_UNORM_BLOCK";
        case(VkFormat::VK_FORMAT_ASTC_12x10_SRGB_BLOCK): return "VK_FORMAT_ASTC_12x10_SRGB_BLOCK";
        case(VkFormat::VK_FORMAT_ASTC_12x12_UNORM_BLOCK): return "VK_FORMAT_ASTC_12x12_UNORM_BLOCK";
        case(VkFormat::VK_FORMAT_ASTC_12x12_SRGB_BLOCK): return "VK_FORMAT_ASTC_12x12_SRGB_BLOCK";
        case(VkFormat::VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG): return "VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG";
        case(VkFormat::VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG): return "VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG";
        case(VkFormat::VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG): return "VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG";
        case(VkFormat::VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG): return "VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG";
        case(VkFormat::VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG): return "VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG";
        case(VkFormat::VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG): return "VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG";
        case(VkFormat::VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG): return "VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG";
        case(VkFormat::VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG): return "VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG";
        case(VkFormat::VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT): return "VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT";
        case(VkFormat::VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT): return "VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT";
        case(VkFormat::VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT): return "VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT";
        case(VkFormat::VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT): return "VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT";
        case(VkFormat::VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT): return "VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT";
        case(VkFormat::VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT): return "VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT";
        case(VkFormat::VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT): return "VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT";
        case(VkFormat::VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT): return "VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT";
        case(VkFormat::VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT): return "VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT";
        case(VkFormat::VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT): return "VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT";
        case(VkFormat::VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT): return "VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT";
        case(VkFormat::VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT): return "VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT";
        case(VkFormat::VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT): return "VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT";
        case(VkFormat::VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT): return "VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT";
        case(VkFormat::VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT): return "VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT";
        case(VkFormat::VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT): return "VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT";
        case(VkFormat::VK_FORMAT_G8B8G8R8_422_UNORM): return "VK_FORMAT_G8B8G8R8_422_UNORM";
        case(VkFormat::VK_FORMAT_B8G8R8G8_422_UNORM): return "VK_FORMAT_B8G8R8G8_422_UNORM";
        case(VkFormat::VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM): return "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM";
        case(VkFormat::VK_FORMAT_G8_B8R8_2PLANE_420_UNORM): return "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM";
        case(VkFormat::VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM): return "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM";
        case(VkFormat::VK_FORMAT_G8_B8R8_2PLANE_422_UNORM): return "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM";
        case(VkFormat::VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM): return "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM";
        case(VkFormat::VK_FORMAT_R10X6_UNORM_PACK16): return "VK_FORMAT_R10X6_UNORM_PACK16";
        case(VkFormat::VK_FORMAT_R10X6G10X6_UNORM_2PACK16): return "VK_FORMAT_R10X6G10X6_UNORM_2PACK16";
        case(VkFormat::VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16): return "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16";
        case(VkFormat::VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16): return "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16";
        case(VkFormat::VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16): return "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16";
        case(VkFormat::VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16): return "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16";
        case(VkFormat::VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16): return "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16";
        case(VkFormat::VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16): return "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16";
        case(VkFormat::VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16): return "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16";
        case(VkFormat::VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16): return "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16";
        case(VkFormat::VK_FORMAT_R12X4_UNORM_PACK16): return "VK_FORMAT_R12X4_UNORM_PACK16";
        case(VkFormat::VK_FORMAT_R12X4G12X4_UNORM_2PACK16): return "VK_FORMAT_R12X4G12X4_UNORM_2PACK16";
        case(VkFormat::VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16): return "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16";
        case(VkFormat::VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16): return "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16";
        case(VkFormat::VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16): return "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16";
        case(VkFormat::VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16): return "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16";
        case(VkFormat::VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16): return "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16";
        case(VkFormat::VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16): return "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16";
        case(VkFormat::VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16): return "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16";
        case(VkFormat::VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16): return "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16";
        case(VkFormat::VK_FORMAT_G16B16G16R16_422_UNORM): return "VK_FORMAT_G16B16G16R16_422_UNORM";
        case(VkFormat::VK_FORMAT_B16G16R16G16_422_UNORM): return "VK_FORMAT_B16G16R16G16_422_UNORM";
        case(VkFormat::VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM): return "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM";
        case(VkFormat::VK_FORMAT_G16_B16R16_2PLANE_420_UNORM): return "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM";
        case(VkFormat::VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM): return "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM";
        case(VkFormat::VK_FORMAT_G16_B16R16_2PLANE_422_UNORM): return "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM";
        case(VkFormat::VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM): return "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkFrontFace val) {
    switch(val) {
        case(VkFrontFace::VK_FRONT_FACE_COUNTER_CLOCKWISE): return "VK_FRONT_FACE_COUNTER_CLOCKWISE";
        case(VkFrontFace::VK_FRONT_FACE_CLOCKWISE): return "VK_FRONT_FACE_CLOCKWISE";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkImageLayout val) {
    switch(val) {
        case(VkImageLayout::VK_IMAGE_LAYOUT_UNDEFINED): return "VK_IMAGE_LAYOUT_UNDEFINED";
        case(VkImageLayout::VK_IMAGE_LAYOUT_GENERAL): return "VK_IMAGE_LAYOUT_GENERAL";
        case(VkImageLayout::VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL): return "VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL";
        case(VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL): return "VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL";
        case(VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL): return "VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL";
        case(VkImageLayout::VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL): return "VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL";
        case(VkImageLayout::VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL): return "VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL";
        case(VkImageLayout::VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL): return "VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL";
        case(VkImageLayout::VK_IMAGE_LAYOUT_PREINITIALIZED): return "VK_IMAGE_LAYOUT_PREINITIALIZED";
        case(VkImageLayout::VK_IMAGE_LAYOUT_PRESENT_SRC_KHR): return "VK_IMAGE_LAYOUT_PRESENT_SRC_KHR";
        case(VkImageLayout::VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR): return "VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR";
        case(VkImageLayout::VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV): return "VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV";
        case(VkImageLayout::VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT): return "VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT";
        case(VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL): return "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL";
        case(VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL): return "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL";
        case(VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL): return "VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL";
        case(VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL): return "VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL";
        case(VkImageLayout::VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL): return "VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL";
        case(VkImageLayout::VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL): return "VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkImageTiling val) {
    switch(val) {
        case(VkImageTiling::VK_IMAGE_TILING_OPTIMAL): return "VK_IMAGE_TILING_OPTIMAL";
        case(VkImageTiling::VK_IMAGE_TILING_LINEAR): return "VK_IMAGE_TILING_LINEAR";
        case(VkImageTiling::VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT): return "VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkImageType val) {
    switch(val) {
        case(VkImageType::VK_IMAGE_TYPE_1D): return "VK_IMAGE_TYPE_1D";
        case(VkImageType::VK_IMAGE_TYPE_2D): return "VK_IMAGE_TYPE_2D";
        case(VkImageType::VK_IMAGE_TYPE_3D): return "VK_IMAGE_TYPE_3D";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkImageViewType val) {
    switch(val) {
        case(VkImageViewType::VK_IMAGE_VIEW_TYPE_1D): return "VK_IMAGE_VIEW_TYPE_1D";
        case(VkImageViewType::VK_IMAGE_VIEW_TYPE_2D): return "VK_IMAGE_VIEW_TYPE_2D";
        case(VkImageViewType::VK_IMAGE_VIEW_TYPE_3D): return "VK_IMAGE_VIEW_TYPE_3D";
        case(VkImageViewType::VK_IMAGE_VIEW_TYPE_CUBE): return "VK_IMAGE_VIEW_TYPE_CUBE";
        case(VkImageViewType::VK_IMAGE_VIEW_TYPE_1D_ARRAY): return "VK_IMAGE_VIEW_TYPE_1D_ARRAY";
        case(VkImageViewType::VK_IMAGE_VIEW_TYPE_2D_ARRAY): return "VK_IMAGE_VIEW_TYPE_2D_ARRAY";
        case(VkImageViewType::VK_IMAGE_VIEW_TYPE_CUBE_ARRAY): return "VK_IMAGE_VIEW_TYPE_CUBE_ARRAY";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkSharingMode val) {
    switch(val) {
        case(VkSharingMode::VK_SHARING_MODE_EXCLUSIVE): return "VK_SHARING_MODE_EXCLUSIVE";
        case(VkSharingMode::VK_SHARING_MODE_CONCURRENT): return "VK_SHARING_MODE_CONCURRENT";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkIndexType val) {
    switch(val) {
        case(VkIndexType::VK_INDEX_TYPE_UINT16): return "VK_INDEX_TYPE_UINT16";
        case(VkIndexType::VK_INDEX_TYPE_UINT32): return "VK_INDEX_TYPE_UINT32";
        case(VkIndexType::VK_INDEX_TYPE_NONE_KHR): return "VK_INDEX_TYPE_NONE_KHR";
        case(VkIndexType::VK_INDEX_TYPE_UINT8_EXT): return "VK_INDEX_TYPE_UINT8_EXT";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkLogicOp val) {
    switch(val) {
        case(VkLogicOp::VK_LOGIC_OP_CLEAR): return "VK_LOGIC_OP_CLEAR";
        case(VkLogicOp::VK_LOGIC_OP_AND): return "VK_LOGIC_OP_AND";
        case(VkLogicOp::VK_LOGIC_OP_AND_REVERSE): return "VK_LOGIC_OP_AND_REVERSE";
        case(VkLogicOp::VK_LOGIC_OP_COPY): return "VK_LOGIC_OP_COPY";
        case(VkLogicOp::VK_LOGIC_OP_AND_INVERTED): return "VK_LOGIC_OP_AND_INVERTED";
        case(VkLogicOp::VK_LOGIC_OP_NO_OP): return "VK_LOGIC_OP_NO_OP";
        case(VkLogicOp::VK_LOGIC_OP_XOR): return "VK_LOGIC_OP_XOR";
        case(VkLogicOp::VK_LOGIC_OP_OR): return "VK_LOGIC_OP_OR";
        case(VkLogicOp::VK_LOGIC_OP_NOR): return "VK_LOGIC_OP_NOR";
        case(VkLogicOp::VK_LOGIC_OP_EQUIVALENT): return "VK_LOGIC_OP_EQUIVALENT";
        case(VkLogicOp::VK_LOGIC_OP_INVERT): return "VK_LOGIC_OP_INVERT";
        case(VkLogicOp::VK_LOGIC_OP_OR_REVERSE): return "VK_LOGIC_OP_OR_REVERSE";
        case(VkLogicOp::VK_LOGIC_OP_COPY_INVERTED): return "VK_LOGIC_OP_COPY_INVERTED";
        case(VkLogicOp::VK_LOGIC_OP_OR_INVERTED): return "VK_LOGIC_OP_OR_INVERTED";
        case(VkLogicOp::VK_LOGIC_OP_NAND): return "VK_LOGIC_OP_NAND";
        case(VkLogicOp::VK_LOGIC_OP_SET): return "VK_LOGIC_OP_SET";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkPhysicalDeviceType val) {
    switch(val) {
        case(VkPhysicalDeviceType::VK_PHYSICAL_DEVICE_TYPE_OTHER): return "VK_PHYSICAL_DEVICE_TYPE_OTHER";
        case(VkPhysicalDeviceType::VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU): return "VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU";
        case(VkPhysicalDeviceType::VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU): return "VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU";
        case(VkPhysicalDeviceType::VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU): return "VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU";
        case(VkPhysicalDeviceType::VK_PHYSICAL_DEVICE_TYPE_CPU): return "VK_PHYSICAL_DEVICE_TYPE_CPU";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkPipelineBindPoint val) {
    switch(val) {
        case(VkPipelineBindPoint::VK_PIPELINE_BIND_POINT_GRAPHICS): return "VK_PIPELINE_BIND_POINT_GRAPHICS";
        case(VkPipelineBindPoint::VK_PIPELINE_BIND_POINT_COMPUTE): return "VK_PIPELINE_BIND_POINT_COMPUTE";
        case(VkPipelineBindPoint::VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR): return "VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkPrimitiveTopology val) {
    switch(val) {
        case(VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_POINT_LIST): return "VK_PRIMITIVE_TOPOLOGY_POINT_LIST";
        case(VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_LINE_LIST): return "VK_PRIMITIVE_TOPOLOGY_LINE_LIST";
        case(VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_LINE_STRIP): return "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP";
        case(VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST): return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST";
        case(VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP): return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP";
        case(VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN): return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN";
        case(VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY): return "VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY";
        case(VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY): return "VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY";
        case(VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY): return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY";
        case(VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY): return "VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY";
        case(VkPrimitiveTopology::VK_PRIMITIVE_TOPOLOGY_PATCH_LIST): return "VK_PRIMITIVE_TOPOLOGY_PATCH_LIST";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkQueryType val) {
    switch(val) {
        case(VkQueryType::VK_QUERY_TYPE_OCCLUSION): return "VK_QUERY_TYPE_OCCLUSION";
        case(VkQueryType::VK_QUERY_TYPE_PIPELINE_STATISTICS): return "VK_QUERY_TYPE_PIPELINE_STATISTICS";
        case(VkQueryType::VK_QUERY_TYPE_TIMESTAMP): return "VK_QUERY_TYPE_TIMESTAMP";
        case(VkQueryType::VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT): return "VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT";
        case(VkQueryType::VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR): return "VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR";
        case(VkQueryType::VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR): return "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR";
        case(VkQueryType::VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR): return "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR";
        case(VkQueryType::VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV): return "VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV";
        case(VkQueryType::VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL): return "VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkSubpassContents val) {
    switch(val) {
        case(VkSubpassContents::VK_SUBPASS_CONTENTS_INLINE): return "VK_SUBPASS_CONTENTS_INLINE";
        case(VkSubpassContents::VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS): return "VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkResult val) {
    switch(val) {
        case(VkResult::VK_SUCCESS): return "VK_SUCCESS";
        case(VkResult::VK_NOT_READY): return "VK_NOT_READY";
        case(VkResult::VK_TIMEOUT): return "VK_TIMEOUT";
        case(VkResult::VK_EVENT_SET): return "VK_EVENT_SET";
        case(VkResult::VK_EVENT_RESET): return "VK_EVENT_RESET";
        case(VkResult::VK_INCOMPLETE): return "VK_INCOMPLETE";
        case(VkResult::VK_ERROR_OUT_OF_HOST_MEMORY): return "VK_ERROR_OUT_OF_HOST_MEMORY";
        case(VkResult::VK_ERROR_OUT_OF_DEVICE_MEMORY): return "VK_ERROR_OUT_OF_DEVICE_MEMORY";
        case(VkResult::VK_ERROR_INITIALIZATION_FAILED): return "VK_ERROR_INITIALIZATION_FAILED";
        case(VkResult::VK_ERROR_DEVICE_LOST): return "VK_ERROR_DEVICE_LOST";
        case(VkResult::VK_ERROR_MEMORY_MAP_FAILED): return "VK_ERROR_MEMORY_MAP_FAILED";
        case(VkResult::VK_ERROR_LAYER_NOT_PRESENT): return "VK_ERROR_LAYER_NOT_PRESENT";
        case(VkResult::VK_ERROR_EXTENSION_NOT_PRESENT): return "VK_ERROR_EXTENSION_NOT_PRESENT";
        case(VkResult::VK_ERROR_FEATURE_NOT_PRESENT): return "VK_ERROR_FEATURE_NOT_PRESENT";
        case(VkResult::VK_ERROR_INCOMPATIBLE_DRIVER): return "VK_ERROR_INCOMPATIBLE_DRIVER";
        case(VkResult::VK_ERROR_TOO_MANY_OBJECTS): return "VK_ERROR_TOO_MANY_OBJECTS";
        case(VkResult::VK_ERROR_FORMAT_NOT_SUPPORTED): return "VK_ERROR_FORMAT_NOT_SUPPORTED";
        case(VkResult::VK_ERROR_FRAGMENTED_POOL): return "VK_ERROR_FRAGMENTED_POOL";
        case(VkResult::VK_ERROR_UNKNOWN): return "VK_ERROR_UNKNOWN";
        case(VkResult::VK_ERROR_SURFACE_LOST_KHR): return "VK_ERROR_SURFACE_LOST_KHR";
        case(VkResult::VK_ERROR_NATIVE_WINDOW_IN_USE_KHR): return "VK_ERROR_NATIVE_WINDOW_IN_USE_KHR";
        case(VkResult::VK_SUBOPTIMAL_KHR): return "VK_SUBOPTIMAL_KHR";
        case(VkResult::VK_ERROR_OUT_OF_DATE_KHR): return "VK_ERROR_OUT_OF_DATE_KHR";
        case(VkResult::VK_ERROR_INCOMPATIBLE_DISPLAY_KHR): return "VK_ERROR_INCOMPATIBLE_DISPLAY_KHR";
        case(VkResult::VK_ERROR_VALIDATION_FAILED_EXT): return "VK_ERROR_VALIDATION_FAILED_EXT";
        case(VkResult::VK_ERROR_INVALID_SHADER_NV): return "VK_ERROR_INVALID_SHADER_NV";
        case(VkResult::VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT): return "VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT";
        case(VkResult::VK_ERROR_NOT_PERMITTED_EXT): return "VK_ERROR_NOT_PERMITTED_EXT";
        case(VkResult::VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT): return "VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT";
        case(VkResult::VK_THREAD_IDLE_KHR): return "VK_THREAD_IDLE_KHR";
        case(VkResult::VK_THREAD_DONE_KHR): return "VK_THREAD_DONE_KHR";
        case(VkResult::VK_OPERATION_DEFERRED_KHR): return "VK_OPERATION_DEFERRED_KHR";
        case(VkResult::VK_OPERATION_NOT_DEFERRED_KHR): return "VK_OPERATION_NOT_DEFERRED_KHR";
        case(VkResult::VK_PIPELINE_COMPILE_REQUIRED_EXT): return "VK_PIPELINE_COMPILE_REQUIRED_EXT";
        case(VkResult::VK_ERROR_OUT_OF_POOL_MEMORY): return "VK_ERROR_OUT_OF_POOL_MEMORY";
        case(VkResult::VK_ERROR_INVALID_EXTERNAL_HANDLE): return "VK_ERROR_INVALID_EXTERNAL_HANDLE";
        case(VkResult::VK_ERROR_FRAGMENTATION): return "VK_ERROR_FRAGMENTATION";
        case(VkResult::VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS): return "VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkStencilOp val) {
    switch(val) {
        case(VkStencilOp::VK_STENCIL_OP_KEEP): return "VK_STENCIL_OP_KEEP";
        case(VkStencilOp::VK_STENCIL_OP_ZERO): return "VK_STENCIL_OP_ZERO";
        case(VkStencilOp::VK_STENCIL_OP_REPLACE): return "VK_STENCIL_OP_REPLACE";
        case(VkStencilOp::VK_STENCIL_OP_INCREMENT_AND_CLAMP): return "VK_STENCIL_OP_INCREMENT_AND_CLAMP";
        case(VkStencilOp::VK_STENCIL_OP_DECREMENT_AND_CLAMP): return "VK_STENCIL_OP_DECREMENT_AND_CLAMP";
        case(VkStencilOp::VK_STENCIL_OP_INVERT): return "VK_STENCIL_OP_INVERT";
        case(VkStencilOp::VK_STENCIL_OP_INCREMENT_AND_WRAP): return "VK_STENCIL_OP_INCREMENT_AND_WRAP";
        case(VkStencilOp::VK_STENCIL_OP_DECREMENT_AND_WRAP): return "VK_STENCIL_OP_DECREMENT_AND_WRAP";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkStructureType val) {
    switch(val) {
        case(VkStructureType::VK_STRUCTURE_TYPE_APPLICATION_INFO): return "VK_STRUCTURE_TYPE_APPLICATION_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO): return "VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO): return "VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO): return "VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_SUBMIT_INFO): return "VK_STRUCTURE_TYPE_SUBMIT_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO): return "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE): return "VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE";
        case(VkStructureType::VK_STRUCTURE_TYPE_BIND_SPARSE_INFO): return "VK_STRUCTURE_TYPE_BIND_SPARSE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_FENCE_CREATE_INFO): return "VK_STRUCTURE_TYPE_FENCE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO): return "VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_EVENT_CREATE_INFO): return "VK_STRUCTURE_TYPE_EVENT_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO): return "VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO): return "VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO): return "VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO): return "VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO): return "VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO): return "VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO): return "VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO): return "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO): return "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO): return "VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO): return "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO): return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO): return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO): return "VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO): return "VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO): return "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO): return "VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO): return "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO): return "VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO): return "VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO): return "VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO): return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO): return "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO): return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET): return "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET";
        case(VkStructureType::VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET): return "VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET";
        case(VkStructureType::VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO): return "VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO): return "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO): return "VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO): return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO): return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO): return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO): return "VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER): return "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER): return "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER";
        case(VkStructureType::VK_STRUCTURE_TYPE_MEMORY_BARRIER): return "VK_STRUCTURE_TYPE_MEMORY_BARRIER";
        case(VkStructureType::VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO): return "VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO): return "VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR): return "VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PRESENT_INFO_KHR): return "VK_STRUCTURE_TYPE_PRESENT_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR): return "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR): return "VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR): return "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR): return "VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR): return "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR): return "VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR): return "VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR): return "VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR): return "VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR): return "VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR): return "VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR): return "VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR): return "VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR): return "VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT): return "VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD): return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT): return "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT): return "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT): return "VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV): return "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV): return "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV): return "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT): return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX): return "VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX): return "VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX";
        case(VkStructureType::VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD): return "VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD";
        case(VkStructureType::VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP): return "VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV): return "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV): return "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV): return "VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV): return "VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV): return "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT): return "VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN): return "VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT): return "VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR): return "VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR): return "VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR): return "VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR): return "VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR): return "VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR): return "VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR): return "VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR): return "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR): return "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR): return "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR): return "VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR): return "VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR): return "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR): return "VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT): return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT): return "VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR): return "VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV): return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT): return "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT): return "VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT): return "VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT): return "VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT): return "VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE): return "VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV): return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT): return "VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT): return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT): return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_HDR_METADATA_EXT): return "VK_STRUCTURE_TYPE_HDR_METADATA_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR): return "VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR): return "VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR): return "VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR): return "VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR): return "VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR): return "VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR): return "VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR): return "VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR): return "VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR): return "VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR): return "VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR): return "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR): return "VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR): return "VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR): return "VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR): return "VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR): return "VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR): return "VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK): return "VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK";
        case(VkStructureType::VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK): return "VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT): return "VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT): return "VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT): return "VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT): return "VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT): return "VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID): return "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID";
        case(VkStructureType::VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID): return "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID";
        case(VkStructureType::VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID): return "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID): return "VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID";
        case(VkStructureType::VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID): return "VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID";
        case(VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID): return "VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT): return "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT): return "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT): return "VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT): return "VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT): return "VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT): return "VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT): return "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV): return "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR): return "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR): return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR): return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR): return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR): return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR): return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR): return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR): return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR): return "VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR): return "VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR): return "VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR): return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR): return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR): return "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR): return "VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR): return "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV): return "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT): return "VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT): return "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT): return "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT): return "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT): return "VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT): return "VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV): return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV): return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV): return "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV): return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_GEOMETRY_NV): return "VK_STRUCTURE_TYPE_GEOMETRY_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV): return "VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV): return "VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV): return "VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV): return "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV): return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV): return "VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV): return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV): return "VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT): return "VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT): return "VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT): return "VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT): return "VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD): return "VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD";
        case(VkStructureType::VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT): return "VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD): return "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT): return "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP): return "VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT): return "VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV): return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV): return "VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV): return "VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL";
        case(VkStructureType::VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL): return "VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL";
        case(VkStructureType::VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL): return "VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL";
        case(VkStructureType::VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL): return "VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL";
        case(VkStructureType::VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL): return "VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL";
        case(VkStructureType::VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL): return "VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL";
        case(VkStructureType::VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL): return "VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD): return "VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD";
        case(VkStructureType::VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD): return "VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA): return "VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT): return "VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT): return "VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT): return "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR): return "VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR): return "VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT): return "VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR): return "VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT): return "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT): return "VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV): return "VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV): return "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV): return "VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT): return "VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT): return "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT): return "VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT): return "VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT): return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR): return "VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR): return "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR): return "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR): return "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR): return "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV): return "VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV): return "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV): return "VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV): return "VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV): return "VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV): return "VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM): return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM";
        case(VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM): return "VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT): return "VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT): return "VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT): return "VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR): return "VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT): return "VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT): return "VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV): return "VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV): return "VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM): return "VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR): return "VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR): return "VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR): return "VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR): return "VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR): return "VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR): return "VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR): return "VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR): return "VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR): return "VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR): return "VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR): return "VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT): return "VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE";
        case(VkStructureType::VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE): return "VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES";
        case(VkStructureType::VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO): return "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO): return "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES";
        case(VkStructureType::VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS): return "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS";
        case(VkStructureType::VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO): return "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO): return "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO): return "VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO): return "VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO): return "VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO): return "VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO): return "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO): return "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO): return "VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2): return "VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2): return "VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2): return "VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2";
        case(VkStructureType::VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2): return "VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2";
        case(VkStructureType::VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2): return "VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2";
        case(VkStructureType::VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2): return "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2): return "VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2";
        case(VkStructureType::VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2): return "VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2";
        case(VkStructureType::VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2): return "VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES";
        case(VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO): return "VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO): return "VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO): return "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO): return "VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES";
        case(VkStructureType::VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO): return "VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2): return "VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2";
        case(VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO): return "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO): return "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO): return "VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO): return "VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES";
        case(VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES): return "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES";
        case(VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO): return "VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES): return "VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES): return "VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES";
        case(VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO): return "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO): return "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO): return "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES): return "VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES";
        case(VkStructureType::VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO): return "VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO): return "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES): return "VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES";
        case(VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT): return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO): return "VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2): return "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2";
        case(VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2): return "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2";
        case(VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2): return "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2";
        case(VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2): return "VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2";
        case(VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2): return "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2";
        case(VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO): return "VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_END_INFO): return "VK_STRUCTURE_TYPE_SUBPASS_END_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES";
        case(VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO): return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES";
        case(VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO): return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT): return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES";
        case(VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE): return "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES";
        case(VkStructureType::VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO): return "VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES";
        case(VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO): return "VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES";
        case(VkStructureType::VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO): return "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO): return "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO): return "VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES";
        case(VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT): return "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT";
        case(VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT): return "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES";
        case(VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO): return "VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO): return "VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO): return "VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO): return "VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES): return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES";
        case(VkStructureType::VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO): return "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO): return "VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO): return "VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO";
        case(VkStructureType::VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO): return "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkSystemAllocationScope val) {
    switch(val) {
        case(VkSystemAllocationScope::VK_SYSTEM_ALLOCATION_SCOPE_COMMAND): return "VK_SYSTEM_ALLOCATION_SCOPE_COMMAND";
        case(VkSystemAllocationScope::VK_SYSTEM_ALLOCATION_SCOPE_OBJECT): return "VK_SYSTEM_ALLOCATION_SCOPE_OBJECT";
        case(VkSystemAllocationScope::VK_SYSTEM_ALLOCATION_SCOPE_CACHE): return "VK_SYSTEM_ALLOCATION_SCOPE_CACHE";
        case(VkSystemAllocationScope::VK_SYSTEM_ALLOCATION_SCOPE_DEVICE): return "VK_SYSTEM_ALLOCATION_SCOPE_DEVICE";
        case(VkSystemAllocationScope::VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE): return "VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkInternalAllocationType val) {
    switch(val) {
        case(VkInternalAllocationType::VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE): return "VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkSamplerAddressMode val) {
    switch(val) {
        case(VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_REPEAT): return "VK_SAMPLER_ADDRESS_MODE_REPEAT";
        case(VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT): return "VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT";
        case(VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE): return "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE";
        case(VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER): return "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER";
        case(VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE): return "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkFilter val) {
    switch(val) {
        case(VkFilter::VK_FILTER_NEAREST): return "VK_FILTER_NEAREST";
        case(VkFilter::VK_FILTER_LINEAR): return "VK_FILTER_LINEAR";
        case(VkFilter::VK_FILTER_CUBIC_IMG): return "VK_FILTER_CUBIC_IMG";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkSamplerMipmapMode val) {
    switch(val) {
        case(VkSamplerMipmapMode::VK_SAMPLER_MIPMAP_MODE_NEAREST): return "VK_SAMPLER_MIPMAP_MODE_NEAREST";
        case(VkSamplerMipmapMode::VK_SAMPLER_MIPMAP_MODE_LINEAR): return "VK_SAMPLER_MIPMAP_MODE_LINEAR";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkVertexInputRate val) {
    switch(val) {
        case(VkVertexInputRate::VK_VERTEX_INPUT_RATE_VERTEX): return "VK_VERTEX_INPUT_RATE_VERTEX";
        case(VkVertexInputRate::VK_VERTEX_INPUT_RATE_INSTANCE): return "VK_VERTEX_INPUT_RATE_INSTANCE";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkObjectType val) {
    switch(val) {
        case(VkObjectType::VK_OBJECT_TYPE_UNKNOWN): return "VK_OBJECT_TYPE_UNKNOWN";
        case(VkObjectType::VK_OBJECT_TYPE_INSTANCE): return "VK_OBJECT_TYPE_INSTANCE";
        case(VkObjectType::VK_OBJECT_TYPE_PHYSICAL_DEVICE): return "VK_OBJECT_TYPE_PHYSICAL_DEVICE";
        case(VkObjectType::VK_OBJECT_TYPE_DEVICE): return "VK_OBJECT_TYPE_DEVICE";
        case(VkObjectType::VK_OBJECT_TYPE_QUEUE): return "VK_OBJECT_TYPE_QUEUE";
        case(VkObjectType::VK_OBJECT_TYPE_SEMAPHORE): return "VK_OBJECT_TYPE_SEMAPHORE";
        case(VkObjectType::VK_OBJECT_TYPE_COMMAND_BUFFER): return "VK_OBJECT_TYPE_COMMAND_BUFFER";
        case(VkObjectType::VK_OBJECT_TYPE_FENCE): return "VK_OBJECT_TYPE_FENCE";
        case(VkObjectType::VK_OBJECT_TYPE_DEVICE_MEMORY): return "VK_OBJECT_TYPE_DEVICE_MEMORY";
        case(VkObjectType::VK_OBJECT_TYPE_BUFFER): return "VK_OBJECT_TYPE_BUFFER";
        case(VkObjectType::VK_OBJECT_TYPE_IMAGE): return "VK_OBJECT_TYPE_IMAGE";
        case(VkObjectType::VK_OBJECT_TYPE_EVENT): return "VK_OBJECT_TYPE_EVENT";
        case(VkObjectType::VK_OBJECT_TYPE_QUERY_POOL): return "VK_OBJECT_TYPE_QUERY_POOL";
        case(VkObjectType::VK_OBJECT_TYPE_BUFFER_VIEW): return "VK_OBJECT_TYPE_BUFFER_VIEW";
        case(VkObjectType::VK_OBJECT_TYPE_IMAGE_VIEW): return "VK_OBJECT_TYPE_IMAGE_VIEW";
        case(VkObjectType::VK_OBJECT_TYPE_SHADER_MODULE): return "VK_OBJECT_TYPE_SHADER_MODULE";
        case(VkObjectType::VK_OBJECT_TYPE_PIPELINE_CACHE): return "VK_OBJECT_TYPE_PIPELINE_CACHE";
        case(VkObjectType::VK_OBJECT_TYPE_PIPELINE_LAYOUT): return "VK_OBJECT_TYPE_PIPELINE_LAYOUT";
        case(VkObjectType::VK_OBJECT_TYPE_RENDER_PASS): return "VK_OBJECT_TYPE_RENDER_PASS";
        case(VkObjectType::VK_OBJECT_TYPE_PIPELINE): return "VK_OBJECT_TYPE_PIPELINE";
        case(VkObjectType::VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT): return "VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT";
        case(VkObjectType::VK_OBJECT_TYPE_SAMPLER): return "VK_OBJECT_TYPE_SAMPLER";
        case(VkObjectType::VK_OBJECT_TYPE_DESCRIPTOR_POOL): return "VK_OBJECT_TYPE_DESCRIPTOR_POOL";
        case(VkObjectType::VK_OBJECT_TYPE_DESCRIPTOR_SET): return "VK_OBJECT_TYPE_DESCRIPTOR_SET";
        case(VkObjectType::VK_OBJECT_TYPE_FRAMEBUFFER): return "VK_OBJECT_TYPE_FRAMEBUFFER";
        case(VkObjectType::VK_OBJECT_TYPE_COMMAND_POOL): return "VK_OBJECT_TYPE_COMMAND_POOL";
        case(VkObjectType::VK_OBJECT_TYPE_SURFACE_KHR): return "VK_OBJECT_TYPE_SURFACE_KHR";
        case(VkObjectType::VK_OBJECT_TYPE_SWAPCHAIN_KHR): return "VK_OBJECT_TYPE_SWAPCHAIN_KHR";
        case(VkObjectType::VK_OBJECT_TYPE_DISPLAY_KHR): return "VK_OBJECT_TYPE_DISPLAY_KHR";
        case(VkObjectType::VK_OBJECT_TYPE_DISPLAY_MODE_KHR): return "VK_OBJECT_TYPE_DISPLAY_MODE_KHR";
        case(VkObjectType::VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT): return "VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT";
        case(VkObjectType::VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT): return "VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT";
        case(VkObjectType::VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR): return "VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR";
        case(VkObjectType::VK_OBJECT_TYPE_VALIDATION_CACHE_EXT): return "VK_OBJECT_TYPE_VALIDATION_CACHE_EXT";
        case(VkObjectType::VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV): return "VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV";
        case(VkObjectType::VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL): return "VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL";
        case(VkObjectType::VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR): return "VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR";
        case(VkObjectType::VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV): return "VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV";
        case(VkObjectType::VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT): return "VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT";
        case(VkObjectType::VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION): return "VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION";
        case(VkObjectType::VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE): return "VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkIndirectCommandsTokenTypeNV val) {
    switch(val) {
        case(VkIndirectCommandsTokenTypeNV::VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV): return "VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV";
        case(VkIndirectCommandsTokenTypeNV::VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV): return "VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV";
        case(VkIndirectCommandsTokenTypeNV::VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV): return "VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV";
        case(VkIndirectCommandsTokenTypeNV::VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV): return "VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV";
        case(VkIndirectCommandsTokenTypeNV::VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV): return "VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV";
        case(VkIndirectCommandsTokenTypeNV::VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV): return "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV";
        case(VkIndirectCommandsTokenTypeNV::VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV): return "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV";
        case(VkIndirectCommandsTokenTypeNV::VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV): return "VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkDescriptorUpdateTemplateType val) {
    switch(val) {
        case(VkDescriptorUpdateTemplateType::VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET): return "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET";
        case(VkDescriptorUpdateTemplateType::VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR): return "VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkViewportCoordinateSwizzleNV val) {
    switch(val) {
        case(VkViewportCoordinateSwizzleNV::VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV): return "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV";
        case(VkViewportCoordinateSwizzleNV::VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV): return "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV";
        case(VkViewportCoordinateSwizzleNV::VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV): return "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV";
        case(VkViewportCoordinateSwizzleNV::VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV): return "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV";
        case(VkViewportCoordinateSwizzleNV::VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV): return "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV";
        case(VkViewportCoordinateSwizzleNV::VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV): return "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV";
        case(VkViewportCoordinateSwizzleNV::VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV): return "VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV";
        case(VkViewportCoordinateSwizzleNV::VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV): return "VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkDiscardRectangleModeEXT val) {
    switch(val) {
        case(VkDiscardRectangleModeEXT::VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT): return "VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT";
        case(VkDiscardRectangleModeEXT::VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT): return "VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkPointClippingBehavior val) {
    switch(val) {
        case(VkPointClippingBehavior::VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES): return "VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES";
        case(VkPointClippingBehavior::VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY): return "VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkCoverageModulationModeNV val) {
    switch(val) {
        case(VkCoverageModulationModeNV::VK_COVERAGE_MODULATION_MODE_NONE_NV): return "VK_COVERAGE_MODULATION_MODE_NONE_NV";
        case(VkCoverageModulationModeNV::VK_COVERAGE_MODULATION_MODE_RGB_NV): return "VK_COVERAGE_MODULATION_MODE_RGB_NV";
        case(VkCoverageModulationModeNV::VK_COVERAGE_MODULATION_MODE_ALPHA_NV): return "VK_COVERAGE_MODULATION_MODE_ALPHA_NV";
        case(VkCoverageModulationModeNV::VK_COVERAGE_MODULATION_MODE_RGBA_NV): return "VK_COVERAGE_MODULATION_MODE_RGBA_NV";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkCoverageReductionModeNV val) {
    switch(val) {
        case(VkCoverageReductionModeNV::VK_COVERAGE_REDUCTION_MODE_MERGE_NV): return "VK_COVERAGE_REDUCTION_MODE_MERGE_NV";
        case(VkCoverageReductionModeNV::VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV): return "VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkValidationCacheHeaderVersionEXT val) {
    switch(val) {
        case(VkValidationCacheHeaderVersionEXT::VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT): return "VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkShaderInfoTypeAMD val) {
    switch(val) {
        case(VkShaderInfoTypeAMD::VK_SHADER_INFO_TYPE_STATISTICS_AMD): return "VK_SHADER_INFO_TYPE_STATISTICS_AMD";
        case(VkShaderInfoTypeAMD::VK_SHADER_INFO_TYPE_BINARY_AMD): return "VK_SHADER_INFO_TYPE_BINARY_AMD";
        case(VkShaderInfoTypeAMD::VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD): return "VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkQueueGlobalPriorityEXT val) {
    switch(val) {
        case(VkQueueGlobalPriorityEXT::VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT): return "VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT";
        case(VkQueueGlobalPriorityEXT::VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT): return "VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT";
        case(VkQueueGlobalPriorityEXT::VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT): return "VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT";
        case(VkQueueGlobalPriorityEXT::VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT): return "VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkTimeDomainEXT val) {
    switch(val) {
        case(VkTimeDomainEXT::VK_TIME_DOMAIN_DEVICE_EXT): return "VK_TIME_DOMAIN_DEVICE_EXT";
        case(VkTimeDomainEXT::VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT): return "VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT";
        case(VkTimeDomainEXT::VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT): return "VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT";
        case(VkTimeDomainEXT::VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT): return "VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkConservativeRasterizationModeEXT val) {
    switch(val) {
        case(VkConservativeRasterizationModeEXT::VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT): return "VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT";
        case(VkConservativeRasterizationModeEXT::VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT): return "VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT";
        case(VkConservativeRasterizationModeEXT::VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT): return "VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkSemaphoreType val) {
    switch(val) {
        case(VkSemaphoreType::VK_SEMAPHORE_TYPE_BINARY): return "VK_SEMAPHORE_TYPE_BINARY";
        case(VkSemaphoreType::VK_SEMAPHORE_TYPE_TIMELINE): return "VK_SEMAPHORE_TYPE_TIMELINE";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkBuildAccelerationStructureModeKHR val) {
    switch(val) {
        case(VkBuildAccelerationStructureModeKHR::VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR): return "VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR";
        case(VkBuildAccelerationStructureModeKHR::VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR): return "VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkCopyAccelerationStructureModeKHR val) {
    switch(val) {
        case(VkCopyAccelerationStructureModeKHR::VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR): return "VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR";
        case(VkCopyAccelerationStructureModeKHR::VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR): return "VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR";
        case(VkCopyAccelerationStructureModeKHR::VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR): return "VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR";
        case(VkCopyAccelerationStructureModeKHR::VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR): return "VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkAccelerationStructureTypeKHR val) {
    switch(val) {
        case(VkAccelerationStructureTypeKHR::VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR): return "VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR";
        case(VkAccelerationStructureTypeKHR::VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR): return "VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR";
        case(VkAccelerationStructureTypeKHR::VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR): return "VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkGeometryTypeKHR val) {
    switch(val) {
        case(VkGeometryTypeKHR::VK_GEOMETRY_TYPE_TRIANGLES_KHR): return "VK_GEOMETRY_TYPE_TRIANGLES_KHR";
        case(VkGeometryTypeKHR::VK_GEOMETRY_TYPE_AABBS_KHR): return "VK_GEOMETRY_TYPE_AABBS_KHR";
        case(VkGeometryTypeKHR::VK_GEOMETRY_TYPE_INSTANCES_KHR): return "VK_GEOMETRY_TYPE_INSTANCES_KHR";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkRayTracingShaderGroupTypeKHR val) {
    switch(val) {
        case(VkRayTracingShaderGroupTypeKHR::VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR): return "VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR";
        case(VkRayTracingShaderGroupTypeKHR::VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR): return "VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR";
        case(VkRayTracingShaderGroupTypeKHR::VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR): return "VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkAccelerationStructureMemoryRequirementsTypeNV val) {
    switch(val) {
        case(VkAccelerationStructureMemoryRequirementsTypeNV::VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV): return "VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV";
        case(VkAccelerationStructureMemoryRequirementsTypeNV::VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV): return "VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV";
        case(VkAccelerationStructureMemoryRequirementsTypeNV::VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV): return "VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkAccelerationStructureBuildTypeKHR val) {
    switch(val) {
        case(VkAccelerationStructureBuildTypeKHR::VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR): return "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR";
        case(VkAccelerationStructureBuildTypeKHR::VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR): return "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR";
        case(VkAccelerationStructureBuildTypeKHR::VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR): return "VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkAccelerationStructureCompatibilityKHR val) {
    switch(val) {
        case(VkAccelerationStructureCompatibilityKHR::VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR): return "VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR";
        case(VkAccelerationStructureCompatibilityKHR::VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR): return "VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkShaderGroupShaderKHR val) {
    switch(val) {
        case(VkShaderGroupShaderKHR::VK_SHADER_GROUP_SHADER_GENERAL_KHR): return "VK_SHADER_GROUP_SHADER_GENERAL_KHR";
        case(VkShaderGroupShaderKHR::VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR): return "VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR";
        case(VkShaderGroupShaderKHR::VK_SHADER_GROUP_SHADER_ANY_HIT_KHR): return "VK_SHADER_GROUP_SHADER_ANY_HIT_KHR";
        case(VkShaderGroupShaderKHR::VK_SHADER_GROUP_SHADER_INTERSECTION_KHR): return "VK_SHADER_GROUP_SHADER_INTERSECTION_KHR";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkMemoryOverallocationBehaviorAMD val) {
    switch(val) {
        case(VkMemoryOverallocationBehaviorAMD::VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD): return "VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD";
        case(VkMemoryOverallocationBehaviorAMD::VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD): return "VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD";
        case(VkMemoryOverallocationBehaviorAMD::VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD): return "VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkScopeNV val) {
    switch(val) {
        case(VkScopeNV::VK_SCOPE_DEVICE_NV): return "VK_SCOPE_DEVICE_NV";
        case(VkScopeNV::VK_SCOPE_WORKGROUP_NV): return "VK_SCOPE_WORKGROUP_NV";
        case(VkScopeNV::VK_SCOPE_SUBGROUP_NV): return "VK_SCOPE_SUBGROUP_NV";
        case(VkScopeNV::VK_SCOPE_QUEUE_FAMILY_NV): return "VK_SCOPE_QUEUE_FAMILY_NV";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkComponentTypeNV val) {
    switch(val) {
        case(VkComponentTypeNV::VK_COMPONENT_TYPE_FLOAT16_NV): return "VK_COMPONENT_TYPE_FLOAT16_NV";
        case(VkComponentTypeNV::VK_COMPONENT_TYPE_FLOAT32_NV): return "VK_COMPONENT_TYPE_FLOAT32_NV";
        case(VkComponentTypeNV::VK_COMPONENT_TYPE_FLOAT64_NV): return "VK_COMPONENT_TYPE_FLOAT64_NV";
        case(VkComponentTypeNV::VK_COMPONENT_TYPE_SINT8_NV): return "VK_COMPONENT_TYPE_SINT8_NV";
        case(VkComponentTypeNV::VK_COMPONENT_TYPE_SINT16_NV): return "VK_COMPONENT_TYPE_SINT16_NV";
        case(VkComponentTypeNV::VK_COMPONENT_TYPE_SINT32_NV): return "VK_COMPONENT_TYPE_SINT32_NV";
        case(VkComponentTypeNV::VK_COMPONENT_TYPE_SINT64_NV): return "VK_COMPONENT_TYPE_SINT64_NV";
        case(VkComponentTypeNV::VK_COMPONENT_TYPE_UINT8_NV): return "VK_COMPONENT_TYPE_UINT8_NV";
        case(VkComponentTypeNV::VK_COMPONENT_TYPE_UINT16_NV): return "VK_COMPONENT_TYPE_UINT16_NV";
        case(VkComponentTypeNV::VK_COMPONENT_TYPE_UINT32_NV): return "VK_COMPONENT_TYPE_UINT32_NV";
        case(VkComponentTypeNV::VK_COMPONENT_TYPE_UINT64_NV): return "VK_COMPONENT_TYPE_UINT64_NV";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkPerformanceCounterScopeKHR val) {
    switch(val) {
        case(VkPerformanceCounterScopeKHR::VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR): return "VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR";
        case(VkPerformanceCounterScopeKHR::VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR): return "VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR";
        case(VkPerformanceCounterScopeKHR::VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR): return "VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkPerformanceCounterUnitKHR val) {
    switch(val) {
        case(VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR): return "VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR";
        case(VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR): return "VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR";
        case(VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR): return "VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR";
        case(VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR): return "VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR";
        case(VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR): return "VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR";
        case(VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR): return "VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR";
        case(VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR): return "VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR";
        case(VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR): return "VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR";
        case(VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR): return "VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR";
        case(VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR): return "VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR";
        case(VkPerformanceCounterUnitKHR::VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR): return "VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkPerformanceCounterStorageKHR val) {
    switch(val) {
        case(VkPerformanceCounterStorageKHR::VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR): return "VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR";
        case(VkPerformanceCounterStorageKHR::VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR): return "VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR";
        case(VkPerformanceCounterStorageKHR::VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR): return "VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR";
        case(VkPerformanceCounterStorageKHR::VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR): return "VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR";
        case(VkPerformanceCounterStorageKHR::VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR): return "VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR";
        case(VkPerformanceCounterStorageKHR::VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR): return "VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkPerformanceConfigurationTypeINTEL val) {
    switch(val) {
        case(VkPerformanceConfigurationTypeINTEL::VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL): return "VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkQueryPoolSamplingModeINTEL val) {
    switch(val) {
        case(VkQueryPoolSamplingModeINTEL::VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL): return "VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkPerformanceOverrideTypeINTEL val) {
    switch(val) {
        case(VkPerformanceOverrideTypeINTEL::VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL): return "VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL";
        case(VkPerformanceOverrideTypeINTEL::VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL): return "VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkPerformanceParameterTypeINTEL val) {
    switch(val) {
        case(VkPerformanceParameterTypeINTEL::VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL): return "VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL";
        case(VkPerformanceParameterTypeINTEL::VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL): return "VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkPerformanceValueTypeINTEL val) {
    switch(val) {
        case(VkPerformanceValueTypeINTEL::VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL): return "VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL";
        case(VkPerformanceValueTypeINTEL::VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL): return "VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL";
        case(VkPerformanceValueTypeINTEL::VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL): return "VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL";
        case(VkPerformanceValueTypeINTEL::VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL): return "VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL";
        case(VkPerformanceValueTypeINTEL::VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL): return "VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkLineRasterizationModeEXT val) {
    switch(val) {
        case(VkLineRasterizationModeEXT::VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT): return "VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT";
        case(VkLineRasterizationModeEXT::VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT): return "VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT";
        case(VkLineRasterizationModeEXT::VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT): return "VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT";
        case(VkLineRasterizationModeEXT::VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT): return "VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkFragmentShadingRateNV val) {
    switch(val) {
        case(VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV): return "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV";
        case(VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV): return "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV";
        case(VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV): return "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV";
        case(VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV): return "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV";
        case(VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV): return "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV";
        case(VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV): return "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV";
        case(VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV): return "VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV";
        case(VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV): return "VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV";
        case(VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV): return "VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV";
        case(VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV): return "VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV";
        case(VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV): return "VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV";
        case(VkFragmentShadingRateNV::VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV): return "VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkFragmentShadingRateTypeNV val) {
    switch(val) {
        case(VkFragmentShadingRateTypeNV::VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV): return "VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV";
        case(VkFragmentShadingRateTypeNV::VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV): return "VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkColorSpaceKHR val) {
    switch(val) {
        case(VkColorSpaceKHR::VK_COLOR_SPACE_SRGB_NONLINEAR_KHR): return "VK_COLOR_SPACE_SRGB_NONLINEAR_KHR";
        case(VkColorSpaceKHR::VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT): return "VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT";
        case(VkColorSpaceKHR::VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT): return "VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT";
        case(VkColorSpaceKHR::VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT): return "VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT";
        case(VkColorSpaceKHR::VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT): return "VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT";
        case(VkColorSpaceKHR::VK_COLOR_SPACE_BT709_LINEAR_EXT): return "VK_COLOR_SPACE_BT709_LINEAR_EXT";
        case(VkColorSpaceKHR::VK_COLOR_SPACE_BT709_NONLINEAR_EXT): return "VK_COLOR_SPACE_BT709_NONLINEAR_EXT";
        case(VkColorSpaceKHR::VK_COLOR_SPACE_BT2020_LINEAR_EXT): return "VK_COLOR_SPACE_BT2020_LINEAR_EXT";
        case(VkColorSpaceKHR::VK_COLOR_SPACE_HDR10_ST2084_EXT): return "VK_COLOR_SPACE_HDR10_ST2084_EXT";
        case(VkColorSpaceKHR::VK_COLOR_SPACE_DOLBYVISION_EXT): return "VK_COLOR_SPACE_DOLBYVISION_EXT";
        case(VkColorSpaceKHR::VK_COLOR_SPACE_HDR10_HLG_EXT): return "VK_COLOR_SPACE_HDR10_HLG_EXT";
        case(VkColorSpaceKHR::VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT): return "VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT";
        case(VkColorSpaceKHR::VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT): return "VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT";
        case(VkColorSpaceKHR::VK_COLOR_SPACE_PASS_THROUGH_EXT): return "VK_COLOR_SPACE_PASS_THROUGH_EXT";
        case(VkColorSpaceKHR::VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT): return "VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT";
        case(VkColorSpaceKHR::VK_COLOR_SPACE_DISPLAY_NATIVE_AMD): return "VK_COLOR_SPACE_DISPLAY_NATIVE_AMD";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkPresentModeKHR val) {
    switch(val) {
        case(VkPresentModeKHR::VK_PRESENT_MODE_IMMEDIATE_KHR): return "VK_PRESENT_MODE_IMMEDIATE_KHR";
        case(VkPresentModeKHR::VK_PRESENT_MODE_MAILBOX_KHR): return "VK_PRESENT_MODE_MAILBOX_KHR";
        case(VkPresentModeKHR::VK_PRESENT_MODE_FIFO_KHR): return "VK_PRESENT_MODE_FIFO_KHR";
        case(VkPresentModeKHR::VK_PRESENT_MODE_FIFO_RELAXED_KHR): return "VK_PRESENT_MODE_FIFO_RELAXED_KHR";
        case(VkPresentModeKHR::VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR): return "VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR";
        case(VkPresentModeKHR::VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR): return "VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkDebugReportObjectTypeEXT val) {
    switch(val) {
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT";
        case(VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT): return "VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkDeviceMemoryReportEventTypeEXT val) {
    switch(val) {
        case(VkDeviceMemoryReportEventTypeEXT::VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT): return "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT";
        case(VkDeviceMemoryReportEventTypeEXT::VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT): return "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT";
        case(VkDeviceMemoryReportEventTypeEXT::VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT): return "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT";
        case(VkDeviceMemoryReportEventTypeEXT::VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT): return "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT";
        case(VkDeviceMemoryReportEventTypeEXT::VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT): return "VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkRasterizationOrderAMD val) {
    switch(val) {
        case(VkRasterizationOrderAMD::VK_RASTERIZATION_ORDER_STRICT_AMD): return "VK_RASTERIZATION_ORDER_STRICT_AMD";
        case(VkRasterizationOrderAMD::VK_RASTERIZATION_ORDER_RELAXED_AMD): return "VK_RASTERIZATION_ORDER_RELAXED_AMD";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkValidationCheckEXT val) {
    switch(val) {
        case(VkValidationCheckEXT::VK_VALIDATION_CHECK_ALL_EXT): return "VK_VALIDATION_CHECK_ALL_EXT";
        case(VkValidationCheckEXT::VK_VALIDATION_CHECK_SHADERS_EXT): return "VK_VALIDATION_CHECK_SHADERS_EXT";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkValidationFeatureEnableEXT val) {
    switch(val) {
        case(VkValidationFeatureEnableEXT::VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT): return "VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT";
        case(VkValidationFeatureEnableEXT::VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT): return "VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT";
        case(VkValidationFeatureEnableEXT::VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT): return "VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT";
        case(VkValidationFeatureEnableEXT::VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT): return "VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT";
        case(VkValidationFeatureEnableEXT::VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT): return "VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkValidationFeatureDisableEXT val) {
    switch(val) {
        case(VkValidationFeatureDisableEXT::VK_VALIDATION_FEATURE_DISABLE_ALL_EXT): return "VK_VALIDATION_FEATURE_DISABLE_ALL_EXT";
        case(VkValidationFeatureDisableEXT::VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT): return "VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT";
        case(VkValidationFeatureDisableEXT::VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT): return "VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT";
        case(VkValidationFeatureDisableEXT::VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT): return "VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT";
        case(VkValidationFeatureDisableEXT::VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT): return "VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT";
        case(VkValidationFeatureDisableEXT::VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT): return "VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT";
        case(VkValidationFeatureDisableEXT::VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT): return "VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkDisplayPowerStateEXT val) {
    switch(val) {
        case(VkDisplayPowerStateEXT::VK_DISPLAY_POWER_STATE_OFF_EXT): return "VK_DISPLAY_POWER_STATE_OFF_EXT";
        case(VkDisplayPowerStateEXT::VK_DISPLAY_POWER_STATE_SUSPEND_EXT): return "VK_DISPLAY_POWER_STATE_SUSPEND_EXT";
        case(VkDisplayPowerStateEXT::VK_DISPLAY_POWER_STATE_ON_EXT): return "VK_DISPLAY_POWER_STATE_ON_EXT";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkDeviceEventTypeEXT val) {
    switch(val) {
        case(VkDeviceEventTypeEXT::VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT): return "VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkDisplayEventTypeEXT val) {
    switch(val) {
        case(VkDisplayEventTypeEXT::VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT): return "VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkTessellationDomainOrigin val) {
    switch(val) {
        case(VkTessellationDomainOrigin::VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT): return "VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT";
        case(VkTessellationDomainOrigin::VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT): return "VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkSamplerYcbcrModelConversion val) {
    switch(val) {
        case(VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY): return "VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY";
        case(VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY): return "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY";
        case(VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709): return "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709";
        case(VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601): return "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601";
        case(VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020): return "VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkSamplerYcbcrRange val) {
    switch(val) {
        case(VkSamplerYcbcrRange::VK_SAMPLER_YCBCR_RANGE_ITU_FULL): return "VK_SAMPLER_YCBCR_RANGE_ITU_FULL";
        case(VkSamplerYcbcrRange::VK_SAMPLER_YCBCR_RANGE_ITU_NARROW): return "VK_SAMPLER_YCBCR_RANGE_ITU_NARROW";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkChromaLocation val) {
    switch(val) {
        case(VkChromaLocation::VK_CHROMA_LOCATION_COSITED_EVEN): return "VK_CHROMA_LOCATION_COSITED_EVEN";
        case(VkChromaLocation::VK_CHROMA_LOCATION_MIDPOINT): return "VK_CHROMA_LOCATION_MIDPOINT";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkSamplerReductionMode val) {
    switch(val) {
        case(VkSamplerReductionMode::VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE): return "VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE";
        case(VkSamplerReductionMode::VK_SAMPLER_REDUCTION_MODE_MIN): return "VK_SAMPLER_REDUCTION_MODE_MIN";
        case(VkSamplerReductionMode::VK_SAMPLER_REDUCTION_MODE_MAX): return "VK_SAMPLER_REDUCTION_MODE_MAX";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkBlendOverlapEXT val) {
    switch(val) {
        case(VkBlendOverlapEXT::VK_BLEND_OVERLAP_UNCORRELATED_EXT): return "VK_BLEND_OVERLAP_UNCORRELATED_EXT";
        case(VkBlendOverlapEXT::VK_BLEND_OVERLAP_DISJOINT_EXT): return "VK_BLEND_OVERLAP_DISJOINT_EXT";
        case(VkBlendOverlapEXT::VK_BLEND_OVERLAP_CONJOINT_EXT): return "VK_BLEND_OVERLAP_CONJOINT_EXT";
        default: return "UNKNOWN";
    }
}
#if defined(VK_USE_PLATFORM_WIN32_KHR)
const char * to_string(VkFullScreenExclusiveEXT val) {
    switch(val) {
        case(VkFullScreenExclusiveEXT::VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT): return "VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT";
        case(VkFullScreenExclusiveEXT::VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT): return "VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT";
        case(VkFullScreenExclusiveEXT::VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT): return "VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT";
        case(VkFullScreenExclusiveEXT::VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT): return "VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT";
        default: return "UNKNOWN";
    }
}
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
const char * to_string(VkShaderFloatControlsIndependence val) {
    switch(val) {
        case(VkShaderFloatControlsIndependence::VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY): return "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY";
        case(VkShaderFloatControlsIndependence::VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL): return "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL";
        case(VkShaderFloatControlsIndependence::VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE): return "VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkFragmentShadingRateCombinerOpKHR val) {
    switch(val) {
        case(VkFragmentShadingRateCombinerOpKHR::VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR): return "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR";
        case(VkFragmentShadingRateCombinerOpKHR::VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR): return "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR";
        case(VkFragmentShadingRateCombinerOpKHR::VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR): return "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR";
        case(VkFragmentShadingRateCombinerOpKHR::VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR): return "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR";
        case(VkFragmentShadingRateCombinerOpKHR::VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR): return "VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkVendorId val) {
    switch(val) {
        case(VkVendorId::VK_VENDOR_ID_VIV): return "VK_VENDOR_ID_VIV";
        case(VkVendorId::VK_VENDOR_ID_VSI): return "VK_VENDOR_ID_VSI";
        case(VkVendorId::VK_VENDOR_ID_KAZAN): return "VK_VENDOR_ID_KAZAN";
        case(VkVendorId::VK_VENDOR_ID_CODEPLAY): return "VK_VENDOR_ID_CODEPLAY";
        case(VkVendorId::VK_VENDOR_ID_MESA): return "VK_VENDOR_ID_MESA";
        case(VkVendorId::VK_VENDOR_ID_POCL): return "VK_VENDOR_ID_POCL";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkDriverId val) {
    switch(val) {
        case(VkDriverId::VK_DRIVER_ID_AMD_PROPRIETARY): return "VK_DRIVER_ID_AMD_PROPRIETARY";
        case(VkDriverId::VK_DRIVER_ID_AMD_OPEN_SOURCE): return "VK_DRIVER_ID_AMD_OPEN_SOURCE";
        case(VkDriverId::VK_DRIVER_ID_MESA_RADV): return "VK_DRIVER_ID_MESA_RADV";
        case(VkDriverId::VK_DRIVER_ID_NVIDIA_PROPRIETARY): return "VK_DRIVER_ID_NVIDIA_PROPRIETARY";
        case(VkDriverId::VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS): return "VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS";
        case(VkDriverId::VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA): return "VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA";
        case(VkDriverId::VK_DRIVER_ID_IMAGINATION_PROPRIETARY): return "VK_DRIVER_ID_IMAGINATION_PROPRIETARY";
        case(VkDriverId::VK_DRIVER_ID_QUALCOMM_PROPRIETARY): return "VK_DRIVER_ID_QUALCOMM_PROPRIETARY";
        case(VkDriverId::VK_DRIVER_ID_ARM_PROPRIETARY): return "VK_DRIVER_ID_ARM_PROPRIETARY";
        case(VkDriverId::VK_DRIVER_ID_GOOGLE_SWIFTSHADER): return "VK_DRIVER_ID_GOOGLE_SWIFTSHADER";
        case(VkDriverId::VK_DRIVER_ID_GGP_PROPRIETARY): return "VK_DRIVER_ID_GGP_PROPRIETARY";
        case(VkDriverId::VK_DRIVER_ID_BROADCOM_PROPRIETARY): return "VK_DRIVER_ID_BROADCOM_PROPRIETARY";
        case(VkDriverId::VK_DRIVER_ID_MESA_LLVMPIPE): return "VK_DRIVER_ID_MESA_LLVMPIPE";
        case(VkDriverId::VK_DRIVER_ID_MOLTENVK): return "VK_DRIVER_ID_MOLTENVK";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkShadingRatePaletteEntryNV val) {
    switch(val) {
        case(VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV): return "VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV";
        case(VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV): return "VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV";
        case(VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV): return "VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV";
        case(VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV): return "VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV";
        case(VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV): return "VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV";
        case(VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV): return "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV";
        case(VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV): return "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV";
        case(VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV): return "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV";
        case(VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV): return "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV";
        case(VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV): return "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV";
        case(VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV): return "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV";
        case(VkShadingRatePaletteEntryNV::VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV): return "VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkCoarseSampleOrderTypeNV val) {
    switch(val) {
        case(VkCoarseSampleOrderTypeNV::VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV): return "VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV";
        case(VkCoarseSampleOrderTypeNV::VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV): return "VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV";
        case(VkCoarseSampleOrderTypeNV::VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV): return "VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV";
        case(VkCoarseSampleOrderTypeNV::VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV): return "VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkPipelineExecutableStatisticFormatKHR val) {
    switch(val) {
        case(VkPipelineExecutableStatisticFormatKHR::VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR): return "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR";
        case(VkPipelineExecutableStatisticFormatKHR::VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR): return "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR";
        case(VkPipelineExecutableStatisticFormatKHR::VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR): return "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR";
        case(VkPipelineExecutableStatisticFormatKHR::VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR): return "VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR";
        default: return "UNKNOWN";
    }
}
const char * to_string(VkPipelineCacheCreateFlagBits val) {
    switch(val) {
        case(VkPipelineCacheCreateFlagBits::VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT): return "VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkPipelineCacheCreateFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkPipelineCacheCreateFlagBits::VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT) out += "VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkQueueFlagBits val) {
    switch(val) {
        case(VkQueueFlagBits::VK_QUEUE_GRAPHICS_BIT): return "VK_QUEUE_GRAPHICS_BIT";
        case(VkQueueFlagBits::VK_QUEUE_COMPUTE_BIT): return "VK_QUEUE_COMPUTE_BIT";
        case(VkQueueFlagBits::VK_QUEUE_TRANSFER_BIT): return "VK_QUEUE_TRANSFER_BIT";
        case(VkQueueFlagBits::VK_QUEUE_SPARSE_BINDING_BIT): return "VK_QUEUE_SPARSE_BINDING_BIT";
        case(VkQueueFlagBits::VK_QUEUE_PROTECTED_BIT): return "VK_QUEUE_PROTECTED_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkQueueFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkQueueFlagBits::VK_QUEUE_GRAPHICS_BIT) out += "VK_QUEUE_GRAPHICS_BIT | ";
    if (flag & VkQueueFlagBits::VK_QUEUE_COMPUTE_BIT) out += "VK_QUEUE_COMPUTE_BIT | ";
    if (flag & VkQueueFlagBits::VK_QUEUE_TRANSFER_BIT) out += "VK_QUEUE_TRANSFER_BIT | ";
    if (flag & VkQueueFlagBits::VK_QUEUE_SPARSE_BINDING_BIT) out += "VK_QUEUE_SPARSE_BINDING_BIT | ";
    if (flag & VkQueueFlagBits::VK_QUEUE_PROTECTED_BIT) out += "VK_QUEUE_PROTECTED_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkCullModeFlagBits val) {
    switch(val) {
        case(VkCullModeFlagBits::VK_CULL_MODE_NONE): return "VK_CULL_MODE_NONE";
        case(VkCullModeFlagBits::VK_CULL_MODE_FRONT_BIT): return "VK_CULL_MODE_FRONT_BIT";
        case(VkCullModeFlagBits::VK_CULL_MODE_BACK_BIT): return "VK_CULL_MODE_BACK_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkCullModeFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkCullModeFlagBits::VK_CULL_MODE_NONE) out += "VK_CULL_MODE_NONE | ";
    if (flag & VkCullModeFlagBits::VK_CULL_MODE_FRONT_BIT) out += "VK_CULL_MODE_FRONT_BIT | ";
    if (flag & VkCullModeFlagBits::VK_CULL_MODE_BACK_BIT) out += "VK_CULL_MODE_BACK_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkRenderPassCreateFlagBits val) {
    switch(val) {
        case(VkRenderPassCreateFlagBits::VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM): return "VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkRenderPassCreateFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkRenderPassCreateFlagBits::VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM) out += "VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkDeviceQueueCreateFlagBits val) {
    switch(val) {
        case(VkDeviceQueueCreateFlagBits::VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT): return "VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkDeviceQueueCreateFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkDeviceQueueCreateFlagBits::VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT) out += "VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkMemoryPropertyFlagBits val) {
    switch(val) {
        case(VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT): return "VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT";
        case(VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT): return "VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT";
        case(VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_HOST_COHERENT_BIT): return "VK_MEMORY_PROPERTY_HOST_COHERENT_BIT";
        case(VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_HOST_CACHED_BIT): return "VK_MEMORY_PROPERTY_HOST_CACHED_BIT";
        case(VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT): return "VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT";
        case(VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD): return "VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD";
        case(VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD): return "VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD";
        case(VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_PROTECTED_BIT): return "VK_MEMORY_PROPERTY_PROTECTED_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkMemoryPropertyFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT) out += "VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | ";
    if (flag & VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT) out += "VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | ";
    if (flag & VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_HOST_COHERENT_BIT) out += "VK_MEMORY_PROPERTY_HOST_COHERENT_BIT | ";
    if (flag & VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_HOST_CACHED_BIT) out += "VK_MEMORY_PROPERTY_HOST_CACHED_BIT | ";
    if (flag & VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT) out += "VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT | ";
    if (flag & VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD) out += "VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD | ";
    if (flag & VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD) out += "VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD | ";
    if (flag & VkMemoryPropertyFlagBits::VK_MEMORY_PROPERTY_PROTECTED_BIT) out += "VK_MEMORY_PROPERTY_PROTECTED_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkMemoryHeapFlagBits val) {
    switch(val) {
        case(VkMemoryHeapFlagBits::VK_MEMORY_HEAP_DEVICE_LOCAL_BIT): return "VK_MEMORY_HEAP_DEVICE_LOCAL_BIT";
        case(VkMemoryHeapFlagBits::VK_MEMORY_HEAP_MULTI_INSTANCE_BIT): return "VK_MEMORY_HEAP_MULTI_INSTANCE_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkMemoryHeapFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkMemoryHeapFlagBits::VK_MEMORY_HEAP_DEVICE_LOCAL_BIT) out += "VK_MEMORY_HEAP_DEVICE_LOCAL_BIT | ";
    if (flag & VkMemoryHeapFlagBits::VK_MEMORY_HEAP_MULTI_INSTANCE_BIT) out += "VK_MEMORY_HEAP_MULTI_INSTANCE_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkAccessFlagBits val) {
    switch(val) {
        case(VkAccessFlagBits::VK_ACCESS_INDIRECT_COMMAND_READ_BIT): return "VK_ACCESS_INDIRECT_COMMAND_READ_BIT";
        case(VkAccessFlagBits::VK_ACCESS_INDEX_READ_BIT): return "VK_ACCESS_INDEX_READ_BIT";
        case(VkAccessFlagBits::VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT): return "VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT";
        case(VkAccessFlagBits::VK_ACCESS_UNIFORM_READ_BIT): return "VK_ACCESS_UNIFORM_READ_BIT";
        case(VkAccessFlagBits::VK_ACCESS_INPUT_ATTACHMENT_READ_BIT): return "VK_ACCESS_INPUT_ATTACHMENT_READ_BIT";
        case(VkAccessFlagBits::VK_ACCESS_SHADER_READ_BIT): return "VK_ACCESS_SHADER_READ_BIT";
        case(VkAccessFlagBits::VK_ACCESS_SHADER_WRITE_BIT): return "VK_ACCESS_SHADER_WRITE_BIT";
        case(VkAccessFlagBits::VK_ACCESS_COLOR_ATTACHMENT_READ_BIT): return "VK_ACCESS_COLOR_ATTACHMENT_READ_BIT";
        case(VkAccessFlagBits::VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT): return "VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT";
        case(VkAccessFlagBits::VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT): return "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT";
        case(VkAccessFlagBits::VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT): return "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT";
        case(VkAccessFlagBits::VK_ACCESS_TRANSFER_READ_BIT): return "VK_ACCESS_TRANSFER_READ_BIT";
        case(VkAccessFlagBits::VK_ACCESS_TRANSFER_WRITE_BIT): return "VK_ACCESS_TRANSFER_WRITE_BIT";
        case(VkAccessFlagBits::VK_ACCESS_HOST_READ_BIT): return "VK_ACCESS_HOST_READ_BIT";
        case(VkAccessFlagBits::VK_ACCESS_HOST_WRITE_BIT): return "VK_ACCESS_HOST_WRITE_BIT";
        case(VkAccessFlagBits::VK_ACCESS_MEMORY_READ_BIT): return "VK_ACCESS_MEMORY_READ_BIT";
        case(VkAccessFlagBits::VK_ACCESS_MEMORY_WRITE_BIT): return "VK_ACCESS_MEMORY_WRITE_BIT";
        case(VkAccessFlagBits::VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT): return "VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT";
        case(VkAccessFlagBits::VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT): return "VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT";
        case(VkAccessFlagBits::VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT): return "VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT";
        case(VkAccessFlagBits::VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT): return "VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT";
        case(VkAccessFlagBits::VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT): return "VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT";
        case(VkAccessFlagBits::VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR): return "VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR";
        case(VkAccessFlagBits::VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR): return "VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR";
        case(VkAccessFlagBits::VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV): return "VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV";
        case(VkAccessFlagBits::VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT): return "VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT";
        case(VkAccessFlagBits::VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV): return "VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV";
        case(VkAccessFlagBits::VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV): return "VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkAccessFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkAccessFlagBits::VK_ACCESS_INDIRECT_COMMAND_READ_BIT) out += "VK_ACCESS_INDIRECT_COMMAND_READ_BIT | ";
    if (flag & VkAccessFlagBits::VK_ACCESS_INDEX_READ_BIT) out += "VK_ACCESS_INDEX_READ_BIT | ";
    if (flag & VkAccessFlagBits::VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT) out += "VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT | ";
    if (flag & VkAccessFlagBits::VK_ACCESS_UNIFORM_READ_BIT) out += "VK_ACCESS_UNIFORM_READ_BIT | ";
    if (flag & VkAccessFlagBits::VK_ACCESS_INPUT_ATTACHMENT_READ_BIT) out += "VK_ACCESS_INPUT_ATTACHMENT_READ_BIT | ";
    if (flag & VkAccessFlagBits::VK_ACCESS_SHADER_READ_BIT) out += "VK_ACCESS_SHADER_READ_BIT | ";
    if (flag & VkAccessFlagBits::VK_ACCESS_SHADER_WRITE_BIT) out += "VK_ACCESS_SHADER_WRITE_BIT | ";
    if (flag & VkAccessFlagBits::VK_ACCESS_COLOR_ATTACHMENT_READ_BIT) out += "VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | ";
    if (flag & VkAccessFlagBits::VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT) out += "VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT | ";
    if (flag & VkAccessFlagBits::VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT) out += "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT | ";
    if (flag & VkAccessFlagBits::VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT) out += "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT | ";
    if (flag & VkAccessFlagBits::VK_ACCESS_TRANSFER_READ_BIT) out += "VK_ACCESS_TRANSFER_READ_BIT | ";
    if (flag & VkAccessFlagBits::VK_ACCESS_TRANSFER_WRITE_BIT) out += "VK_ACCESS_TRANSFER_WRITE_BIT | ";
    if (flag & VkAccessFlagBits::VK_ACCESS_HOST_READ_BIT) out += "VK_ACCESS_HOST_READ_BIT | ";
    if (flag & VkAccessFlagBits::VK_ACCESS_HOST_WRITE_BIT) out += "VK_ACCESS_HOST_WRITE_BIT | ";
    if (flag & VkAccessFlagBits::VK_ACCESS_MEMORY_READ_BIT) out += "VK_ACCESS_MEMORY_READ_BIT | ";
    if (flag & VkAccessFlagBits::VK_ACCESS_MEMORY_WRITE_BIT) out += "VK_ACCESS_MEMORY_WRITE_BIT | ";
    if (flag & VkAccessFlagBits::VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT) out += "VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT | ";
    if (flag & VkAccessFlagBits::VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT) out += "VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT | ";
    if (flag & VkAccessFlagBits::VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT) out += "VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT | ";
    if (flag & VkAccessFlagBits::VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT) out += "VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT | ";
    if (flag & VkAccessFlagBits::VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT) out += "VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT | ";
    if (flag & VkAccessFlagBits::VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR) out += "VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR | ";
    if (flag & VkAccessFlagBits::VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR) out += "VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR | ";
    if (flag & VkAccessFlagBits::VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV) out += "VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV | ";
    if (flag & VkAccessFlagBits::VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT) out += "VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT | ";
    if (flag & VkAccessFlagBits::VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV) out += "VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV | ";
    if (flag & VkAccessFlagBits::VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV) out += "VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkBufferUsageFlagBits val) {
    switch(val) {
        case(VkBufferUsageFlagBits::VK_BUFFER_USAGE_TRANSFER_SRC_BIT): return "VK_BUFFER_USAGE_TRANSFER_SRC_BIT";
        case(VkBufferUsageFlagBits::VK_BUFFER_USAGE_TRANSFER_DST_BIT): return "VK_BUFFER_USAGE_TRANSFER_DST_BIT";
        case(VkBufferUsageFlagBits::VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT): return "VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT";
        case(VkBufferUsageFlagBits::VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT): return "VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT";
        case(VkBufferUsageFlagBits::VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT): return "VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT";
        case(VkBufferUsageFlagBits::VK_BUFFER_USAGE_STORAGE_BUFFER_BIT): return "VK_BUFFER_USAGE_STORAGE_BUFFER_BIT";
        case(VkBufferUsageFlagBits::VK_BUFFER_USAGE_INDEX_BUFFER_BIT): return "VK_BUFFER_USAGE_INDEX_BUFFER_BIT";
        case(VkBufferUsageFlagBits::VK_BUFFER_USAGE_VERTEX_BUFFER_BIT): return "VK_BUFFER_USAGE_VERTEX_BUFFER_BIT";
        case(VkBufferUsageFlagBits::VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT): return "VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT";
        case(VkBufferUsageFlagBits::VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT): return "VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT";
        case(VkBufferUsageFlagBits::VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT): return "VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT";
        case(VkBufferUsageFlagBits::VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT): return "VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT";
        case(VkBufferUsageFlagBits::VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR): return "VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR";
        case(VkBufferUsageFlagBits::VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR): return "VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR";
        case(VkBufferUsageFlagBits::VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR): return "VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR";
        case(VkBufferUsageFlagBits::VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT): return "VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkBufferUsageFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkBufferUsageFlagBits::VK_BUFFER_USAGE_TRANSFER_SRC_BIT) out += "VK_BUFFER_USAGE_TRANSFER_SRC_BIT | ";
    if (flag & VkBufferUsageFlagBits::VK_BUFFER_USAGE_TRANSFER_DST_BIT) out += "VK_BUFFER_USAGE_TRANSFER_DST_BIT | ";
    if (flag & VkBufferUsageFlagBits::VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT) out += "VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT | ";
    if (flag & VkBufferUsageFlagBits::VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT) out += "VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT | ";
    if (flag & VkBufferUsageFlagBits::VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT) out += "VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT | ";
    if (flag & VkBufferUsageFlagBits::VK_BUFFER_USAGE_STORAGE_BUFFER_BIT) out += "VK_BUFFER_USAGE_STORAGE_BUFFER_BIT | ";
    if (flag & VkBufferUsageFlagBits::VK_BUFFER_USAGE_INDEX_BUFFER_BIT) out += "VK_BUFFER_USAGE_INDEX_BUFFER_BIT | ";
    if (flag & VkBufferUsageFlagBits::VK_BUFFER_USAGE_VERTEX_BUFFER_BIT) out += "VK_BUFFER_USAGE_VERTEX_BUFFER_BIT | ";
    if (flag & VkBufferUsageFlagBits::VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT) out += "VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT | ";
    if (flag & VkBufferUsageFlagBits::VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT) out += "VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT | ";
    if (flag & VkBufferUsageFlagBits::VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT) out += "VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT | ";
    if (flag & VkBufferUsageFlagBits::VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT) out += "VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT | ";
    if (flag & VkBufferUsageFlagBits::VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR) out += "VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR | ";
    if (flag & VkBufferUsageFlagBits::VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR) out += "VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR | ";
    if (flag & VkBufferUsageFlagBits::VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR) out += "VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR | ";
    if (flag & VkBufferUsageFlagBits::VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT) out += "VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkBufferCreateFlagBits val) {
    switch(val) {
        case(VkBufferCreateFlagBits::VK_BUFFER_CREATE_SPARSE_BINDING_BIT): return "VK_BUFFER_CREATE_SPARSE_BINDING_BIT";
        case(VkBufferCreateFlagBits::VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT): return "VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT";
        case(VkBufferCreateFlagBits::VK_BUFFER_CREATE_SPARSE_ALIASED_BIT): return "VK_BUFFER_CREATE_SPARSE_ALIASED_BIT";
        case(VkBufferCreateFlagBits::VK_BUFFER_CREATE_PROTECTED_BIT): return "VK_BUFFER_CREATE_PROTECTED_BIT";
        case(VkBufferCreateFlagBits::VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT): return "VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkBufferCreateFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkBufferCreateFlagBits::VK_BUFFER_CREATE_SPARSE_BINDING_BIT) out += "VK_BUFFER_CREATE_SPARSE_BINDING_BIT | ";
    if (flag & VkBufferCreateFlagBits::VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT) out += "VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT | ";
    if (flag & VkBufferCreateFlagBits::VK_BUFFER_CREATE_SPARSE_ALIASED_BIT) out += "VK_BUFFER_CREATE_SPARSE_ALIASED_BIT | ";
    if (flag & VkBufferCreateFlagBits::VK_BUFFER_CREATE_PROTECTED_BIT) out += "VK_BUFFER_CREATE_PROTECTED_BIT | ";
    if (flag & VkBufferCreateFlagBits::VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT) out += "VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkShaderStageFlagBits val) {
    switch(val) {
        case(VkShaderStageFlagBits::VK_SHADER_STAGE_VERTEX_BIT): return "VK_SHADER_STAGE_VERTEX_BIT";
        case(VkShaderStageFlagBits::VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT): return "VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT";
        case(VkShaderStageFlagBits::VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT): return "VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT";
        case(VkShaderStageFlagBits::VK_SHADER_STAGE_GEOMETRY_BIT): return "VK_SHADER_STAGE_GEOMETRY_BIT";
        case(VkShaderStageFlagBits::VK_SHADER_STAGE_FRAGMENT_BIT): return "VK_SHADER_STAGE_FRAGMENT_BIT";
        case(VkShaderStageFlagBits::VK_SHADER_STAGE_COMPUTE_BIT): return "VK_SHADER_STAGE_COMPUTE_BIT";
        case(VkShaderStageFlagBits::VK_SHADER_STAGE_RAYGEN_BIT_KHR): return "VK_SHADER_STAGE_RAYGEN_BIT_KHR";
        case(VkShaderStageFlagBits::VK_SHADER_STAGE_ANY_HIT_BIT_KHR): return "VK_SHADER_STAGE_ANY_HIT_BIT_KHR";
        case(VkShaderStageFlagBits::VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR): return "VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR";
        case(VkShaderStageFlagBits::VK_SHADER_STAGE_MISS_BIT_KHR): return "VK_SHADER_STAGE_MISS_BIT_KHR";
        case(VkShaderStageFlagBits::VK_SHADER_STAGE_INTERSECTION_BIT_KHR): return "VK_SHADER_STAGE_INTERSECTION_BIT_KHR";
        case(VkShaderStageFlagBits::VK_SHADER_STAGE_CALLABLE_BIT_KHR): return "VK_SHADER_STAGE_CALLABLE_BIT_KHR";
        case(VkShaderStageFlagBits::VK_SHADER_STAGE_TASK_BIT_NV): return "VK_SHADER_STAGE_TASK_BIT_NV";
        case(VkShaderStageFlagBits::VK_SHADER_STAGE_MESH_BIT_NV): return "VK_SHADER_STAGE_MESH_BIT_NV";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkShaderStageFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkShaderStageFlagBits::VK_SHADER_STAGE_VERTEX_BIT) out += "VK_SHADER_STAGE_VERTEX_BIT | ";
    if (flag & VkShaderStageFlagBits::VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT) out += "VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT | ";
    if (flag & VkShaderStageFlagBits::VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT) out += "VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT | ";
    if (flag & VkShaderStageFlagBits::VK_SHADER_STAGE_GEOMETRY_BIT) out += "VK_SHADER_STAGE_GEOMETRY_BIT | ";
    if (flag & VkShaderStageFlagBits::VK_SHADER_STAGE_FRAGMENT_BIT) out += "VK_SHADER_STAGE_FRAGMENT_BIT | ";
    if (flag & VkShaderStageFlagBits::VK_SHADER_STAGE_COMPUTE_BIT) out += "VK_SHADER_STAGE_COMPUTE_BIT | ";
    if (flag & VkShaderStageFlagBits::VK_SHADER_STAGE_RAYGEN_BIT_KHR) out += "VK_SHADER_STAGE_RAYGEN_BIT_KHR | ";
    if (flag & VkShaderStageFlagBits::VK_SHADER_STAGE_ANY_HIT_BIT_KHR) out += "VK_SHADER_STAGE_ANY_HIT_BIT_KHR | ";
    if (flag & VkShaderStageFlagBits::VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR) out += "VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR | ";
    if (flag & VkShaderStageFlagBits::VK_SHADER_STAGE_MISS_BIT_KHR) out += "VK_SHADER_STAGE_MISS_BIT_KHR | ";
    if (flag & VkShaderStageFlagBits::VK_SHADER_STAGE_INTERSECTION_BIT_KHR) out += "VK_SHADER_STAGE_INTERSECTION_BIT_KHR | ";
    if (flag & VkShaderStageFlagBits::VK_SHADER_STAGE_CALLABLE_BIT_KHR) out += "VK_SHADER_STAGE_CALLABLE_BIT_KHR | ";
    if (flag & VkShaderStageFlagBits::VK_SHADER_STAGE_TASK_BIT_NV) out += "VK_SHADER_STAGE_TASK_BIT_NV | ";
    if (flag & VkShaderStageFlagBits::VK_SHADER_STAGE_MESH_BIT_NV) out += "VK_SHADER_STAGE_MESH_BIT_NV | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkImageUsageFlagBits val) {
    switch(val) {
        case(VkImageUsageFlagBits::VK_IMAGE_USAGE_TRANSFER_SRC_BIT): return "VK_IMAGE_USAGE_TRANSFER_SRC_BIT";
        case(VkImageUsageFlagBits::VK_IMAGE_USAGE_TRANSFER_DST_BIT): return "VK_IMAGE_USAGE_TRANSFER_DST_BIT";
        case(VkImageUsageFlagBits::VK_IMAGE_USAGE_SAMPLED_BIT): return "VK_IMAGE_USAGE_SAMPLED_BIT";
        case(VkImageUsageFlagBits::VK_IMAGE_USAGE_STORAGE_BIT): return "VK_IMAGE_USAGE_STORAGE_BIT";
        case(VkImageUsageFlagBits::VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT): return "VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT";
        case(VkImageUsageFlagBits::VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT): return "VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT";
        case(VkImageUsageFlagBits::VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT): return "VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT";
        case(VkImageUsageFlagBits::VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT): return "VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT";
        case(VkImageUsageFlagBits::VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV): return "VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV";
        case(VkImageUsageFlagBits::VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT): return "VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkImageUsageFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkImageUsageFlagBits::VK_IMAGE_USAGE_TRANSFER_SRC_BIT) out += "VK_IMAGE_USAGE_TRANSFER_SRC_BIT | ";
    if (flag & VkImageUsageFlagBits::VK_IMAGE_USAGE_TRANSFER_DST_BIT) out += "VK_IMAGE_USAGE_TRANSFER_DST_BIT | ";
    if (flag & VkImageUsageFlagBits::VK_IMAGE_USAGE_SAMPLED_BIT) out += "VK_IMAGE_USAGE_SAMPLED_BIT | ";
    if (flag & VkImageUsageFlagBits::VK_IMAGE_USAGE_STORAGE_BIT) out += "VK_IMAGE_USAGE_STORAGE_BIT | ";
    if (flag & VkImageUsageFlagBits::VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT) out += "VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT | ";
    if (flag & VkImageUsageFlagBits::VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT) out += "VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT | ";
    if (flag & VkImageUsageFlagBits::VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT) out += "VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT | ";
    if (flag & VkImageUsageFlagBits::VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT) out += "VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT | ";
    if (flag & VkImageUsageFlagBits::VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV) out += "VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV | ";
    if (flag & VkImageUsageFlagBits::VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT) out += "VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkImageCreateFlagBits val) {
    switch(val) {
        case(VkImageCreateFlagBits::VK_IMAGE_CREATE_SPARSE_BINDING_BIT): return "VK_IMAGE_CREATE_SPARSE_BINDING_BIT";
        case(VkImageCreateFlagBits::VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT): return "VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT";
        case(VkImageCreateFlagBits::VK_IMAGE_CREATE_SPARSE_ALIASED_BIT): return "VK_IMAGE_CREATE_SPARSE_ALIASED_BIT";
        case(VkImageCreateFlagBits::VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT): return "VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT";
        case(VkImageCreateFlagBits::VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT): return "VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT";
        case(VkImageCreateFlagBits::VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV): return "VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV";
        case(VkImageCreateFlagBits::VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT): return "VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT";
        case(VkImageCreateFlagBits::VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT): return "VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT";
        case(VkImageCreateFlagBits::VK_IMAGE_CREATE_ALIAS_BIT): return "VK_IMAGE_CREATE_ALIAS_BIT";
        case(VkImageCreateFlagBits::VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT): return "VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT";
        case(VkImageCreateFlagBits::VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT): return "VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT";
        case(VkImageCreateFlagBits::VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT): return "VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT";
        case(VkImageCreateFlagBits::VK_IMAGE_CREATE_EXTENDED_USAGE_BIT): return "VK_IMAGE_CREATE_EXTENDED_USAGE_BIT";
        case(VkImageCreateFlagBits::VK_IMAGE_CREATE_PROTECTED_BIT): return "VK_IMAGE_CREATE_PROTECTED_BIT";
        case(VkImageCreateFlagBits::VK_IMAGE_CREATE_DISJOINT_BIT): return "VK_IMAGE_CREATE_DISJOINT_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkImageCreateFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkImageCreateFlagBits::VK_IMAGE_CREATE_SPARSE_BINDING_BIT) out += "VK_IMAGE_CREATE_SPARSE_BINDING_BIT | ";
    if (flag & VkImageCreateFlagBits::VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT) out += "VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT | ";
    if (flag & VkImageCreateFlagBits::VK_IMAGE_CREATE_SPARSE_ALIASED_BIT) out += "VK_IMAGE_CREATE_SPARSE_ALIASED_BIT | ";
    if (flag & VkImageCreateFlagBits::VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT) out += "VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT | ";
    if (flag & VkImageCreateFlagBits::VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT) out += "VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT | ";
    if (flag & VkImageCreateFlagBits::VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV) out += "VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV | ";
    if (flag & VkImageCreateFlagBits::VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT) out += "VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT | ";
    if (flag & VkImageCreateFlagBits::VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT) out += "VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT | ";
    if (flag & VkImageCreateFlagBits::VK_IMAGE_CREATE_ALIAS_BIT) out += "VK_IMAGE_CREATE_ALIAS_BIT | ";
    if (flag & VkImageCreateFlagBits::VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT) out += "VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT | ";
    if (flag & VkImageCreateFlagBits::VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT) out += "VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT | ";
    if (flag & VkImageCreateFlagBits::VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT) out += "VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT | ";
    if (flag & VkImageCreateFlagBits::VK_IMAGE_CREATE_EXTENDED_USAGE_BIT) out += "VK_IMAGE_CREATE_EXTENDED_USAGE_BIT | ";
    if (flag & VkImageCreateFlagBits::VK_IMAGE_CREATE_PROTECTED_BIT) out += "VK_IMAGE_CREATE_PROTECTED_BIT | ";
    if (flag & VkImageCreateFlagBits::VK_IMAGE_CREATE_DISJOINT_BIT) out += "VK_IMAGE_CREATE_DISJOINT_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkImageViewCreateFlagBits val) {
    switch(val) {
        case(VkImageViewCreateFlagBits::VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT): return "VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT";
        case(VkImageViewCreateFlagBits::VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT): return "VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkImageViewCreateFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkImageViewCreateFlagBits::VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT) out += "VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT | ";
    if (flag & VkImageViewCreateFlagBits::VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT) out += "VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkSamplerCreateFlagBits val) {
    switch(val) {
        case(VkSamplerCreateFlagBits::VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT): return "VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT";
        case(VkSamplerCreateFlagBits::VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT): return "VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkSamplerCreateFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkSamplerCreateFlagBits::VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT) out += "VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT | ";
    if (flag & VkSamplerCreateFlagBits::VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT) out += "VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkPipelineCreateFlagBits val) {
    switch(val) {
        case(VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT): return "VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT";
        case(VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT): return "VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT";
        case(VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_DERIVATIVE_BIT): return "VK_PIPELINE_CREATE_DERIVATIVE_BIT";
        case(VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR): return "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR";
        case(VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR): return "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR";
        case(VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR): return "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR";
        case(VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR): return "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR";
        case(VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR): return "VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR";
        case(VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR): return "VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR";
        case(VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR): return "VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR";
        case(VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV): return "VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV";
        case(VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR): return "VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR";
        case(VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR): return "VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR";
        case(VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV): return "VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV";
        case(VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_LIBRARY_BIT_KHR): return "VK_PIPELINE_CREATE_LIBRARY_BIT_KHR";
        case(VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT): return "VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT";
        case(VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT): return "VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT";
        case(VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT): return "VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT";
        case(VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_DISPATCH_BASE_BIT): return "VK_PIPELINE_CREATE_DISPATCH_BASE_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkPipelineCreateFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT) out += "VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT | ";
    if (flag & VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT) out += "VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT | ";
    if (flag & VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_DERIVATIVE_BIT) out += "VK_PIPELINE_CREATE_DERIVATIVE_BIT | ";
    if (flag & VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR) out += "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR | ";
    if (flag & VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR) out += "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR | ";
    if (flag & VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR) out += "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR | ";
    if (flag & VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR) out += "VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR | ";
    if (flag & VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR) out += "VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR | ";
    if (flag & VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR) out += "VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR | ";
    if (flag & VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR) out += "VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR | ";
    if (flag & VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV) out += "VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV | ";
    if (flag & VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR) out += "VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR | ";
    if (flag & VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR) out += "VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR | ";
    if (flag & VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV) out += "VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV | ";
    if (flag & VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_LIBRARY_BIT_KHR) out += "VK_PIPELINE_CREATE_LIBRARY_BIT_KHR | ";
    if (flag & VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT) out += "VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT | ";
    if (flag & VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT) out += "VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT | ";
    if (flag & VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT) out += "VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT | ";
    if (flag & VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_DISPATCH_BASE_BIT) out += "VK_PIPELINE_CREATE_DISPATCH_BASE_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkPipelineShaderStageCreateFlagBits val) {
    switch(val) {
        case(VkPipelineShaderStageCreateFlagBits::VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT): return "VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT";
        case(VkPipelineShaderStageCreateFlagBits::VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT): return "VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkPipelineShaderStageCreateFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkPipelineShaderStageCreateFlagBits::VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT) out += "VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT | ";
    if (flag & VkPipelineShaderStageCreateFlagBits::VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT) out += "VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkColorComponentFlagBits val) {
    switch(val) {
        case(VkColorComponentFlagBits::VK_COLOR_COMPONENT_R_BIT): return "VK_COLOR_COMPONENT_R_BIT";
        case(VkColorComponentFlagBits::VK_COLOR_COMPONENT_G_BIT): return "VK_COLOR_COMPONENT_G_BIT";
        case(VkColorComponentFlagBits::VK_COLOR_COMPONENT_B_BIT): return "VK_COLOR_COMPONENT_B_BIT";
        case(VkColorComponentFlagBits::VK_COLOR_COMPONENT_A_BIT): return "VK_COLOR_COMPONENT_A_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkColorComponentFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkColorComponentFlagBits::VK_COLOR_COMPONENT_R_BIT) out += "VK_COLOR_COMPONENT_R_BIT | ";
    if (flag & VkColorComponentFlagBits::VK_COLOR_COMPONENT_G_BIT) out += "VK_COLOR_COMPONENT_G_BIT | ";
    if (flag & VkColorComponentFlagBits::VK_COLOR_COMPONENT_B_BIT) out += "VK_COLOR_COMPONENT_B_BIT | ";
    if (flag & VkColorComponentFlagBits::VK_COLOR_COMPONENT_A_BIT) out += "VK_COLOR_COMPONENT_A_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkFenceCreateFlagBits val) {
    switch(val) {
        case(VkFenceCreateFlagBits::VK_FENCE_CREATE_SIGNALED_BIT): return "VK_FENCE_CREATE_SIGNALED_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkFenceCreateFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkFenceCreateFlagBits::VK_FENCE_CREATE_SIGNALED_BIT) out += "VK_FENCE_CREATE_SIGNALED_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkFormatFeatureFlagBits val) {
    switch(val) {
        case(VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT): return "VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT";
        case(VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT): return "VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT";
        case(VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT): return "VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT";
        case(VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT): return "VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT";
        case(VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT): return "VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT";
        case(VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT): return "VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT";
        case(VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT): return "VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT";
        case(VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT): return "VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT";
        case(VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT): return "VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT";
        case(VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT): return "VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT";
        case(VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_BLIT_SRC_BIT): return "VK_FORMAT_FEATURE_BLIT_SRC_BIT";
        case(VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_BLIT_DST_BIT): return "VK_FORMAT_FEATURE_BLIT_DST_BIT";
        case(VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT): return "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT";
        case(VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG): return "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG";
        case(VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR): return "VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR";
        case(VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT): return "VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT";
        case(VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR): return "VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR";
        case(VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_TRANSFER_SRC_BIT): return "VK_FORMAT_FEATURE_TRANSFER_SRC_BIT";
        case(VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_TRANSFER_DST_BIT): return "VK_FORMAT_FEATURE_TRANSFER_DST_BIT";
        case(VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT): return "VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT";
        case(VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT): return "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT";
        case(VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT): return "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT";
        case(VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT): return "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT";
        case(VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT): return "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT";
        case(VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_DISJOINT_BIT): return "VK_FORMAT_FEATURE_DISJOINT_BIT";
        case(VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT): return "VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT";
        case(VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT): return "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkFormatFeatureFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT) out += "VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | ";
    if (flag & VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT) out += "VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | ";
    if (flag & VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT) out += "VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT | ";
    if (flag & VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT) out += "VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | ";
    if (flag & VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT) out += "VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT | ";
    if (flag & VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT) out += "VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT | ";
    if (flag & VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT) out += "VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | ";
    if (flag & VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT) out += "VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | ";
    if (flag & VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT) out += "VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT | ";
    if (flag & VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT) out += "VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT | ";
    if (flag & VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_BLIT_SRC_BIT) out += "VK_FORMAT_FEATURE_BLIT_SRC_BIT | ";
    if (flag & VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_BLIT_DST_BIT) out += "VK_FORMAT_FEATURE_BLIT_DST_BIT | ";
    if (flag & VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT) out += "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT | ";
    if (flag & VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG) out += "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG | ";
    if (flag & VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR) out += "VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR | ";
    if (flag & VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT) out += "VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT | ";
    if (flag & VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR) out += "VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR | ";
    if (flag & VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_TRANSFER_SRC_BIT) out += "VK_FORMAT_FEATURE_TRANSFER_SRC_BIT | ";
    if (flag & VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_TRANSFER_DST_BIT) out += "VK_FORMAT_FEATURE_TRANSFER_DST_BIT | ";
    if (flag & VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT) out += "VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT | ";
    if (flag & VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT) out += "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT | ";
    if (flag & VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT) out += "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT | ";
    if (flag & VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT) out += "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT | ";
    if (flag & VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT) out += "VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT | ";
    if (flag & VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_DISJOINT_BIT) out += "VK_FORMAT_FEATURE_DISJOINT_BIT | ";
    if (flag & VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT) out += "VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT | ";
    if (flag & VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT) out += "VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkQueryControlFlagBits val) {
    switch(val) {
        case(VkQueryControlFlagBits::VK_QUERY_CONTROL_PRECISE_BIT): return "VK_QUERY_CONTROL_PRECISE_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkQueryControlFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkQueryControlFlagBits::VK_QUERY_CONTROL_PRECISE_BIT) out += "VK_QUERY_CONTROL_PRECISE_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkQueryResultFlagBits val) {
    switch(val) {
        case(VkQueryResultFlagBits::VK_QUERY_RESULT_64_BIT): return "VK_QUERY_RESULT_64_BIT";
        case(VkQueryResultFlagBits::VK_QUERY_RESULT_WAIT_BIT): return "VK_QUERY_RESULT_WAIT_BIT";
        case(VkQueryResultFlagBits::VK_QUERY_RESULT_WITH_AVAILABILITY_BIT): return "VK_QUERY_RESULT_WITH_AVAILABILITY_BIT";
        case(VkQueryResultFlagBits::VK_QUERY_RESULT_PARTIAL_BIT): return "VK_QUERY_RESULT_PARTIAL_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkQueryResultFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkQueryResultFlagBits::VK_QUERY_RESULT_64_BIT) out += "VK_QUERY_RESULT_64_BIT | ";
    if (flag & VkQueryResultFlagBits::VK_QUERY_RESULT_WAIT_BIT) out += "VK_QUERY_RESULT_WAIT_BIT | ";
    if (flag & VkQueryResultFlagBits::VK_QUERY_RESULT_WITH_AVAILABILITY_BIT) out += "VK_QUERY_RESULT_WITH_AVAILABILITY_BIT | ";
    if (flag & VkQueryResultFlagBits::VK_QUERY_RESULT_PARTIAL_BIT) out += "VK_QUERY_RESULT_PARTIAL_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkCommandBufferUsageFlagBits val) {
    switch(val) {
        case(VkCommandBufferUsageFlagBits::VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT): return "VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT";
        case(VkCommandBufferUsageFlagBits::VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT): return "VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT";
        case(VkCommandBufferUsageFlagBits::VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT): return "VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkCommandBufferUsageFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkCommandBufferUsageFlagBits::VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT) out += "VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT | ";
    if (flag & VkCommandBufferUsageFlagBits::VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT) out += "VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT | ";
    if (flag & VkCommandBufferUsageFlagBits::VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT) out += "VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkQueryPipelineStatisticFlagBits val) {
    switch(val) {
        case(VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT): return "VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT";
        case(VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT): return "VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT";
        case(VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT): return "VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT";
        case(VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT): return "VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT";
        case(VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT): return "VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT";
        case(VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT): return "VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT";
        case(VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT): return "VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT";
        case(VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT): return "VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT";
        case(VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT): return "VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT";
        case(VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT): return "VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT";
        case(VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT): return "VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkQueryPipelineStatisticFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT) out += "VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT | ";
    if (flag & VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT) out += "VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT | ";
    if (flag & VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT) out += "VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT | ";
    if (flag & VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT) out += "VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT | ";
    if (flag & VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT) out += "VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT | ";
    if (flag & VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT) out += "VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT | ";
    if (flag & VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT) out += "VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT | ";
    if (flag & VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT) out += "VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT | ";
    if (flag & VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT) out += "VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT | ";
    if (flag & VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT) out += "VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT | ";
    if (flag & VkQueryPipelineStatisticFlagBits::VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT) out += "VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkImageAspectFlagBits val) {
    switch(val) {
        case(VkImageAspectFlagBits::VK_IMAGE_ASPECT_COLOR_BIT): return "VK_IMAGE_ASPECT_COLOR_BIT";
        case(VkImageAspectFlagBits::VK_IMAGE_ASPECT_DEPTH_BIT): return "VK_IMAGE_ASPECT_DEPTH_BIT";
        case(VkImageAspectFlagBits::VK_IMAGE_ASPECT_STENCIL_BIT): return "VK_IMAGE_ASPECT_STENCIL_BIT";
        case(VkImageAspectFlagBits::VK_IMAGE_ASPECT_METADATA_BIT): return "VK_IMAGE_ASPECT_METADATA_BIT";
        case(VkImageAspectFlagBits::VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT): return "VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT";
        case(VkImageAspectFlagBits::VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT): return "VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT";
        case(VkImageAspectFlagBits::VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT): return "VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT";
        case(VkImageAspectFlagBits::VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT): return "VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT";
        case(VkImageAspectFlagBits::VK_IMAGE_ASPECT_PLANE_0_BIT): return "VK_IMAGE_ASPECT_PLANE_0_BIT";
        case(VkImageAspectFlagBits::VK_IMAGE_ASPECT_PLANE_1_BIT): return "VK_IMAGE_ASPECT_PLANE_1_BIT";
        case(VkImageAspectFlagBits::VK_IMAGE_ASPECT_PLANE_2_BIT): return "VK_IMAGE_ASPECT_PLANE_2_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkImageAspectFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkImageAspectFlagBits::VK_IMAGE_ASPECT_COLOR_BIT) out += "VK_IMAGE_ASPECT_COLOR_BIT | ";
    if (flag & VkImageAspectFlagBits::VK_IMAGE_ASPECT_DEPTH_BIT) out += "VK_IMAGE_ASPECT_DEPTH_BIT | ";
    if (flag & VkImageAspectFlagBits::VK_IMAGE_ASPECT_STENCIL_BIT) out += "VK_IMAGE_ASPECT_STENCIL_BIT | ";
    if (flag & VkImageAspectFlagBits::VK_IMAGE_ASPECT_METADATA_BIT) out += "VK_IMAGE_ASPECT_METADATA_BIT | ";
    if (flag & VkImageAspectFlagBits::VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT) out += "VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT | ";
    if (flag & VkImageAspectFlagBits::VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT) out += "VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT | ";
    if (flag & VkImageAspectFlagBits::VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT) out += "VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT | ";
    if (flag & VkImageAspectFlagBits::VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT) out += "VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT | ";
    if (flag & VkImageAspectFlagBits::VK_IMAGE_ASPECT_PLANE_0_BIT) out += "VK_IMAGE_ASPECT_PLANE_0_BIT | ";
    if (flag & VkImageAspectFlagBits::VK_IMAGE_ASPECT_PLANE_1_BIT) out += "VK_IMAGE_ASPECT_PLANE_1_BIT | ";
    if (flag & VkImageAspectFlagBits::VK_IMAGE_ASPECT_PLANE_2_BIT) out += "VK_IMAGE_ASPECT_PLANE_2_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkSparseImageFormatFlagBits val) {
    switch(val) {
        case(VkSparseImageFormatFlagBits::VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT): return "VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT";
        case(VkSparseImageFormatFlagBits::VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT): return "VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT";
        case(VkSparseImageFormatFlagBits::VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT): return "VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkSparseImageFormatFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkSparseImageFormatFlagBits::VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT) out += "VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT | ";
    if (flag & VkSparseImageFormatFlagBits::VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT) out += "VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT | ";
    if (flag & VkSparseImageFormatFlagBits::VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT) out += "VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkSparseMemoryBindFlagBits val) {
    switch(val) {
        case(VkSparseMemoryBindFlagBits::VK_SPARSE_MEMORY_BIND_METADATA_BIT): return "VK_SPARSE_MEMORY_BIND_METADATA_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkSparseMemoryBindFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkSparseMemoryBindFlagBits::VK_SPARSE_MEMORY_BIND_METADATA_BIT) out += "VK_SPARSE_MEMORY_BIND_METADATA_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkPipelineStageFlagBits val) {
    switch(val) {
        case(VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT): return "VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT";
        case(VkPipelineStageFlagBits::VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT): return "VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT";
        case(VkPipelineStageFlagBits::VK_PIPELINE_STAGE_VERTEX_INPUT_BIT): return "VK_PIPELINE_STAGE_VERTEX_INPUT_BIT";
        case(VkPipelineStageFlagBits::VK_PIPELINE_STAGE_VERTEX_SHADER_BIT): return "VK_PIPELINE_STAGE_VERTEX_SHADER_BIT";
        case(VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT): return "VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT";
        case(VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT): return "VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT";
        case(VkPipelineStageFlagBits::VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT): return "VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT";
        case(VkPipelineStageFlagBits::VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT): return "VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT";
        case(VkPipelineStageFlagBits::VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT): return "VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT";
        case(VkPipelineStageFlagBits::VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT): return "VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT";
        case(VkPipelineStageFlagBits::VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT): return "VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT";
        case(VkPipelineStageFlagBits::VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT): return "VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT";
        case(VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TRANSFER_BIT): return "VK_PIPELINE_STAGE_TRANSFER_BIT";
        case(VkPipelineStageFlagBits::VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT): return "VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT";
        case(VkPipelineStageFlagBits::VK_PIPELINE_STAGE_HOST_BIT): return "VK_PIPELINE_STAGE_HOST_BIT";
        case(VkPipelineStageFlagBits::VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT): return "VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT";
        case(VkPipelineStageFlagBits::VK_PIPELINE_STAGE_ALL_COMMANDS_BIT): return "VK_PIPELINE_STAGE_ALL_COMMANDS_BIT";
        case(VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT): return "VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT";
        case(VkPipelineStageFlagBits::VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT): return "VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT";
        case(VkPipelineStageFlagBits::VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR): return "VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR";
        case(VkPipelineStageFlagBits::VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR): return "VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR";
        case(VkPipelineStageFlagBits::VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV): return "VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV";
        case(VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV): return "VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV";
        case(VkPipelineStageFlagBits::VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV): return "VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV";
        case(VkPipelineStageFlagBits::VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT): return "VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT";
        case(VkPipelineStageFlagBits::VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV): return "VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkPipelineStageFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT) out += "VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT | ";
    if (flag & VkPipelineStageFlagBits::VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT) out += "VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT | ";
    if (flag & VkPipelineStageFlagBits::VK_PIPELINE_STAGE_VERTEX_INPUT_BIT) out += "VK_PIPELINE_STAGE_VERTEX_INPUT_BIT | ";
    if (flag & VkPipelineStageFlagBits::VK_PIPELINE_STAGE_VERTEX_SHADER_BIT) out += "VK_PIPELINE_STAGE_VERTEX_SHADER_BIT | ";
    if (flag & VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT) out += "VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT | ";
    if (flag & VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT) out += "VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT | ";
    if (flag & VkPipelineStageFlagBits::VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT) out += "VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT | ";
    if (flag & VkPipelineStageFlagBits::VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT) out += "VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT | ";
    if (flag & VkPipelineStageFlagBits::VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT) out += "VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT | ";
    if (flag & VkPipelineStageFlagBits::VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT) out += "VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT | ";
    if (flag & VkPipelineStageFlagBits::VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT) out += "VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT | ";
    if (flag & VkPipelineStageFlagBits::VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT) out += "VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT | ";
    if (flag & VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TRANSFER_BIT) out += "VK_PIPELINE_STAGE_TRANSFER_BIT | ";
    if (flag & VkPipelineStageFlagBits::VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT) out += "VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT | ";
    if (flag & VkPipelineStageFlagBits::VK_PIPELINE_STAGE_HOST_BIT) out += "VK_PIPELINE_STAGE_HOST_BIT | ";
    if (flag & VkPipelineStageFlagBits::VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT) out += "VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT | ";
    if (flag & VkPipelineStageFlagBits::VK_PIPELINE_STAGE_ALL_COMMANDS_BIT) out += "VK_PIPELINE_STAGE_ALL_COMMANDS_BIT | ";
    if (flag & VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT) out += "VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT | ";
    if (flag & VkPipelineStageFlagBits::VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT) out += "VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT | ";
    if (flag & VkPipelineStageFlagBits::VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR) out += "VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR | ";
    if (flag & VkPipelineStageFlagBits::VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR) out += "VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR | ";
    if (flag & VkPipelineStageFlagBits::VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV) out += "VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV | ";
    if (flag & VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV) out += "VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV | ";
    if (flag & VkPipelineStageFlagBits::VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV) out += "VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV | ";
    if (flag & VkPipelineStageFlagBits::VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT) out += "VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT | ";
    if (flag & VkPipelineStageFlagBits::VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV) out += "VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkCommandPoolCreateFlagBits val) {
    switch(val) {
        case(VkCommandPoolCreateFlagBits::VK_COMMAND_POOL_CREATE_TRANSIENT_BIT): return "VK_COMMAND_POOL_CREATE_TRANSIENT_BIT";
        case(VkCommandPoolCreateFlagBits::VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT): return "VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT";
        case(VkCommandPoolCreateFlagBits::VK_COMMAND_POOL_CREATE_PROTECTED_BIT): return "VK_COMMAND_POOL_CREATE_PROTECTED_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkCommandPoolCreateFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkCommandPoolCreateFlagBits::VK_COMMAND_POOL_CREATE_TRANSIENT_BIT) out += "VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | ";
    if (flag & VkCommandPoolCreateFlagBits::VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT) out += "VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT | ";
    if (flag & VkCommandPoolCreateFlagBits::VK_COMMAND_POOL_CREATE_PROTECTED_BIT) out += "VK_COMMAND_POOL_CREATE_PROTECTED_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkCommandPoolResetFlagBits val) {
    switch(val) {
        case(VkCommandPoolResetFlagBits::VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT): return "VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkCommandPoolResetFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkCommandPoolResetFlagBits::VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT) out += "VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkCommandBufferResetFlagBits val) {
    switch(val) {
        case(VkCommandBufferResetFlagBits::VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT): return "VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkCommandBufferResetFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkCommandBufferResetFlagBits::VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT) out += "VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkSampleCountFlagBits val) {
    switch(val) {
        case(VkSampleCountFlagBits::VK_SAMPLE_COUNT_1_BIT): return "VK_SAMPLE_COUNT_1_BIT";
        case(VkSampleCountFlagBits::VK_SAMPLE_COUNT_2_BIT): return "VK_SAMPLE_COUNT_2_BIT";
        case(VkSampleCountFlagBits::VK_SAMPLE_COUNT_4_BIT): return "VK_SAMPLE_COUNT_4_BIT";
        case(VkSampleCountFlagBits::VK_SAMPLE_COUNT_8_BIT): return "VK_SAMPLE_COUNT_8_BIT";
        case(VkSampleCountFlagBits::VK_SAMPLE_COUNT_16_BIT): return "VK_SAMPLE_COUNT_16_BIT";
        case(VkSampleCountFlagBits::VK_SAMPLE_COUNT_32_BIT): return "VK_SAMPLE_COUNT_32_BIT";
        case(VkSampleCountFlagBits::VK_SAMPLE_COUNT_64_BIT): return "VK_SAMPLE_COUNT_64_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkSampleCountFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkSampleCountFlagBits::VK_SAMPLE_COUNT_1_BIT) out += "VK_SAMPLE_COUNT_1_BIT | ";
    if (flag & VkSampleCountFlagBits::VK_SAMPLE_COUNT_2_BIT) out += "VK_SAMPLE_COUNT_2_BIT | ";
    if (flag & VkSampleCountFlagBits::VK_SAMPLE_COUNT_4_BIT) out += "VK_SAMPLE_COUNT_4_BIT | ";
    if (flag & VkSampleCountFlagBits::VK_SAMPLE_COUNT_8_BIT) out += "VK_SAMPLE_COUNT_8_BIT | ";
    if (flag & VkSampleCountFlagBits::VK_SAMPLE_COUNT_16_BIT) out += "VK_SAMPLE_COUNT_16_BIT | ";
    if (flag & VkSampleCountFlagBits::VK_SAMPLE_COUNT_32_BIT) out += "VK_SAMPLE_COUNT_32_BIT | ";
    if (flag & VkSampleCountFlagBits::VK_SAMPLE_COUNT_64_BIT) out += "VK_SAMPLE_COUNT_64_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkAttachmentDescriptionFlagBits val) {
    switch(val) {
        case(VkAttachmentDescriptionFlagBits::VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT): return "VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkAttachmentDescriptionFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkAttachmentDescriptionFlagBits::VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT) out += "VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkStencilFaceFlagBits val) {
    switch(val) {
        case(VkStencilFaceFlagBits::VK_STENCIL_FACE_FRONT_BIT): return "VK_STENCIL_FACE_FRONT_BIT";
        case(VkStencilFaceFlagBits::VK_STENCIL_FACE_BACK_BIT): return "VK_STENCIL_FACE_BACK_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkStencilFaceFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkStencilFaceFlagBits::VK_STENCIL_FACE_FRONT_BIT) out += "VK_STENCIL_FACE_FRONT_BIT | ";
    if (flag & VkStencilFaceFlagBits::VK_STENCIL_FACE_BACK_BIT) out += "VK_STENCIL_FACE_BACK_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkDescriptorPoolCreateFlagBits val) {
    switch(val) {
        case(VkDescriptorPoolCreateFlagBits::VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT): return "VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT";
        case(VkDescriptorPoolCreateFlagBits::VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE): return "VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE";
        case(VkDescriptorPoolCreateFlagBits::VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT): return "VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkDescriptorPoolCreateFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkDescriptorPoolCreateFlagBits::VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT) out += "VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT | ";
    if (flag & VkDescriptorPoolCreateFlagBits::VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE) out += "VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE | ";
    if (flag & VkDescriptorPoolCreateFlagBits::VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT) out += "VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkDependencyFlagBits val) {
    switch(val) {
        case(VkDependencyFlagBits::VK_DEPENDENCY_BY_REGION_BIT): return "VK_DEPENDENCY_BY_REGION_BIT";
        case(VkDependencyFlagBits::VK_DEPENDENCY_DEVICE_GROUP_BIT): return "VK_DEPENDENCY_DEVICE_GROUP_BIT";
        case(VkDependencyFlagBits::VK_DEPENDENCY_VIEW_LOCAL_BIT): return "VK_DEPENDENCY_VIEW_LOCAL_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkDependencyFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkDependencyFlagBits::VK_DEPENDENCY_BY_REGION_BIT) out += "VK_DEPENDENCY_BY_REGION_BIT | ";
    if (flag & VkDependencyFlagBits::VK_DEPENDENCY_DEVICE_GROUP_BIT) out += "VK_DEPENDENCY_DEVICE_GROUP_BIT | ";
    if (flag & VkDependencyFlagBits::VK_DEPENDENCY_VIEW_LOCAL_BIT) out += "VK_DEPENDENCY_VIEW_LOCAL_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkSemaphoreWaitFlagBits val) {
    switch(val) {
        case(VkSemaphoreWaitFlagBits::VK_SEMAPHORE_WAIT_ANY_BIT): return "VK_SEMAPHORE_WAIT_ANY_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkSemaphoreWaitFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkSemaphoreWaitFlagBits::VK_SEMAPHORE_WAIT_ANY_BIT) out += "VK_SEMAPHORE_WAIT_ANY_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkDisplayPlaneAlphaFlagBitsKHR val) {
    switch(val) {
        case(VkDisplayPlaneAlphaFlagBitsKHR::VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR): return "VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR";
        case(VkDisplayPlaneAlphaFlagBitsKHR::VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR): return "VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR";
        case(VkDisplayPlaneAlphaFlagBitsKHR::VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR): return "VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR";
        case(VkDisplayPlaneAlphaFlagBitsKHR::VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR): return "VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkDisplayPlaneAlphaFlagsKHR flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkDisplayPlaneAlphaFlagBitsKHR::VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR) out += "VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR | ";
    if (flag & VkDisplayPlaneAlphaFlagBitsKHR::VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR) out += "VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR | ";
    if (flag & VkDisplayPlaneAlphaFlagBitsKHR::VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR) out += "VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR | ";
    if (flag & VkDisplayPlaneAlphaFlagBitsKHR::VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR) out += "VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkCompositeAlphaFlagBitsKHR val) {
    switch(val) {
        case(VkCompositeAlphaFlagBitsKHR::VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR): return "VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR";
        case(VkCompositeAlphaFlagBitsKHR::VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR): return "VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR";
        case(VkCompositeAlphaFlagBitsKHR::VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR): return "VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR";
        case(VkCompositeAlphaFlagBitsKHR::VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR): return "VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkCompositeAlphaFlagsKHR flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkCompositeAlphaFlagBitsKHR::VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR) out += "VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR | ";
    if (flag & VkCompositeAlphaFlagBitsKHR::VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR) out += "VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR | ";
    if (flag & VkCompositeAlphaFlagBitsKHR::VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR) out += "VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR | ";
    if (flag & VkCompositeAlphaFlagBitsKHR::VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR) out += "VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkSurfaceTransformFlagBitsKHR val) {
    switch(val) {
        case(VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR): return "VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR";
        case(VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR): return "VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR";
        case(VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR): return "VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR";
        case(VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR): return "VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR";
        case(VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR): return "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR";
        case(VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR): return "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR";
        case(VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR): return "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR";
        case(VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR): return "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR";
        case(VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR): return "VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkSurfaceTransformFlagsKHR flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR) out += "VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR | ";
    if (flag & VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR) out += "VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR | ";
    if (flag & VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR) out += "VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR | ";
    if (flag & VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR) out += "VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR | ";
    if (flag & VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR) out += "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR | ";
    if (flag & VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR) out += "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR | ";
    if (flag & VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR) out += "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR | ";
    if (flag & VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR) out += "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR | ";
    if (flag & VkSurfaceTransformFlagBitsKHR::VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR) out += "VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkDebugReportFlagBitsEXT val) {
    switch(val) {
        case(VkDebugReportFlagBitsEXT::VK_DEBUG_REPORT_INFORMATION_BIT_EXT): return "VK_DEBUG_REPORT_INFORMATION_BIT_EXT";
        case(VkDebugReportFlagBitsEXT::VK_DEBUG_REPORT_WARNING_BIT_EXT): return "VK_DEBUG_REPORT_WARNING_BIT_EXT";
        case(VkDebugReportFlagBitsEXT::VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT): return "VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT";
        case(VkDebugReportFlagBitsEXT::VK_DEBUG_REPORT_ERROR_BIT_EXT): return "VK_DEBUG_REPORT_ERROR_BIT_EXT";
        case(VkDebugReportFlagBitsEXT::VK_DEBUG_REPORT_DEBUG_BIT_EXT): return "VK_DEBUG_REPORT_DEBUG_BIT_EXT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkDebugReportFlagsEXT flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkDebugReportFlagBitsEXT::VK_DEBUG_REPORT_INFORMATION_BIT_EXT) out += "VK_DEBUG_REPORT_INFORMATION_BIT_EXT | ";
    if (flag & VkDebugReportFlagBitsEXT::VK_DEBUG_REPORT_WARNING_BIT_EXT) out += "VK_DEBUG_REPORT_WARNING_BIT_EXT | ";
    if (flag & VkDebugReportFlagBitsEXT::VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT) out += "VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT | ";
    if (flag & VkDebugReportFlagBitsEXT::VK_DEBUG_REPORT_ERROR_BIT_EXT) out += "VK_DEBUG_REPORT_ERROR_BIT_EXT | ";
    if (flag & VkDebugReportFlagBitsEXT::VK_DEBUG_REPORT_DEBUG_BIT_EXT) out += "VK_DEBUG_REPORT_DEBUG_BIT_EXT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkExternalMemoryHandleTypeFlagBitsNV val) {
    switch(val) {
        case(VkExternalMemoryHandleTypeFlagBitsNV::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV): return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV";
        case(VkExternalMemoryHandleTypeFlagBitsNV::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV): return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV";
        case(VkExternalMemoryHandleTypeFlagBitsNV::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV): return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV";
        case(VkExternalMemoryHandleTypeFlagBitsNV::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV): return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkExternalMemoryHandleTypeFlagsNV flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkExternalMemoryHandleTypeFlagBitsNV::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV) out += "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV | ";
    if (flag & VkExternalMemoryHandleTypeFlagBitsNV::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV) out += "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV | ";
    if (flag & VkExternalMemoryHandleTypeFlagBitsNV::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV) out += "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV | ";
    if (flag & VkExternalMemoryHandleTypeFlagBitsNV::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV) out += "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkExternalMemoryFeatureFlagBitsNV val) {
    switch(val) {
        case(VkExternalMemoryFeatureFlagBitsNV::VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV): return "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV";
        case(VkExternalMemoryFeatureFlagBitsNV::VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV): return "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV";
        case(VkExternalMemoryFeatureFlagBitsNV::VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV): return "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkExternalMemoryFeatureFlagsNV flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkExternalMemoryFeatureFlagBitsNV::VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV) out += "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV | ";
    if (flag & VkExternalMemoryFeatureFlagBitsNV::VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV) out += "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV | ";
    if (flag & VkExternalMemoryFeatureFlagBitsNV::VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV) out += "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkSubgroupFeatureFlagBits val) {
    switch(val) {
        case(VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_BASIC_BIT): return "VK_SUBGROUP_FEATURE_BASIC_BIT";
        case(VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_VOTE_BIT): return "VK_SUBGROUP_FEATURE_VOTE_BIT";
        case(VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_ARITHMETIC_BIT): return "VK_SUBGROUP_FEATURE_ARITHMETIC_BIT";
        case(VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_BALLOT_BIT): return "VK_SUBGROUP_FEATURE_BALLOT_BIT";
        case(VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_SHUFFLE_BIT): return "VK_SUBGROUP_FEATURE_SHUFFLE_BIT";
        case(VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT): return "VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT";
        case(VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_CLUSTERED_BIT): return "VK_SUBGROUP_FEATURE_CLUSTERED_BIT";
        case(VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_QUAD_BIT): return "VK_SUBGROUP_FEATURE_QUAD_BIT";
        case(VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV): return "VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkSubgroupFeatureFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_BASIC_BIT) out += "VK_SUBGROUP_FEATURE_BASIC_BIT | ";
    if (flag & VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_VOTE_BIT) out += "VK_SUBGROUP_FEATURE_VOTE_BIT | ";
    if (flag & VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_ARITHMETIC_BIT) out += "VK_SUBGROUP_FEATURE_ARITHMETIC_BIT | ";
    if (flag & VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_BALLOT_BIT) out += "VK_SUBGROUP_FEATURE_BALLOT_BIT | ";
    if (flag & VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_SHUFFLE_BIT) out += "VK_SUBGROUP_FEATURE_SHUFFLE_BIT | ";
    if (flag & VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT) out += "VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT | ";
    if (flag & VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_CLUSTERED_BIT) out += "VK_SUBGROUP_FEATURE_CLUSTERED_BIT | ";
    if (flag & VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_QUAD_BIT) out += "VK_SUBGROUP_FEATURE_QUAD_BIT | ";
    if (flag & VkSubgroupFeatureFlagBits::VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV) out += "VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkIndirectCommandsLayoutUsageFlagBitsNV val) {
    switch(val) {
        case(VkIndirectCommandsLayoutUsageFlagBitsNV::VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV): return "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV";
        case(VkIndirectCommandsLayoutUsageFlagBitsNV::VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV): return "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV";
        case(VkIndirectCommandsLayoutUsageFlagBitsNV::VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV): return "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkIndirectCommandsLayoutUsageFlagsNV flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkIndirectCommandsLayoutUsageFlagBitsNV::VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV) out += "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV | ";
    if (flag & VkIndirectCommandsLayoutUsageFlagBitsNV::VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV) out += "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV | ";
    if (flag & VkIndirectCommandsLayoutUsageFlagBitsNV::VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV) out += "VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkIndirectStateFlagBitsNV val) {
    switch(val) {
        case(VkIndirectStateFlagBitsNV::VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV): return "VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkIndirectStateFlagsNV flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkIndirectStateFlagBitsNV::VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV) out += "VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkPrivateDataSlotCreateFlagBitsEXT val) {
    switch(val) {
        default: return "UNKNOWN";
    }
}
std::string to_string(VkPrivateDataSlotCreateFlagsEXT flag){
    if (flag.flags == 0) return "None";
    std::string out;
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkDescriptorSetLayoutCreateFlagBits val) {
    switch(val) {
        case(VkDescriptorSetLayoutCreateFlagBits::VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR): return "VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR";
        case(VkDescriptorSetLayoutCreateFlagBits::VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE): return "VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE";
        case(VkDescriptorSetLayoutCreateFlagBits::VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT): return "VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkDescriptorSetLayoutCreateFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkDescriptorSetLayoutCreateFlagBits::VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR) out += "VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR | ";
    if (flag & VkDescriptorSetLayoutCreateFlagBits::VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE) out += "VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE | ";
    if (flag & VkDescriptorSetLayoutCreateFlagBits::VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT) out += "VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkExternalMemoryHandleTypeFlagBits val) {
    switch(val) {
        case(VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT): return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT";
        case(VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT): return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT";
        case(VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT): return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT";
        case(VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT): return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT";
        case(VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT): return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT";
        case(VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT): return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT";
        case(VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT): return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT";
        case(VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT): return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT";
        case(VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID): return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID";
        case(VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT): return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT";
        case(VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT): return "VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkExternalMemoryHandleTypeFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT) out += "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT | ";
    if (flag & VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT) out += "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT | ";
    if (flag & VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT) out += "VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT | ";
    if (flag & VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT) out += "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT | ";
    if (flag & VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT) out += "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT | ";
    if (flag & VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT) out += "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT | ";
    if (flag & VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT) out += "VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT | ";
    if (flag & VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT) out += "VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT | ";
    if (flag & VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID) out += "VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID | ";
    if (flag & VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT) out += "VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT | ";
    if (flag & VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT) out += "VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkExternalMemoryFeatureFlagBits val) {
    switch(val) {
        case(VkExternalMemoryFeatureFlagBits::VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT): return "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT";
        case(VkExternalMemoryFeatureFlagBits::VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT): return "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT";
        case(VkExternalMemoryFeatureFlagBits::VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT): return "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkExternalMemoryFeatureFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkExternalMemoryFeatureFlagBits::VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT) out += "VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT | ";
    if (flag & VkExternalMemoryFeatureFlagBits::VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT) out += "VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT | ";
    if (flag & VkExternalMemoryFeatureFlagBits::VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT) out += "VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkExternalSemaphoreHandleTypeFlagBits val) {
    switch(val) {
        case(VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT): return "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT";
        case(VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT): return "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT";
        case(VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT): return "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT";
        case(VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT): return "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT";
        case(VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT): return "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkExternalSemaphoreHandleTypeFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT) out += "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT | ";
    if (flag & VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT) out += "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT | ";
    if (flag & VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT) out += "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT | ";
    if (flag & VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT) out += "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT | ";
    if (flag & VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT) out += "VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkExternalSemaphoreFeatureFlagBits val) {
    switch(val) {
        case(VkExternalSemaphoreFeatureFlagBits::VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT): return "VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT";
        case(VkExternalSemaphoreFeatureFlagBits::VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT): return "VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkExternalSemaphoreFeatureFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkExternalSemaphoreFeatureFlagBits::VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT) out += "VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT | ";
    if (flag & VkExternalSemaphoreFeatureFlagBits::VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT) out += "VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkSemaphoreImportFlagBits val) {
    switch(val) {
        case(VkSemaphoreImportFlagBits::VK_SEMAPHORE_IMPORT_TEMPORARY_BIT): return "VK_SEMAPHORE_IMPORT_TEMPORARY_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkSemaphoreImportFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkSemaphoreImportFlagBits::VK_SEMAPHORE_IMPORT_TEMPORARY_BIT) out += "VK_SEMAPHORE_IMPORT_TEMPORARY_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkExternalFenceHandleTypeFlagBits val) {
    switch(val) {
        case(VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT): return "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT";
        case(VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT): return "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT";
        case(VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT): return "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT";
        case(VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT): return "VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkExternalFenceHandleTypeFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT) out += "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT | ";
    if (flag & VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT) out += "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT | ";
    if (flag & VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT) out += "VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT | ";
    if (flag & VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT) out += "VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkExternalFenceFeatureFlagBits val) {
    switch(val) {
        case(VkExternalFenceFeatureFlagBits::VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT): return "VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT";
        case(VkExternalFenceFeatureFlagBits::VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT): return "VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkExternalFenceFeatureFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkExternalFenceFeatureFlagBits::VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT) out += "VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT | ";
    if (flag & VkExternalFenceFeatureFlagBits::VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT) out += "VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkFenceImportFlagBits val) {
    switch(val) {
        case(VkFenceImportFlagBits::VK_FENCE_IMPORT_TEMPORARY_BIT): return "VK_FENCE_IMPORT_TEMPORARY_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkFenceImportFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkFenceImportFlagBits::VK_FENCE_IMPORT_TEMPORARY_BIT) out += "VK_FENCE_IMPORT_TEMPORARY_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkSurfaceCounterFlagBitsEXT val) {
    switch(val) {
        case(VkSurfaceCounterFlagBitsEXT::VK_SURFACE_COUNTER_VBLANK_BIT_EXT): return "VK_SURFACE_COUNTER_VBLANK_BIT_EXT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkSurfaceCounterFlagsEXT flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkSurfaceCounterFlagBitsEXT::VK_SURFACE_COUNTER_VBLANK_BIT_EXT) out += "VK_SURFACE_COUNTER_VBLANK_BIT_EXT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkPeerMemoryFeatureFlagBits val) {
    switch(val) {
        case(VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT): return "VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT";
        case(VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_COPY_DST_BIT): return "VK_PEER_MEMORY_FEATURE_COPY_DST_BIT";
        case(VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT): return "VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT";
        case(VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT): return "VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkPeerMemoryFeatureFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT) out += "VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT | ";
    if (flag & VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_COPY_DST_BIT) out += "VK_PEER_MEMORY_FEATURE_COPY_DST_BIT | ";
    if (flag & VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT) out += "VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT | ";
    if (flag & VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT) out += "VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkMemoryAllocateFlagBits val) {
    switch(val) {
        case(VkMemoryAllocateFlagBits::VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT): return "VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT";
        case(VkMemoryAllocateFlagBits::VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT): return "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT";
        case(VkMemoryAllocateFlagBits::VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT): return "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkMemoryAllocateFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkMemoryAllocateFlagBits::VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT) out += "VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT | ";
    if (flag & VkMemoryAllocateFlagBits::VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT) out += "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT | ";
    if (flag & VkMemoryAllocateFlagBits::VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT) out += "VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkDeviceGroupPresentModeFlagBitsKHR val) {
    switch(val) {
        case(VkDeviceGroupPresentModeFlagBitsKHR::VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR): return "VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR";
        case(VkDeviceGroupPresentModeFlagBitsKHR::VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR): return "VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR";
        case(VkDeviceGroupPresentModeFlagBitsKHR::VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR): return "VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR";
        case(VkDeviceGroupPresentModeFlagBitsKHR::VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR): return "VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkDeviceGroupPresentModeFlagsKHR flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkDeviceGroupPresentModeFlagBitsKHR::VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR) out += "VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR | ";
    if (flag & VkDeviceGroupPresentModeFlagBitsKHR::VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR) out += "VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR | ";
    if (flag & VkDeviceGroupPresentModeFlagBitsKHR::VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR) out += "VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR | ";
    if (flag & VkDeviceGroupPresentModeFlagBitsKHR::VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR) out += "VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkSwapchainCreateFlagBitsKHR val) {
    switch(val) {
        case(VkSwapchainCreateFlagBitsKHR::VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR): return "VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR";
        case(VkSwapchainCreateFlagBitsKHR::VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR): return "VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR";
        case(VkSwapchainCreateFlagBitsKHR::VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR): return "VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkSwapchainCreateFlagsKHR flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkSwapchainCreateFlagBitsKHR::VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR) out += "VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR | ";
    if (flag & VkSwapchainCreateFlagBitsKHR::VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR) out += "VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR | ";
    if (flag & VkSwapchainCreateFlagBitsKHR::VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR) out += "VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkSubpassDescriptionFlagBits val) {
    switch(val) {
        case(VkSubpassDescriptionFlagBits::VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX): return "VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX";
        case(VkSubpassDescriptionFlagBits::VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX): return "VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX";
        case(VkSubpassDescriptionFlagBits::VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM): return "VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM";
        case(VkSubpassDescriptionFlagBits::VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM): return "VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkSubpassDescriptionFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkSubpassDescriptionFlagBits::VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX) out += "VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX | ";
    if (flag & VkSubpassDescriptionFlagBits::VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX) out += "VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX | ";
    if (flag & VkSubpassDescriptionFlagBits::VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM) out += "VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM | ";
    if (flag & VkSubpassDescriptionFlagBits::VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM) out += "VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkDebugUtilsMessageSeverityFlagBitsEXT val) {
    switch(val) {
        case(VkDebugUtilsMessageSeverityFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT): return "VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT";
        case(VkDebugUtilsMessageSeverityFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT): return "VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT";
        case(VkDebugUtilsMessageSeverityFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT): return "VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT";
        case(VkDebugUtilsMessageSeverityFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT): return "VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkDebugUtilsMessageSeverityFlagsEXT flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkDebugUtilsMessageSeverityFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT) out += "VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT | ";
    if (flag & VkDebugUtilsMessageSeverityFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT) out += "VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT | ";
    if (flag & VkDebugUtilsMessageSeverityFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT) out += "VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT | ";
    if (flag & VkDebugUtilsMessageSeverityFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT) out += "VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkDebugUtilsMessageTypeFlagBitsEXT val) {
    switch(val) {
        case(VkDebugUtilsMessageTypeFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT): return "VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT";
        case(VkDebugUtilsMessageTypeFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT): return "VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT";
        case(VkDebugUtilsMessageTypeFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT): return "VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkDebugUtilsMessageTypeFlagsEXT flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkDebugUtilsMessageTypeFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT) out += "VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT | ";
    if (flag & VkDebugUtilsMessageTypeFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT) out += "VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT | ";
    if (flag & VkDebugUtilsMessageTypeFlagBitsEXT::VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT) out += "VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkDescriptorBindingFlagBits val) {
    switch(val) {
        case(VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT): return "VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT";
        case(VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT): return "VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT";
        case(VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT): return "VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT";
        case(VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT): return "VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkDescriptorBindingFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT) out += "VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT | ";
    if (flag & VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT) out += "VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT | ";
    if (flag & VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT) out += "VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT | ";
    if (flag & VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT) out += "VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkConditionalRenderingFlagBitsEXT val) {
    switch(val) {
        case(VkConditionalRenderingFlagBitsEXT::VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT): return "VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkConditionalRenderingFlagsEXT flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkConditionalRenderingFlagBitsEXT::VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT) out += "VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkResolveModeFlagBits val) {
    switch(val) {
        case(VkResolveModeFlagBits::VK_RESOLVE_MODE_NONE): return "VK_RESOLVE_MODE_NONE";
        case(VkResolveModeFlagBits::VK_RESOLVE_MODE_SAMPLE_ZERO_BIT): return "VK_RESOLVE_MODE_SAMPLE_ZERO_BIT";
        case(VkResolveModeFlagBits::VK_RESOLVE_MODE_AVERAGE_BIT): return "VK_RESOLVE_MODE_AVERAGE_BIT";
        case(VkResolveModeFlagBits::VK_RESOLVE_MODE_MIN_BIT): return "VK_RESOLVE_MODE_MIN_BIT";
        case(VkResolveModeFlagBits::VK_RESOLVE_MODE_MAX_BIT): return "VK_RESOLVE_MODE_MAX_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkResolveModeFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkResolveModeFlagBits::VK_RESOLVE_MODE_NONE) out += "VK_RESOLVE_MODE_NONE | ";
    if (flag & VkResolveModeFlagBits::VK_RESOLVE_MODE_SAMPLE_ZERO_BIT) out += "VK_RESOLVE_MODE_SAMPLE_ZERO_BIT | ";
    if (flag & VkResolveModeFlagBits::VK_RESOLVE_MODE_AVERAGE_BIT) out += "VK_RESOLVE_MODE_AVERAGE_BIT | ";
    if (flag & VkResolveModeFlagBits::VK_RESOLVE_MODE_MIN_BIT) out += "VK_RESOLVE_MODE_MIN_BIT | ";
    if (flag & VkResolveModeFlagBits::VK_RESOLVE_MODE_MAX_BIT) out += "VK_RESOLVE_MODE_MAX_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkGeometryInstanceFlagBitsKHR val) {
    switch(val) {
        case(VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR): return "VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR";
        case(VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR): return "VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR";
        case(VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR): return "VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR";
        case(VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR): return "VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkGeometryInstanceFlagsKHR flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR) out += "VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR | ";
    if (flag & VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR) out += "VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR | ";
    if (flag & VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR) out += "VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR | ";
    if (flag & VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR) out += "VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkGeometryFlagBitsKHR val) {
    switch(val) {
        case(VkGeometryFlagBitsKHR::VK_GEOMETRY_OPAQUE_BIT_KHR): return "VK_GEOMETRY_OPAQUE_BIT_KHR";
        case(VkGeometryFlagBitsKHR::VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR): return "VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkGeometryFlagsKHR flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkGeometryFlagBitsKHR::VK_GEOMETRY_OPAQUE_BIT_KHR) out += "VK_GEOMETRY_OPAQUE_BIT_KHR | ";
    if (flag & VkGeometryFlagBitsKHR::VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR) out += "VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkBuildAccelerationStructureFlagBitsKHR val) {
    switch(val) {
        case(VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR): return "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR";
        case(VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR): return "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR";
        case(VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR): return "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR";
        case(VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR): return "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR";
        case(VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR): return "VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkBuildAccelerationStructureFlagsKHR flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR) out += "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR | ";
    if (flag & VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR) out += "VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR | ";
    if (flag & VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR) out += "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR | ";
    if (flag & VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR) out += "VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR | ";
    if (flag & VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR) out += "VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkAccelerationStructureCreateFlagBitsKHR val) {
    switch(val) {
        case(VkAccelerationStructureCreateFlagBitsKHR::VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR): return "VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkAccelerationStructureCreateFlagsKHR flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkAccelerationStructureCreateFlagBitsKHR::VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR) out += "VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkFramebufferCreateFlagBits val) {
    switch(val) {
        case(VkFramebufferCreateFlagBits::VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT): return "VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkFramebufferCreateFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkFramebufferCreateFlagBits::VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT) out += "VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkDeviceDiagnosticsConfigFlagBitsNV val) {
    switch(val) {
        case(VkDeviceDiagnosticsConfigFlagBitsNV::VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV): return "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV";
        case(VkDeviceDiagnosticsConfigFlagBitsNV::VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV): return "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV";
        case(VkDeviceDiagnosticsConfigFlagBitsNV::VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV): return "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkDeviceDiagnosticsConfigFlagsNV flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkDeviceDiagnosticsConfigFlagBitsNV::VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV) out += "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV | ";
    if (flag & VkDeviceDiagnosticsConfigFlagBitsNV::VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV) out += "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV | ";
    if (flag & VkDeviceDiagnosticsConfigFlagBitsNV::VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV) out += "VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkPipelineCreationFeedbackFlagBitsEXT val) {
    switch(val) {
        case(VkPipelineCreationFeedbackFlagBitsEXT::VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT): return "VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT";
        case(VkPipelineCreationFeedbackFlagBitsEXT::VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT): return "VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT";
        case(VkPipelineCreationFeedbackFlagBitsEXT::VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT): return "VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkPipelineCreationFeedbackFlagsEXT flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkPipelineCreationFeedbackFlagBitsEXT::VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT) out += "VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT | ";
    if (flag & VkPipelineCreationFeedbackFlagBitsEXT::VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT) out += "VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT | ";
    if (flag & VkPipelineCreationFeedbackFlagBitsEXT::VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT) out += "VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkPerformanceCounterDescriptionFlagBitsKHR val) {
    switch(val) {
        case(VkPerformanceCounterDescriptionFlagBitsKHR::VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR): return "VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR";
        case(VkPerformanceCounterDescriptionFlagBitsKHR::VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR): return "VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkPerformanceCounterDescriptionFlagsKHR flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkPerformanceCounterDescriptionFlagBitsKHR::VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR) out += "VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR | ";
    if (flag & VkPerformanceCounterDescriptionFlagBitsKHR::VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR) out += "VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR | ";
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkAcquireProfilingLockFlagBitsKHR val) {
    switch(val) {
        default: return "UNKNOWN";
    }
}
std::string to_string(VkAcquireProfilingLockFlagsKHR flag){
    if (flag.flags == 0) return "None";
    std::string out;
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkShaderCorePropertiesFlagBitsAMD val) {
    switch(val) {
        default: return "UNKNOWN";
    }
}
std::string to_string(VkShaderCorePropertiesFlagsAMD flag){
    if (flag.flags == 0) return "None";
    std::string out;
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkShaderModuleCreateFlagBits val) {
    switch(val) {
        default: return "UNKNOWN";
    }
}
std::string to_string(VkShaderModuleCreateFlags flag){
    if (flag.flags == 0) return "None";
    std::string out;
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkPipelineCompilerControlFlagBitsAMD val) {
    switch(val) {
        default: return "UNKNOWN";
    }
}
std::string to_string(VkPipelineCompilerControlFlagsAMD flag){
    if (flag.flags == 0) return "None";
    std::string out;
    return out.substr(0, out.size() - 3);
}
const char * to_string(VkToolPurposeFlagBitsEXT val) {
    switch(val) {
        case(VkToolPurposeFlagBitsEXT::VK_TOOL_PURPOSE_VALIDATION_BIT_EXT): return "VK_TOOL_PURPOSE_VALIDATION_BIT_EXT";
        case(VkToolPurposeFlagBitsEXT::VK_TOOL_PURPOSE_PROFILING_BIT_EXT): return "VK_TOOL_PURPOSE_PROFILING_BIT_EXT";
        case(VkToolPurposeFlagBitsEXT::VK_TOOL_PURPOSE_TRACING_BIT_EXT): return "VK_TOOL_PURPOSE_TRACING_BIT_EXT";
        case(VkToolPurposeFlagBitsEXT::VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT): return "VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT";
        case(VkToolPurposeFlagBitsEXT::VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT): return "VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT";
        case(VkToolPurposeFlagBitsEXT::VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT): return "VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT";
        case(VkToolPurposeFlagBitsEXT::VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT): return "VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT";
        default: return "UNKNOWN";
    }
}
std::string to_string(VkToolPurposeFlagsEXT flag){
    if (flag.flags == 0) return "None";
    std::string out;
    if (flag & VkToolPurposeFlagBitsEXT::VK_TOOL_PURPOSE_VALIDATION_BIT_EXT) out += "VK_TOOL_PURPOSE_VALIDATION_BIT_EXT | ";
    if (flag & VkToolPurposeFlagBitsEXT::VK_TOOL_PURPOSE_PROFILING_BIT_EXT) out += "VK_TOOL_PURPOSE_PROFILING_BIT_EXT | ";
    if (flag & VkToolPurposeFlagBitsEXT::VK_TOOL_PURPOSE_TRACING_BIT_EXT) out += "VK_TOOL_PURPOSE_TRACING_BIT_EXT | ";
    if (flag & VkToolPurposeFlagBitsEXT::VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT) out += "VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT | ";
    if (flag & VkToolPurposeFlagBitsEXT::VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT) out += "VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT | ";
    if (flag & VkToolPurposeFlagBitsEXT::VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT) out += "VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT | ";
    if (flag & VkToolPurposeFlagBitsEXT::VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT) out += "VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT | ";
    return out.substr(0, out.size() - 3);
}
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
#endif // defined(VK_USE_PLATFORM_ANDROID_KHR)
#if defined(VK_USE_PLATFORM_VI_NN)
#endif // defined(VK_USE_PLATFORM_VI_NN)
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
#endif // defined(VK_USE_PLATFORM_WAYLAND_KHR)
#if defined(VK_USE_PLATFORM_WIN32_KHR)
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
#if defined(VK_USE_PLATFORM_XLIB_KHR)
#endif // defined(VK_USE_PLATFORM_XLIB_KHR)
#if defined(VK_USE_PLATFORM_XCB_KHR)
#endif // defined(VK_USE_PLATFORM_XCB_KHR)
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
#endif // defined(VK_USE_PLATFORM_DIRECTFB_EXT)
#if defined(VK_USE_PLATFORM_IOS_MVK)
#endif // defined(VK_USE_PLATFORM_IOS_MVK)
#if defined(VK_USE_PLATFORM_MACOS_MVK)
#endif // defined(VK_USE_PLATFORM_MACOS_MVK)
#if defined(VK_USE_PLATFORM_METAL_EXT)
#endif // defined(VK_USE_PLATFORM_METAL_EXT)
#if defined(VK_USE_PLATFORM_FUCHSIA)
#endif // defined(VK_USE_PLATFORM_FUCHSIA)
#if defined(VK_USE_PLATFORM_GGP)
#endif // defined(VK_USE_PLATFORM_GGP)

// clang-format on
