/*
 * Copyright 2021 Charles Giessen (cdgiessen@gmail.com)
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files
 * (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
// clang-format off
#pragma once
#include <stdint.h>
#include "vk_platform.h"

#if defined(VK_USE_PLATFORM_FUCHSIA)
#include <zircon/types.h>
#endif

#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
#include <wayland-client.h>
#endif

#if defined(VK_USE_PLATFORM_XCB_KHR)
#include <xcb/xcb.h>
#endif

#if defined(VK_USE_PLATFORM_XLIB_KHR)
#include <X11/Xlib.h>
#endif

#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
#include <directfb.h>
#endif

#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
#include <X11/Xlib.h>
#include <X11/extensions/Xrandr.h>
#endif

#if defined(VK_USE_PLATFORM_GGP)
#include <ggp_c/vulkan_types.h>
#endif
#define VK_MAKE_VERSION(major, minor, patch) \
    ((((uint32_t)(major)) << 22) | (((uint32_t)(minor)) << 12) | ((uint32_t)(patch)))

#define VK_VERSION_MAJOR(version) ((uint32_t)(version) >> 22)

#define VK_VERSION_MINOR(version) (((uint32_t)(version) >> 12) & 0x3ff)

#define VK_VERSION_PATCH(version) ((uint32_t)(version) & 0xfff)

// DEPRECATED: This define has been removed. Specific version defines (e.g. VK_API_VERSION_1_0), or the VK_MAKE_VERSION macro, should be used instead.
//#define VK_API_VERSION VK_MAKE_VERSION(1, 0, 0) // Patch version should always be set to 0

// Vulkan 1.0 version number
#define VK_API_VERSION_1_0 VK_MAKE_VERSION(1, 0, 0)// Patch version should always be set to 0

// Vulkan 1.1 version number
#define VK_API_VERSION_1_1 VK_MAKE_VERSION(1, 1, 0)// Patch version should always be set to 0

// Vulkan 1.2 version number
#define VK_API_VERSION_1_2 VK_MAKE_VERSION(1, 2, 0)// Patch version should always be set to 0

// Version of this file
#define VK_HEADER_VERSION 169

// Complete version of this file
#define VK_HEADER_VERSION_COMPLETE VK_MAKE_VERSION(1, 2, VK_HEADER_VERSION)


#define VK_DEFINE_HANDLE(object) typedef struct object##_T* object;


#if !defined(VK_DEFINE_NON_DISPATCHABLE_HANDLE)
#if defined(__LP64__) || defined(_WIN64) || (defined(__x86_64__) && !defined(__ILP32__) ) || defined(_M_X64) || defined(__ia64) || defined (_M_IA64) || defined(__aarch64__) || defined(__powerpc64__)
        #define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef struct object##_T *object;
#else
        #define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef uint64_t object;
#endif
#endif


#define VK_NULL_HANDLE 0

constexpr auto VK_MAX_PHYSICAL_DEVICE_NAME_SIZE = 256;
constexpr auto VK_UUID_SIZE = 16;
constexpr auto VK_LUID_SIZE = 8;
constexpr auto VK_LUID_SIZE_KHR = VK_LUID_SIZE;
constexpr auto VK_MAX_EXTENSION_NAME_SIZE = 256;
constexpr auto VK_MAX_DESCRIPTION_SIZE = 256;
constexpr auto VK_MAX_MEMORY_TYPES = 32;
constexpr auto VK_MAX_MEMORY_HEAPS = 16;
constexpr auto VK_LOD_CLAMP_NONE = 1000.0f;
constexpr auto VK_REMAINING_MIP_LEVELS = (~0U);
constexpr auto VK_REMAINING_ARRAY_LAYERS = (~0U);
constexpr auto VK_WHOLE_SIZE = (~0ULL);
constexpr auto VK_ATTACHMENT_UNUSED = (~0U);
constexpr auto VK_QUEUE_FAMILY_IGNORED = (~0U);
constexpr auto VK_QUEUE_FAMILY_EXTERNAL = (~0U-1);
constexpr auto VK_QUEUE_FAMILY_EXTERNAL_KHR = VK_QUEUE_FAMILY_EXTERNAL;
constexpr auto VK_QUEUE_FAMILY_FOREIGN_EXT = (~0U-2);
constexpr auto VK_SUBPASS_EXTERNAL = (~0U);
constexpr auto VK_MAX_DEVICE_GROUP_SIZE = 32;
constexpr auto VK_MAX_DEVICE_GROUP_SIZE_KHR = VK_MAX_DEVICE_GROUP_SIZE;
constexpr auto VK_MAX_DRIVER_NAME_SIZE = 256;
constexpr auto VK_MAX_DRIVER_NAME_SIZE_KHR = VK_MAX_DRIVER_NAME_SIZE;
constexpr auto VK_MAX_DRIVER_INFO_SIZE = 256;
constexpr auto VK_MAX_DRIVER_INFO_SIZE_KHR = VK_MAX_DRIVER_INFO_SIZE;
constexpr auto VK_SHADER_UNUSED_KHR = (~0U);
constexpr auto VK_SHADER_UNUSED_NV = VK_SHADER_UNUSED_KHR;
using VkSampleMask = uint32_t;
using VkBool32 = uint32_t;
using VkFlags = uint32_t;
using VkDeviceSize = uint64_t;
using VkDeviceAddress = uint64_t;
enum class VkAttachmentLoadOp : uint32_t {
    VK_ATTACHMENT_LOAD_OP_LOAD = 0,
    VK_ATTACHMENT_LOAD_OP_CLEAR = 1,
    VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2,
};
enum class VkAttachmentStoreOp : uint32_t {
    VK_ATTACHMENT_STORE_OP_STORE = 0,
    VK_ATTACHMENT_STORE_OP_DONT_CARE = 1,
    VK_ATTACHMENT_STORE_OP_NONE_QCOM = 1000301000,
};
enum class VkBlendFactor : uint32_t {
    VK_BLEND_FACTOR_ZERO = 0,
    VK_BLEND_FACTOR_ONE = 1,
    VK_BLEND_FACTOR_SRC_COLOR = 2,
    VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,
    VK_BLEND_FACTOR_DST_COLOR = 4,
    VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,
    VK_BLEND_FACTOR_SRC_ALPHA = 6,
    VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,
    VK_BLEND_FACTOR_DST_ALPHA = 8,
    VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,
    VK_BLEND_FACTOR_CONSTANT_COLOR = 10,
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
    VK_BLEND_FACTOR_CONSTANT_ALPHA = 12,
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
    VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,
    VK_BLEND_FACTOR_SRC1_COLOR = 15,
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,
    VK_BLEND_FACTOR_SRC1_ALPHA = 17,
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18,
};
enum class VkBlendOp : uint32_t {
    VK_BLEND_OP_ADD = 0,
    VK_BLEND_OP_SUBTRACT = 1,
    VK_BLEND_OP_REVERSE_SUBTRACT = 2,
    VK_BLEND_OP_MIN = 3,
    VK_BLEND_OP_MAX = 4,
    VK_BLEND_OP_ZERO_EXT = 1000148000,
    VK_BLEND_OP_SRC_EXT = 1000148001,
    VK_BLEND_OP_DST_EXT = 1000148002,
    VK_BLEND_OP_SRC_OVER_EXT = 1000148003,
    VK_BLEND_OP_DST_OVER_EXT = 1000148004,
    VK_BLEND_OP_SRC_IN_EXT = 1000148005,
    VK_BLEND_OP_DST_IN_EXT = 1000148006,
    VK_BLEND_OP_SRC_OUT_EXT = 1000148007,
    VK_BLEND_OP_DST_OUT_EXT = 1000148008,
    VK_BLEND_OP_SRC_ATOP_EXT = 1000148009,
    VK_BLEND_OP_DST_ATOP_EXT = 1000148010,
    VK_BLEND_OP_XOR_EXT = 1000148011,
    VK_BLEND_OP_MULTIPLY_EXT = 1000148012,
    VK_BLEND_OP_SCREEN_EXT = 1000148013,
    VK_BLEND_OP_OVERLAY_EXT = 1000148014,
    VK_BLEND_OP_DARKEN_EXT = 1000148015,
    VK_BLEND_OP_LIGHTEN_EXT = 1000148016,
    VK_BLEND_OP_COLORDODGE_EXT = 1000148017,
    VK_BLEND_OP_COLORBURN_EXT = 1000148018,
    VK_BLEND_OP_HARDLIGHT_EXT = 1000148019,
    VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020,
    VK_BLEND_OP_DIFFERENCE_EXT = 1000148021,
    VK_BLEND_OP_EXCLUSION_EXT = 1000148022,
    VK_BLEND_OP_INVERT_EXT = 1000148023,
    VK_BLEND_OP_INVERT_RGB_EXT = 1000148024,
    VK_BLEND_OP_LINEARDODGE_EXT = 1000148025,
    VK_BLEND_OP_LINEARBURN_EXT = 1000148026,
    VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027,
    VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028,
    VK_BLEND_OP_PINLIGHT_EXT = 1000148029,
    VK_BLEND_OP_HARDMIX_EXT = 1000148030,
    VK_BLEND_OP_HSL_HUE_EXT = 1000148031,
    VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032,
    VK_BLEND_OP_HSL_COLOR_EXT = 1000148033,
    VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034,
    VK_BLEND_OP_PLUS_EXT = 1000148035,
    VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036,
    VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037,
    VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038,
    VK_BLEND_OP_MINUS_EXT = 1000148039,
    VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040,
    VK_BLEND_OP_CONTRAST_EXT = 1000148041,
    VK_BLEND_OP_INVERT_OVG_EXT = 1000148042,
    VK_BLEND_OP_RED_EXT = 1000148043,
    VK_BLEND_OP_GREEN_EXT = 1000148044,
    VK_BLEND_OP_BLUE_EXT = 1000148045,
};
enum class VkBorderColor : uint32_t {
    VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
    VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,
    VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,
    VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3,
    VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,
    VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5,
    VK_BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003,
    VK_BORDER_COLOR_INT_CUSTOM_EXT = 1000287004,
};
enum class VkPipelineCacheHeaderVersion : uint32_t {
    VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1,
};
enum class VkComponentSwizzle : uint32_t {
    VK_COMPONENT_SWIZZLE_IDENTITY = 0,
    VK_COMPONENT_SWIZZLE_ZERO = 1,
    VK_COMPONENT_SWIZZLE_ONE = 2,
    VK_COMPONENT_SWIZZLE_R = 3,
    VK_COMPONENT_SWIZZLE_G = 4,
    VK_COMPONENT_SWIZZLE_B = 5,
    VK_COMPONENT_SWIZZLE_A = 6,
};
enum class VkCommandBufferLevel : uint32_t {
    VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0,
    VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1,
};
enum class VkCompareOp : uint32_t {
    VK_COMPARE_OP_NEVER = 0,
    VK_COMPARE_OP_LESS = 1,
    VK_COMPARE_OP_EQUAL = 2,
    VK_COMPARE_OP_LESS_OR_EQUAL = 3,
    VK_COMPARE_OP_GREATER = 4,
    VK_COMPARE_OP_NOT_EQUAL = 5,
    VK_COMPARE_OP_GREATER_OR_EQUAL = 6,
    VK_COMPARE_OP_ALWAYS = 7,
};
enum class VkDescriptorType : uint32_t {
    VK_DESCRIPTOR_TYPE_SAMPLER = 0,
    VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
    VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
    VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
    VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
    VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
    VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,
    VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = 1000138000,
    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000,
    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
    VK_DESCRIPTOR_TYPE_MUTABLE_VALVE = 1000351000,
};
enum class VkDynamicState : uint32_t {
    VK_DYNAMIC_STATE_VIEWPORT = 0,
    VK_DYNAMIC_STATE_SCISSOR = 1,
    VK_DYNAMIC_STATE_LINE_WIDTH = 2,
    VK_DYNAMIC_STATE_DEPTH_BIAS = 3,
    VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4,
    VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5,
    VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,
    VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,
    VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8,
    VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000,
    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000,
    VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000,
    VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR = 1000347000,
    VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004,
    VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006,
    VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001,
    VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR = 1000226000,
    VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000,
    VK_DYNAMIC_STATE_CULL_MODE_EXT = 1000267000,
    VK_DYNAMIC_STATE_FRONT_FACE_EXT = 1000267001,
    VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = 1000267002,
    VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = 1000267003,
    VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = 1000267004,
    VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT = 1000267005,
    VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = 1000267006,
    VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = 1000267007,
    VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = 1000267008,
    VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = 1000267009,
    VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = 1000267010,
    VK_DYNAMIC_STATE_STENCIL_OP_EXT = 1000267011,
};
enum class VkPolygonMode : uint32_t {
    VK_POLYGON_MODE_FILL = 0,
    VK_POLYGON_MODE_LINE = 1,
    VK_POLYGON_MODE_POINT = 2,
    VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000,
};
enum class VkFormat : uint32_t {
    VK_FORMAT_UNDEFINED = 0,
    VK_FORMAT_R4G4_UNORM_PACK8 = 1,
    VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2,
    VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3,
    VK_FORMAT_R5G6B5_UNORM_PACK16 = 4,
    VK_FORMAT_B5G6R5_UNORM_PACK16 = 5,
    VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6,
    VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7,
    VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8,
    VK_FORMAT_R8_UNORM = 9,
    VK_FORMAT_R8_SNORM = 10,
    VK_FORMAT_R8_USCALED = 11,
    VK_FORMAT_R8_SSCALED = 12,
    VK_FORMAT_R8_UINT = 13,
    VK_FORMAT_R8_SINT = 14,
    VK_FORMAT_R8_SRGB = 15,
    VK_FORMAT_R8G8_UNORM = 16,
    VK_FORMAT_R8G8_SNORM = 17,
    VK_FORMAT_R8G8_USCALED = 18,
    VK_FORMAT_R8G8_SSCALED = 19,
    VK_FORMAT_R8G8_UINT = 20,
    VK_FORMAT_R8G8_SINT = 21,
    VK_FORMAT_R8G8_SRGB = 22,
    VK_FORMAT_R8G8B8_UNORM = 23,
    VK_FORMAT_R8G8B8_SNORM = 24,
    VK_FORMAT_R8G8B8_USCALED = 25,
    VK_FORMAT_R8G8B8_SSCALED = 26,
    VK_FORMAT_R8G8B8_UINT = 27,
    VK_FORMAT_R8G8B8_SINT = 28,
    VK_FORMAT_R8G8B8_SRGB = 29,
    VK_FORMAT_B8G8R8_UNORM = 30,
    VK_FORMAT_B8G8R8_SNORM = 31,
    VK_FORMAT_B8G8R8_USCALED = 32,
    VK_FORMAT_B8G8R8_SSCALED = 33,
    VK_FORMAT_B8G8R8_UINT = 34,
    VK_FORMAT_B8G8R8_SINT = 35,
    VK_FORMAT_B8G8R8_SRGB = 36,
    VK_FORMAT_R8G8B8A8_UNORM = 37,
    VK_FORMAT_R8G8B8A8_SNORM = 38,
    VK_FORMAT_R8G8B8A8_USCALED = 39,
    VK_FORMAT_R8G8B8A8_SSCALED = 40,
    VK_FORMAT_R8G8B8A8_UINT = 41,
    VK_FORMAT_R8G8B8A8_SINT = 42,
    VK_FORMAT_R8G8B8A8_SRGB = 43,
    VK_FORMAT_B8G8R8A8_UNORM = 44,
    VK_FORMAT_B8G8R8A8_SNORM = 45,
    VK_FORMAT_B8G8R8A8_USCALED = 46,
    VK_FORMAT_B8G8R8A8_SSCALED = 47,
    VK_FORMAT_B8G8R8A8_UINT = 48,
    VK_FORMAT_B8G8R8A8_SINT = 49,
    VK_FORMAT_B8G8R8A8_SRGB = 50,
    VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
    VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
    VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
    VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
    VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
    VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
    VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
    VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
    VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
    VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
    VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
    VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
    VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
    VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
    VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
    VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
    VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
    VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
    VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
    VK_FORMAT_R16_UNORM = 70,
    VK_FORMAT_R16_SNORM = 71,
    VK_FORMAT_R16_USCALED = 72,
    VK_FORMAT_R16_SSCALED = 73,
    VK_FORMAT_R16_UINT = 74,
    VK_FORMAT_R16_SINT = 75,
    VK_FORMAT_R16_SFLOAT = 76,
    VK_FORMAT_R16G16_UNORM = 77,
    VK_FORMAT_R16G16_SNORM = 78,
    VK_FORMAT_R16G16_USCALED = 79,
    VK_FORMAT_R16G16_SSCALED = 80,
    VK_FORMAT_R16G16_UINT = 81,
    VK_FORMAT_R16G16_SINT = 82,
    VK_FORMAT_R16G16_SFLOAT = 83,
    VK_FORMAT_R16G16B16_UNORM = 84,
    VK_FORMAT_R16G16B16_SNORM = 85,
    VK_FORMAT_R16G16B16_USCALED = 86,
    VK_FORMAT_R16G16B16_SSCALED = 87,
    VK_FORMAT_R16G16B16_UINT = 88,
    VK_FORMAT_R16G16B16_SINT = 89,
    VK_FORMAT_R16G16B16_SFLOAT = 90,
    VK_FORMAT_R16G16B16A16_UNORM = 91,
    VK_FORMAT_R16G16B16A16_SNORM = 92,
    VK_FORMAT_R16G16B16A16_USCALED = 93,
    VK_FORMAT_R16G16B16A16_SSCALED = 94,
    VK_FORMAT_R16G16B16A16_UINT = 95,
    VK_FORMAT_R16G16B16A16_SINT = 96,
    VK_FORMAT_R16G16B16A16_SFLOAT = 97,
    VK_FORMAT_R32_UINT = 98,
    VK_FORMAT_R32_SINT = 99,
    VK_FORMAT_R32_SFLOAT = 100,
    VK_FORMAT_R32G32_UINT = 101,
    VK_FORMAT_R32G32_SINT = 102,
    VK_FORMAT_R32G32_SFLOAT = 103,
    VK_FORMAT_R32G32B32_UINT = 104,
    VK_FORMAT_R32G32B32_SINT = 105,
    VK_FORMAT_R32G32B32_SFLOAT = 106,
    VK_FORMAT_R32G32B32A32_UINT = 107,
    VK_FORMAT_R32G32B32A32_SINT = 108,
    VK_FORMAT_R32G32B32A32_SFLOAT = 109,
    VK_FORMAT_R64_UINT = 110,
    VK_FORMAT_R64_SINT = 111,
    VK_FORMAT_R64_SFLOAT = 112,
    VK_FORMAT_R64G64_UINT = 113,
    VK_FORMAT_R64G64_SINT = 114,
    VK_FORMAT_R64G64_SFLOAT = 115,
    VK_FORMAT_R64G64B64_UINT = 116,
    VK_FORMAT_R64G64B64_SINT = 117,
    VK_FORMAT_R64G64B64_SFLOAT = 118,
    VK_FORMAT_R64G64B64A64_UINT = 119,
    VK_FORMAT_R64G64B64A64_SINT = 120,
    VK_FORMAT_R64G64B64A64_SFLOAT = 121,
    VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
    VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
    VK_FORMAT_D16_UNORM = 124,
    VK_FORMAT_X8_D24_UNORM_PACK32 = 125,
    VK_FORMAT_D32_SFLOAT = 126,
    VK_FORMAT_S8_UINT = 127,
    VK_FORMAT_D16_UNORM_S8_UINT = 128,
    VK_FORMAT_D24_UNORM_S8_UINT = 129,
    VK_FORMAT_D32_SFLOAT_S8_UINT = 130,
    VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,
    VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,
    VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
    VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
    VK_FORMAT_BC2_UNORM_BLOCK = 135,
    VK_FORMAT_BC2_SRGB_BLOCK = 136,
    VK_FORMAT_BC3_UNORM_BLOCK = 137,
    VK_FORMAT_BC3_SRGB_BLOCK = 138,
    VK_FORMAT_BC4_UNORM_BLOCK = 139,
    VK_FORMAT_BC4_SNORM_BLOCK = 140,
    VK_FORMAT_BC5_UNORM_BLOCK = 141,
    VK_FORMAT_BC5_SNORM_BLOCK = 142,
    VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,
    VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,
    VK_FORMAT_BC7_UNORM_BLOCK = 145,
    VK_FORMAT_BC7_SRGB_BLOCK = 146,
    VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
    VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
    VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
    VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
    VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
    VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
    VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,
    VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,
    VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
    VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
    VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
    VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
    VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
    VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
    VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
    VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
    VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
    VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
    VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
    VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
    VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
    VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
    VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
    VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
    VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
    VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
    VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
    VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
    VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
    VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
    VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
    VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
    VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
    VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
    VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
    VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
    VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
    VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184,
    VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000,
    VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001,
    VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002,
    VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003,
    VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004,
    VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005,
    VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006,
    VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007,
    VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000,
    VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001,
    VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002,
    VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003,
    VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004,
    VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005,
    VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006,
    VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007,
    VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008,
    VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009,
    VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010,
    VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011,
    VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012,
    VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013,
    VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT = 1000340000,
    VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT = 1000340001,
    VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000,
    VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001,
    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002,
    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003,
    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004,
    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005,
    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006,
    VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007,
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008,
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009,
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010,
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016,
    VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017,
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018,
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019,
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020,
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026,
    VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027,
    VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028,
    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029,
    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030,
    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031,
    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032,
    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033,
};
enum class VkFrontFace : uint32_t {
    VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,
    VK_FRONT_FACE_CLOCKWISE = 1,
};
enum class VkImageLayout : uint32_t {
    VK_IMAGE_LAYOUT_UNDEFINED = 0,
    VK_IMAGE_LAYOUT_GENERAL = 1,
    VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
    VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,
    VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,
    VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,
    VK_IMAGE_LAYOUT_PREINITIALIZED = 8,
    VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002,
    VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000,
    VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = 1000164003,
    VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000,
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000,
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001,
    VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002,
    VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003,
};
enum class VkImageTiling : uint32_t {
    VK_IMAGE_TILING_OPTIMAL = 0,
    VK_IMAGE_TILING_LINEAR = 1,
    VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000,
};
enum class VkImageType : uint32_t {
    VK_IMAGE_TYPE_1D = 0,
    VK_IMAGE_TYPE_2D = 1,
    VK_IMAGE_TYPE_3D = 2,
};
enum class VkImageViewType : uint32_t {
    VK_IMAGE_VIEW_TYPE_1D = 0,
    VK_IMAGE_VIEW_TYPE_2D = 1,
    VK_IMAGE_VIEW_TYPE_3D = 2,
    VK_IMAGE_VIEW_TYPE_CUBE = 3,
    VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4,
    VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5,
    VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,
};
enum class VkSharingMode : uint32_t {
    VK_SHARING_MODE_EXCLUSIVE = 0,
    VK_SHARING_MODE_CONCURRENT = 1,
};
enum class VkIndexType : uint32_t {
    VK_INDEX_TYPE_UINT16 = 0,
    VK_INDEX_TYPE_UINT32 = 1,
    VK_INDEX_TYPE_NONE_KHR = 1000165000,
    VK_INDEX_TYPE_UINT8_EXT = 1000265000,
};
enum class VkLogicOp : uint32_t {
    VK_LOGIC_OP_CLEAR = 0,
    VK_LOGIC_OP_AND = 1,
    VK_LOGIC_OP_AND_REVERSE = 2,
    VK_LOGIC_OP_COPY = 3,
    VK_LOGIC_OP_AND_INVERTED = 4,
    VK_LOGIC_OP_NO_OP = 5,
    VK_LOGIC_OP_XOR = 6,
    VK_LOGIC_OP_OR = 7,
    VK_LOGIC_OP_NOR = 8,
    VK_LOGIC_OP_EQUIVALENT = 9,
    VK_LOGIC_OP_INVERT = 10,
    VK_LOGIC_OP_OR_REVERSE = 11,
    VK_LOGIC_OP_COPY_INVERTED = 12,
    VK_LOGIC_OP_OR_INVERTED = 13,
    VK_LOGIC_OP_NAND = 14,
    VK_LOGIC_OP_SET = 15,
};
enum class VkPhysicalDeviceType : uint32_t {
    VK_PHYSICAL_DEVICE_TYPE_OTHER = 0,
    VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,
    VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2,
    VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3,
    VK_PHYSICAL_DEVICE_TYPE_CPU = 4,
};
enum class VkPipelineBindPoint : uint32_t {
    VK_PIPELINE_BIND_POINT_GRAPHICS = 0,
    VK_PIPELINE_BIND_POINT_COMPUTE = 1,
    VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000,
};
enum class VkPrimitiveTopology : uint32_t {
    VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0,
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1,
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
    VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10,
};
enum class VkQueryType : uint32_t {
    VK_QUERY_TYPE_OCCLUSION = 0,
    VK_QUERY_TYPE_PIPELINE_STATISTICS = 1,
    VK_QUERY_TYPE_TIMESTAMP = 2,
    VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004,
    VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR = 1000116000,
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1000150000,
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150001,
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000,
    VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000,
};
enum class VkSubpassContents : uint32_t {
    VK_SUBPASS_CONTENTS_INLINE = 0,
    VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,
};
enum class VkResult : int32_t {
    VK_SUCCESS = 0,
    VK_NOT_READY = 1,
    VK_TIMEOUT = 2,
    VK_EVENT_SET = 3,
    VK_EVENT_RESET = 4,
    VK_INCOMPLETE = 5,
    VK_ERROR_OUT_OF_HOST_MEMORY = -1,
    VK_ERROR_OUT_OF_DEVICE_MEMORY = -2,
    VK_ERROR_INITIALIZATION_FAILED = -3,
    VK_ERROR_DEVICE_LOST = -4,
    VK_ERROR_MEMORY_MAP_FAILED = -5,
    VK_ERROR_LAYER_NOT_PRESENT = -6,
    VK_ERROR_EXTENSION_NOT_PRESENT = -7,
    VK_ERROR_FEATURE_NOT_PRESENT = -8,
    VK_ERROR_INCOMPATIBLE_DRIVER = -9,
    VK_ERROR_TOO_MANY_OBJECTS = -10,
    VK_ERROR_FORMAT_NOT_SUPPORTED = -11,
    VK_ERROR_FRAGMENTED_POOL = -12,
    VK_ERROR_UNKNOWN = -13,
    VK_ERROR_SURFACE_LOST_KHR = -1000000000,
    VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,
    VK_SUBOPTIMAL_KHR = 1000001003,
    VK_ERROR_OUT_OF_DATE_KHR = -1000001004,
    VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001,
    VK_ERROR_VALIDATION_FAILED_EXT = -1000011001,
    VK_ERROR_INVALID_SHADER_NV = -1000012000,
    VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000,
    VK_ERROR_NOT_PERMITTED_EXT = -1000174001,
    VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = -1000255000,
    VK_THREAD_IDLE_KHR = 1000268000,
    VK_THREAD_DONE_KHR = 1000268001,
    VK_OPERATION_DEFERRED_KHR = 1000268002,
    VK_OPERATION_NOT_DEFERRED_KHR = 1000268003,
    VK_PIPELINE_COMPILE_REQUIRED_EXT = 1000297000,
    VK_ERROR_OUT_OF_POOL_MEMORY = -1000069000,
    VK_ERROR_INVALID_EXTERNAL_HANDLE = -1000072003,
    VK_ERROR_FRAGMENTATION = -1000161000,
    VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = -1000257000,
};
enum class VkStencilOp : uint32_t {
    VK_STENCIL_OP_KEEP = 0,
    VK_STENCIL_OP_ZERO = 1,
    VK_STENCIL_OP_REPLACE = 2,
    VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,
    VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,
    VK_STENCIL_OP_INVERT = 5,
    VK_STENCIL_OP_INCREMENT_AND_WRAP = 6,
    VK_STENCIL_OP_DECREMENT_AND_WRAP = 7,
};
enum class VkStructureType : uint32_t {
    VK_STRUCTURE_TYPE_APPLICATION_INFO = 0,
    VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2,
    VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3,
    VK_STRUCTURE_TYPE_SUBMIT_INFO = 4,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5,
    VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6,
    VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7,
    VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8,
    VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9,
    VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10,
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11,
    VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12,
    VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13,
    VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15,
    VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16,
    VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17,
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18,
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,
    VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,
    VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,
    VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,
    VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28,
    VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29,
    VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30,
    VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35,
    VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38,
    VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,
    VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,
    VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46,
    VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,
    VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,
    VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000,
    VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007,
    VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009,
    VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012,
    VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000,
    VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001,
    VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000,
    VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000,
    VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000,
    VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000,
    VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000,
    VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000,
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1000030001,
    VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000,
    VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001,
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000,
    VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000,
    VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = 1000066000,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001,
    VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002,
    VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000,
    VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001,
    VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002,
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000,
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001,
    VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002,
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003,
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000,
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001,
    VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002,
    VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000,
    VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000,
    VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001,
    VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002,
    VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003,
    VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000,
    VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001,
    VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000,
    VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000,
    VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001,
    VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002,
    VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000,
    VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = 1000116000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = 1000116001,
    VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = 1000116002,
    VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = 1000116003,
    VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = 1000116004,
    VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = 1000116005,
    VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = 1000116006,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001,
    VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002,
    VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000,
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001,
    VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002,
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003,
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004,
    VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000,
    VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002,
    VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003,
    VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004,
    VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = 1000138000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = 1000138001,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = 1000138002,
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = 1000138003,
    VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000,
    VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001,
    VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003,
    VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001,
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = 1000150007,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = 1000150000,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = 1000150002,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = 1000150003,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = 1000150004,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = 1000150005,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = 1000150006,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR = 1000150009,
    VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = 1000150010,
    VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = 1000150011,
    VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = 1000150012,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR = 1000150013,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR = 1000150014,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = 1000150017,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR = 1000150020,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR = 1000347000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR = 1000347001,
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = 1000150015,
    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = 1000150016,
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = 1000150018,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR = 1000348013,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001,
    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002,
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003,
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004,
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005,
    VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000,
    VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR = 1000163000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR = 1000163001,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005,
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001,
    VK_STRUCTURE_TYPE_GEOMETRY_NV = 1000165003,
    VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004,
    VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005,
    VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009,
    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000,
    VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000,
    VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = 1000174000,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000,
    VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = 1000181000,
    VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000,
    VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000,
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000,
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002,
    VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000,
    VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000192000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002,
    VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000,
    VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1000210000,
    VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001,
    VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002,
    VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003,
    VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004,
    VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000,
    VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000,
    VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001,
    VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR = 1000215000,
    VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001,
    VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = 1000225000,
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = 1000225001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = 1000225002,
    VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000226000,
    VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR = 1000226001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR = 1000226002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR = 1000226003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR = 1000226004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT = 1000234000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000,
    VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001,
    VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000,
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = 1000245000,
    VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000,
    VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000,
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002,
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001,
    VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = 1000260000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = 1000267000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000,
    VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = 1000276000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 1000277000,
    VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1000277001,
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 1000277002,
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 1000277003,
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 1000277004,
    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = 1000277005,
    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 1000277006,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 1000277007,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = 1000281001,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = 1000282000,
    VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = 1000282001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT = 1000284000,
    VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT = 1000284001,
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT = 1000284002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1000286000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1000286001,
    VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = 1000287000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = 1000287001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = 1000287002,
    VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = 1000290000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = 1000295000,
    VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = 1000295001,
    VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT = 1000295002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT = 1000297000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = 1000300000,
    VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = 1000300001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR = 1000325000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV = 1000326000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV = 1000326001,
    VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV = 1000326002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = 1000332000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = 1000332001,
    VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM = 1000333000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT = 1000335000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR = 1000336000,
    VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR = 1000337000,
    VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR = 1000337001,
    VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR = 1000337002,
    VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR = 1000337003,
    VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR = 1000337004,
    VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR = 1000337005,
    VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR = 1000337006,
    VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR = 1000337007,
    VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR = 1000337008,
    VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR = 1000337009,
    VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR = 1000337010,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = 1000340000,
    VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = 1000346000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE = 1000351000,
    VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE = 1000351002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001,
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002,
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001,
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000,
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003,
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000,
    VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001,
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002,
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005,
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000,
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002,
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000,
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000,
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000,
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1000109000,
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1000109001,
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1000109002,
    VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1000109003,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1000109004,
    VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1000109005,
    VK_STRUCTURE_TYPE_SUBPASS_END_INFO = 1000109006,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000,
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000,
    VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000,
    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002,
    VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000,
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001,
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001,
    VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1000207002,
    VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003,
    VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1000207004,
    VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1000207005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000,
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1000244001,
    VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002,
    VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003,
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004,
};
enum class VkSystemAllocationScope : uint32_t {
    VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0,
    VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1,
    VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2,
    VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3,
    VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,
};
enum class VkInternalAllocationType : uint32_t {
    VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0,
};
enum class VkSamplerAddressMode : uint32_t {
    VK_SAMPLER_ADDRESS_MODE_REPEAT = 0,
    VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4,
};
enum class VkFilter : uint32_t {
    VK_FILTER_NEAREST = 0,
    VK_FILTER_LINEAR = 1,
    VK_FILTER_CUBIC_IMG = 1000015000,
};
enum class VkSamplerMipmapMode : uint32_t {
    VK_SAMPLER_MIPMAP_MODE_NEAREST = 0,
    VK_SAMPLER_MIPMAP_MODE_LINEAR = 1,
};
enum class VkVertexInputRate : uint32_t {
    VK_VERTEX_INPUT_RATE_VERTEX = 0,
    VK_VERTEX_INPUT_RATE_INSTANCE = 1,
};
enum class VkObjectType : uint32_t {
    VK_OBJECT_TYPE_UNKNOWN = 0,
    VK_OBJECT_TYPE_INSTANCE = 1,
    VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2,
    VK_OBJECT_TYPE_DEVICE = 3,
    VK_OBJECT_TYPE_QUEUE = 4,
    VK_OBJECT_TYPE_SEMAPHORE = 5,
    VK_OBJECT_TYPE_COMMAND_BUFFER = 6,
    VK_OBJECT_TYPE_FENCE = 7,
    VK_OBJECT_TYPE_DEVICE_MEMORY = 8,
    VK_OBJECT_TYPE_BUFFER = 9,
    VK_OBJECT_TYPE_IMAGE = 10,
    VK_OBJECT_TYPE_EVENT = 11,
    VK_OBJECT_TYPE_QUERY_POOL = 12,
    VK_OBJECT_TYPE_BUFFER_VIEW = 13,
    VK_OBJECT_TYPE_IMAGE_VIEW = 14,
    VK_OBJECT_TYPE_SHADER_MODULE = 15,
    VK_OBJECT_TYPE_PIPELINE_CACHE = 16,
    VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17,
    VK_OBJECT_TYPE_RENDER_PASS = 18,
    VK_OBJECT_TYPE_PIPELINE = 19,
    VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20,
    VK_OBJECT_TYPE_SAMPLER = 21,
    VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22,
    VK_OBJECT_TYPE_DESCRIPTOR_SET = 23,
    VK_OBJECT_TYPE_FRAMEBUFFER = 24,
    VK_OBJECT_TYPE_COMMAND_POOL = 25,
    VK_OBJECT_TYPE_SURFACE_KHR = 1000000000,
    VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000,
    VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000,
    VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001,
    VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000,
    VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000,
    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000,
    VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000,
    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
    VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000,
    VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR = 1000268000,
    VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = 1000277000,
    VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = 1000295000,
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000,
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000,
};
enum class VkIndirectCommandsTokenTypeNV : uint32_t {
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7,
};
enum class VkDescriptorUpdateTemplateType : uint32_t {
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1,
};
using VkDescriptorUpdateTemplateTypeKHR = VkDescriptorUpdateTemplateType;
enum class VkViewportCoordinateSwizzleNV : uint32_t {
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7,
};
enum class VkDiscardRectangleModeEXT : uint32_t {
    VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0,
    VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1,
};
enum class VkPointClippingBehavior : uint32_t {
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0,
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1,
};
using VkPointClippingBehaviorKHR = VkPointClippingBehavior;
enum class VkCoverageModulationModeNV : uint32_t {
    VK_COVERAGE_MODULATION_MODE_NONE_NV = 0,
    VK_COVERAGE_MODULATION_MODE_RGB_NV = 1,
    VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2,
    VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3,
};
enum class VkCoverageReductionModeNV : uint32_t {
    VK_COVERAGE_REDUCTION_MODE_MERGE_NV = 0,
    VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1,
};
enum class VkValidationCacheHeaderVersionEXT : uint32_t {
    VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1,
};
enum class VkShaderInfoTypeAMD : uint32_t {
    VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0,
    VK_SHADER_INFO_TYPE_BINARY_AMD = 1,
    VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2,
};
enum class VkQueueGlobalPriorityEXT : uint32_t {
    VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = 128,
    VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = 256,
    VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = 512,
    VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024,
};
enum class VkTimeDomainEXT : uint32_t {
    VK_TIME_DOMAIN_DEVICE_EXT = 0,
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1,
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2,
    VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3,
};
enum class VkConservativeRasterizationModeEXT : uint32_t {
    VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0,
    VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1,
    VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2,
};
enum class VkSemaphoreType : uint32_t {
    VK_SEMAPHORE_TYPE_BINARY = 0,
    VK_SEMAPHORE_TYPE_TIMELINE = 1,
};
using VkSemaphoreTypeKHR = VkSemaphoreType;
enum class VkBuildAccelerationStructureModeKHR : uint32_t {
    VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR = 0,
    VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR = 1,
};
enum class VkCopyAccelerationStructureModeKHR : uint32_t {
    VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3,
};
using VkCopyAccelerationStructureModeNV = VkCopyAccelerationStructureModeKHR;
enum class VkAccelerationStructureTypeKHR : uint32_t {
    VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0,
    VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1,
    VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR = 2,
};
using VkAccelerationStructureTypeNV = VkAccelerationStructureTypeKHR;
enum class VkGeometryTypeKHR : uint32_t {
    VK_GEOMETRY_TYPE_TRIANGLES_KHR = 0,
    VK_GEOMETRY_TYPE_AABBS_KHR = 1,
    VK_GEOMETRY_TYPE_INSTANCES_KHR = 2,
};
using VkGeometryTypeNV = VkGeometryTypeKHR;
enum class VkRayTracingShaderGroupTypeKHR : uint32_t {
    VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2,
};
using VkRayTracingShaderGroupTypeNV = VkRayTracingShaderGroupTypeKHR;
enum class VkAccelerationStructureMemoryRequirementsTypeNV : uint32_t {
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2,
};
enum class VkAccelerationStructureBuildTypeKHR : uint32_t {
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = 0,
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = 1,
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = 2,
};
enum class VkAccelerationStructureCompatibilityKHR : uint32_t {
    VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR = 0,
    VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR = 1,
};
enum class VkShaderGroupShaderKHR : uint32_t {
    VK_SHADER_GROUP_SHADER_GENERAL_KHR = 0,
    VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR = 1,
    VK_SHADER_GROUP_SHADER_ANY_HIT_KHR = 2,
    VK_SHADER_GROUP_SHADER_INTERSECTION_KHR = 3,
};
enum class VkMemoryOverallocationBehaviorAMD : uint32_t {
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2,
};
enum class VkScopeNV : uint32_t {
    VK_SCOPE_DEVICE_NV = 1,
    VK_SCOPE_WORKGROUP_NV = 2,
    VK_SCOPE_SUBGROUP_NV = 3,
    VK_SCOPE_QUEUE_FAMILY_NV = 5,
};
enum class VkComponentTypeNV : uint32_t {
    VK_COMPONENT_TYPE_FLOAT16_NV = 0,
    VK_COMPONENT_TYPE_FLOAT32_NV = 1,
    VK_COMPONENT_TYPE_FLOAT64_NV = 2,
    VK_COMPONENT_TYPE_SINT8_NV = 3,
    VK_COMPONENT_TYPE_SINT16_NV = 4,
    VK_COMPONENT_TYPE_SINT32_NV = 5,
    VK_COMPONENT_TYPE_SINT64_NV = 6,
    VK_COMPONENT_TYPE_UINT8_NV = 7,
    VK_COMPONENT_TYPE_UINT16_NV = 8,
    VK_COMPONENT_TYPE_UINT32_NV = 9,
    VK_COMPONENT_TYPE_UINT64_NV = 10,
};
enum class VkPerformanceCounterScopeKHR : uint32_t {
    VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0,
    VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1,
    VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2,
};
enum class VkPerformanceCounterUnitKHR : uint32_t {
    VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0,
    VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1,
    VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2,
    VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3,
    VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4,
    VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5,
    VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6,
    VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7,
    VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8,
    VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9,
    VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10,
};
enum class VkPerformanceCounterStorageKHR : uint32_t {
    VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0,
    VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1,
    VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2,
    VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3,
    VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4,
    VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5,
};
enum class VkPerformanceConfigurationTypeINTEL : uint32_t {
    VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0,
};
enum class VkQueryPoolSamplingModeINTEL : uint32_t {
    VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0,
};
enum class VkPerformanceOverrideTypeINTEL : uint32_t {
    VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0,
    VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1,
};
enum class VkPerformanceParameterTypeINTEL : uint32_t {
    VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0,
    VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1,
};
enum class VkPerformanceValueTypeINTEL : uint32_t {
    VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0,
    VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1,
    VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2,
    VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3,
    VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4,
};
enum class VkLineRasterizationModeEXT : uint32_t {
    VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0,
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1,
    VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2,
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3,
};
enum class VkFragmentShadingRateNV : uint32_t {
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 1,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 4,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 5,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 6,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 9,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 10,
    VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 11,
    VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 12,
    VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 13,
    VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 14,
    VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = 15,
};
enum class VkFragmentShadingRateTypeNV : uint32_t {
    VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = 0,
    VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = 1,
};
enum class VkColorSpaceKHR : uint32_t {
    VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0,
    VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001,
    VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002,
    VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003,
    VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004,
    VK_COLOR_SPACE_BT709_LINEAR_EXT = 1000104005,
    VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006,
    VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007,
    VK_COLOR_SPACE_HDR10_ST2084_EXT = 1000104008,
    VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009,
    VK_COLOR_SPACE_HDR10_HLG_EXT = 1000104010,
    VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011,
    VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012,
    VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013,
    VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014,
    VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000,
};
enum class VkPresentModeKHR : uint32_t {
    VK_PRESENT_MODE_IMMEDIATE_KHR = 0,
    VK_PRESENT_MODE_MAILBOX_KHR = 1,
    VK_PRESENT_MODE_FIFO_KHR = 2,
    VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3,
    VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000,
    VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001,
};
enum class VkDebugReportObjectTypeEXT : uint32_t {
    VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0,
    VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1,
    VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3,
    VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4,
    VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5,
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6,
    VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9,
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10,
    VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11,
    VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13,
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14,
    VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17,
    VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23,
    VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24,
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25,
    VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26,
    VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28,
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29,
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30,
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000,
    VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000150000,
    VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000,
};
enum class VkDeviceMemoryReportEventTypeEXT : uint32_t {
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = 0,
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = 1,
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = 2,
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = 3,
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = 4,
};
enum class VkRasterizationOrderAMD : uint32_t {
    VK_RASTERIZATION_ORDER_STRICT_AMD = 0,
    VK_RASTERIZATION_ORDER_RELAXED_AMD = 1,
};
enum class VkValidationCheckEXT : uint32_t {
    VK_VALIDATION_CHECK_ALL_EXT = 0,
    VK_VALIDATION_CHECK_SHADERS_EXT = 1,
};
enum class VkValidationFeatureEnableEXT : uint32_t {
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0,
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1,
    VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2,
    VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3,
    VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4,
};
enum class VkValidationFeatureDisableEXT : uint32_t {
    VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0,
    VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1,
    VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2,
    VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3,
    VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4,
    VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5,
    VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6,
};
enum class VkDisplayPowerStateEXT : uint32_t {
    VK_DISPLAY_POWER_STATE_OFF_EXT = 0,
    VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1,
    VK_DISPLAY_POWER_STATE_ON_EXT = 2,
};
enum class VkDeviceEventTypeEXT : uint32_t {
    VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0,
};
enum class VkDisplayEventTypeEXT : uint32_t {
    VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0,
};
enum class VkTessellationDomainOrigin : uint32_t {
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0,
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1,
};
using VkTessellationDomainOriginKHR = VkTessellationDomainOrigin;
enum class VkSamplerYcbcrModelConversion : uint32_t {
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4,
};
using VkSamplerYcbcrModelConversionKHR = VkSamplerYcbcrModelConversion;
enum class VkSamplerYcbcrRange : uint32_t {
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0,
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1,
};
using VkSamplerYcbcrRangeKHR = VkSamplerYcbcrRange;
enum class VkChromaLocation : uint32_t {
    VK_CHROMA_LOCATION_COSITED_EVEN = 0,
    VK_CHROMA_LOCATION_MIDPOINT = 1,
};
using VkChromaLocationKHR = VkChromaLocation;
enum class VkSamplerReductionMode : uint32_t {
    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0,
    VK_SAMPLER_REDUCTION_MODE_MIN = 1,
    VK_SAMPLER_REDUCTION_MODE_MAX = 2,
};
using VkSamplerReductionModeEXT = VkSamplerReductionMode;
enum class VkBlendOverlapEXT : uint32_t {
    VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0,
    VK_BLEND_OVERLAP_DISJOINT_EXT = 1,
    VK_BLEND_OVERLAP_CONJOINT_EXT = 2,
};
#if defined(VK_USE_PLATFORM_WIN32_KHR)
enum class VkFullScreenExclusiveEXT : uint32_t {
    VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT = 0,
    VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT = 1,
    VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT = 2,
    VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT = 3,
};
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
enum class VkShaderFloatControlsIndependence : uint32_t {
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2,
};
using VkShaderFloatControlsIndependenceKHR = VkShaderFloatControlsIndependence;
enum class VkFragmentShadingRateCombinerOpKHR : uint32_t {
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = 0,
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = 1,
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = 2,
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = 3,
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = 4,
};
enum class VkVendorId : uint32_t {
    VK_VENDOR_ID_VIV = 0x10001,
    VK_VENDOR_ID_VSI = 0x10002,
    VK_VENDOR_ID_KAZAN = 0x10003,
    VK_VENDOR_ID_CODEPLAY = 0x10004,
    VK_VENDOR_ID_MESA = 0x10005,
    VK_VENDOR_ID_POCL = 0x10006,
};
enum class VkDriverId : uint32_t {
    VK_DRIVER_ID_AMD_PROPRIETARY = 1,
    VK_DRIVER_ID_AMD_OPEN_SOURCE = 2,
    VK_DRIVER_ID_MESA_RADV = 3,
    VK_DRIVER_ID_NVIDIA_PROPRIETARY = 4,
    VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5,
    VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6,
    VK_DRIVER_ID_IMAGINATION_PROPRIETARY = 7,
    VK_DRIVER_ID_QUALCOMM_PROPRIETARY = 8,
    VK_DRIVER_ID_ARM_PROPRIETARY = 9,
    VK_DRIVER_ID_GOOGLE_SWIFTSHADER = 10,
    VK_DRIVER_ID_GGP_PROPRIETARY = 11,
    VK_DRIVER_ID_BROADCOM_PROPRIETARY = 12,
    VK_DRIVER_ID_MESA_LLVMPIPE = 13,
    VK_DRIVER_ID_MOLTENVK = 14,
};
using VkDriverIdKHR = VkDriverId;
enum class VkShadingRatePaletteEntryNV : uint32_t {
    VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0,
    VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1,
    VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2,
    VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3,
    VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11,
};
enum class VkCoarseSampleOrderTypeNV : uint32_t {
    VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0,
    VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1,
    VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2,
    VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3,
};
enum class VkPipelineExecutableStatisticFormatKHR : uint32_t {
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3,
};
enum class VkPipelineCacheCreateFlagBits: uint32_t {
    VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = 1,
};
enum class VkQueueFlagBits: uint32_t {
    VK_QUEUE_GRAPHICS_BIT = 1,
    VK_QUEUE_COMPUTE_BIT = 2,
    VK_QUEUE_TRANSFER_BIT = 4,
    VK_QUEUE_SPARSE_BINDING_BIT = 8,
    VK_QUEUE_PROTECTED_BIT = 16,
};
enum class VkCullModeFlagBits: uint32_t {
    VK_CULL_MODE_NONE = 0,
    VK_CULL_MODE_FRONT_BIT = 1,
    VK_CULL_MODE_BACK_BIT = 2,
    VK_CULL_MODE_FRONT_AND_BACK = 0x00000003,
};
enum class VkRenderPassCreateFlagBits: uint32_t {
    VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 2,
};
enum class VkDeviceQueueCreateFlagBits: uint32_t {
    VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 1,
};
enum class VkMemoryPropertyFlagBits: uint32_t {
    VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1,
    VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 2,
    VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 4,
    VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 8,
    VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 16,
    VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 64,
    VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 128,
    VK_MEMORY_PROPERTY_PROTECTED_BIT = 32,
};
enum class VkMemoryHeapFlagBits: uint32_t {
    VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 1,
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 2,
};
enum class VkAccessFlagBits: uint32_t {
    VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 1,
    VK_ACCESS_INDEX_READ_BIT = 2,
    VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 4,
    VK_ACCESS_UNIFORM_READ_BIT = 8,
    VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 16,
    VK_ACCESS_SHADER_READ_BIT = 32,
    VK_ACCESS_SHADER_WRITE_BIT = 64,
    VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 128,
    VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 256,
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512,
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024,
    VK_ACCESS_TRANSFER_READ_BIT = 2048,
    VK_ACCESS_TRANSFER_WRITE_BIT = 4096,
    VK_ACCESS_HOST_READ_BIT = 8192,
    VK_ACCESS_HOST_WRITE_BIT = 16384,
    VK_ACCESS_MEMORY_READ_BIT = 32768,
    VK_ACCESS_MEMORY_WRITE_BIT = 65536,
    VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432,
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864,
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728,
    VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576,
    VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288,
    VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 2097152,
    VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 4194304,
    VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = 8388608,
    VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216,
    VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 131072,
    VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 262144,
};
enum class VkBufferUsageFlagBits: uint32_t {
    VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 1,
    VK_BUFFER_USAGE_TRANSFER_DST_BIT = 2,
    VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 4,
    VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 8,
    VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 16,
    VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 32,
    VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 64,
    VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 128,
    VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256,
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048,
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096,
    VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 512,
    VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = 524288,
    VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = 1048576,
    VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR = 1024,
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 131072,
};
enum class VkBufferCreateFlagBits: uint32_t {
    VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 1,
    VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 2,
    VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 4,
    VK_BUFFER_CREATE_PROTECTED_BIT = 8,
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 16,
};
enum class VkShaderStageFlagBits: uint32_t {
    VK_SHADER_STAGE_VERTEX_BIT = 1,
    VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2,
    VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4,
    VK_SHADER_STAGE_GEOMETRY_BIT = 8,
    VK_SHADER_STAGE_FRAGMENT_BIT = 16,
    VK_SHADER_STAGE_COMPUTE_BIT = 32,
    VK_SHADER_STAGE_ALL_GRAPHICS = 0x0000001F,
    VK_SHADER_STAGE_ALL = 0x7FFFFFFF,
    VK_SHADER_STAGE_RAYGEN_BIT_KHR = 256,
    VK_SHADER_STAGE_ANY_HIT_BIT_KHR = 512,
    VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 1024,
    VK_SHADER_STAGE_MISS_BIT_KHR = 2048,
    VK_SHADER_STAGE_INTERSECTION_BIT_KHR = 4096,
    VK_SHADER_STAGE_CALLABLE_BIT_KHR = 8192,
    VK_SHADER_STAGE_TASK_BIT_NV = 64,
    VK_SHADER_STAGE_MESH_BIT_NV = 128,
};
enum class VkImageUsageFlagBits: uint32_t {
    VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 1,
    VK_IMAGE_USAGE_TRANSFER_DST_BIT = 2,
    VK_IMAGE_USAGE_SAMPLED_BIT = 4,
    VK_IMAGE_USAGE_STORAGE_BIT = 8,
    VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16,
    VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32,
    VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64,
    VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128,
    VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = 256,
    VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 512,
};
enum class VkImageCreateFlagBits: uint32_t {
    VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 1,
    VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 2,
    VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 4,
    VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 8,
    VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 16,
    VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 8192,
    VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 4096,
    VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 16384,
    VK_IMAGE_CREATE_ALIAS_BIT = 1024,
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 64,
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 32,
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 128,
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 256,
    VK_IMAGE_CREATE_PROTECTED_BIT = 2048,
    VK_IMAGE_CREATE_DISJOINT_BIT = 512,
};
enum class VkImageViewCreateFlagBits: uint32_t {
    VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 1,
    VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = 2,
};
enum class VkSamplerCreateFlagBits: uint32_t {
    VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 1,
    VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 2,
};
enum class VkPipelineCreateFlagBits: uint32_t {
    VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1,
    VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 2,
    VK_PIPELINE_CREATE_DERIVATIVE_BIT = 4,
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 16384,
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 32768,
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 65536,
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 131072,
    VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 4096,
    VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = 8192,
    VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = 524288,
    VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 32,
    VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 64,
    VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 128,
    VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = 262144,
    VK_PIPELINE_CREATE_LIBRARY_BIT_KHR = 2048,
    VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = 256,
    VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = 512,
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 8,
    VK_PIPELINE_CREATE_DISPATCH_BASE_BIT = 16,
};
enum class VkPipelineShaderStageCreateFlagBits: uint32_t {
    VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 1,
    VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 2,
};
enum class VkColorComponentFlagBits: uint32_t {
    VK_COLOR_COMPONENT_R_BIT = 1,
    VK_COLOR_COMPONENT_G_BIT = 2,
    VK_COLOR_COMPONENT_B_BIT = 4,
    VK_COLOR_COMPONENT_A_BIT = 8,
};
enum class VkFenceCreateFlagBits: uint32_t {
    VK_FENCE_CREATE_SIGNALED_BIT = 1,
};
enum class VkFormatFeatureFlagBits: uint32_t {
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1,
    VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 2,
    VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 4,
    VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 8,
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 16,
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32,
    VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 64,
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 128,
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 256,
    VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 512,
    VK_FORMAT_FEATURE_BLIT_SRC_BIT = 1024,
    VK_FORMAT_FEATURE_BLIT_DST_BIT = 2048,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 8192,
    VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 536870912,
    VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 16777216,
    VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 1073741824,
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 16384,
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 32768,
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 131072,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 524288,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1048576,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 2097152,
    VK_FORMAT_FEATURE_DISJOINT_BIT = 4194304,
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 8388608,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 65536,
};
enum class VkQueryControlFlagBits: uint32_t {
    VK_QUERY_CONTROL_PRECISE_BIT = 1,
};
enum class VkQueryResultFlagBits: uint32_t {
    VK_QUERY_RESULT_64_BIT = 1,
    VK_QUERY_RESULT_WAIT_BIT = 2,
    VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 4,
    VK_QUERY_RESULT_PARTIAL_BIT = 8,
};
enum class VkCommandBufferUsageFlagBits: uint32_t {
    VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1,
    VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2,
    VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4,
};
enum class VkQueryPipelineStatisticFlagBits: uint32_t {
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1,
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 2,
    VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 4,
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 8,
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 16,
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 32,
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 64,
    VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 128,
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 256,
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 512,
    VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1024,
};
enum class VkImageAspectFlagBits: uint32_t {
    VK_IMAGE_ASPECT_COLOR_BIT = 1,
    VK_IMAGE_ASPECT_DEPTH_BIT = 2,
    VK_IMAGE_ASPECT_STENCIL_BIT = 4,
    VK_IMAGE_ASPECT_METADATA_BIT = 8,
    VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 128,
    VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 256,
    VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 512,
    VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 1024,
    VK_IMAGE_ASPECT_PLANE_0_BIT = 16,
    VK_IMAGE_ASPECT_PLANE_1_BIT = 32,
    VK_IMAGE_ASPECT_PLANE_2_BIT = 64,
};
enum class VkSparseImageFormatFlagBits: uint32_t {
    VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1,
    VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 2,
    VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 4,
};
enum class VkSparseMemoryBindFlagBits: uint32_t {
    VK_SPARSE_MEMORY_BIND_METADATA_BIT = 1,
};
enum class VkPipelineStageFlagBits: uint32_t {
    VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1,
    VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 2,
    VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 4,
    VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 8,
    VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 16,
    VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 32,
    VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 64,
    VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 128,
    VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 256,
    VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 512,
    VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1024,
    VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 2048,
    VK_PIPELINE_STAGE_TRANSFER_BIT = 4096,
    VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 8192,
    VK_PIPELINE_STAGE_HOST_BIT = 16384,
    VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 32768,
    VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 65536,
    VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 16777216,
    VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 262144,
    VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 33554432,
    VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 2097152,
    VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = 4194304,
    VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = 524288,
    VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = 1048576,
    VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608,
    VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 131072,
};
enum class VkCommandPoolCreateFlagBits: uint32_t {
    VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 1,
    VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2,
    VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 4,
};
enum class VkCommandPoolResetFlagBits: uint32_t {
    VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1,
};
enum class VkCommandBufferResetFlagBits: uint32_t {
    VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1,
};
enum class VkSampleCountFlagBits: uint32_t {
    VK_SAMPLE_COUNT_1_BIT = 1,
    VK_SAMPLE_COUNT_2_BIT = 2,
    VK_SAMPLE_COUNT_4_BIT = 4,
    VK_SAMPLE_COUNT_8_BIT = 8,
    VK_SAMPLE_COUNT_16_BIT = 16,
    VK_SAMPLE_COUNT_32_BIT = 32,
    VK_SAMPLE_COUNT_64_BIT = 64,
};
enum class VkAttachmentDescriptionFlagBits: uint32_t {
    VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1,
};
enum class VkStencilFaceFlagBits: uint32_t {
    VK_STENCIL_FACE_FRONT_BIT = 1,
    VK_STENCIL_FACE_BACK_BIT = 2,
    VK_STENCIL_FACE_FRONT_AND_BACK = 0x00000003,
};
enum class VkDescriptorPoolCreateFlagBits: uint32_t {
    VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1,
    VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE = 4,
    VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 2,
};
enum class VkDependencyFlagBits: uint32_t {
    VK_DEPENDENCY_BY_REGION_BIT = 1,
    VK_DEPENDENCY_DEVICE_GROUP_BIT = 4,
    VK_DEPENDENCY_VIEW_LOCAL_BIT = 2,
};
enum class VkSemaphoreWaitFlagBits: uint32_t {
    VK_SEMAPHORE_WAIT_ANY_BIT = 1,
};
enum class VkDisplayPlaneAlphaFlagBitsKHR: uint32_t {
    VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 1,
    VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 2,
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 4,
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 8,
};
enum class VkCompositeAlphaFlagBitsKHR: uint32_t {
    VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1,
    VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 2,
    VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 4,
    VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 8,
};
enum class VkSurfaceTransformFlagBitsKHR: uint32_t {
    VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1,
    VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 2,
    VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 4,
    VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 8,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 16,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 32,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 64,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 128,
    VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 256,
};
enum class VkDebugReportFlagBitsEXT: uint32_t {
    VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 1,
    VK_DEBUG_REPORT_WARNING_BIT_EXT = 2,
    VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 4,
    VK_DEBUG_REPORT_ERROR_BIT_EXT = 8,
    VK_DEBUG_REPORT_DEBUG_BIT_EXT = 16,
};
enum class VkExternalMemoryHandleTypeFlagBitsNV: uint32_t {
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 1,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 2,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 4,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 8,
};
enum class VkExternalMemoryFeatureFlagBitsNV: uint32_t {
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 1,
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 2,
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 4,
};
enum class VkSubgroupFeatureFlagBits: uint32_t {
    VK_SUBGROUP_FEATURE_BASIC_BIT = 1,
    VK_SUBGROUP_FEATURE_VOTE_BIT = 2,
    VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 4,
    VK_SUBGROUP_FEATURE_BALLOT_BIT = 8,
    VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 16,
    VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 32,
    VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 64,
    VK_SUBGROUP_FEATURE_QUAD_BIT = 128,
    VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 256,
};
enum class VkIndirectCommandsLayoutUsageFlagBitsNV: uint32_t {
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 1,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 2,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 4,
};
enum class VkIndirectStateFlagBitsNV: uint32_t {
    VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 1,
};
enum class VkPrivateDataSlotCreateFlagBitsEXT: uint32_t {
};
enum class VkDescriptorSetLayoutCreateFlagBits: uint32_t {
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 1,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE = 4,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 2,
};
enum class VkExternalMemoryHandleTypeFlagBits: uint32_t {
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 8,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 16,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 32,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 64,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 512,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 1024,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 128,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 256,
};
enum class VkExternalMemoryFeatureFlagBits: uint32_t {
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 1,
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 2,
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 4,
};
enum class VkExternalSemaphoreHandleTypeFlagBits: uint32_t {
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 8,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 16,
};
enum class VkExternalSemaphoreFeatureFlagBits: uint32_t {
    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 1,
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 2,
};
enum class VkSemaphoreImportFlagBits: uint32_t {
    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 1,
};
enum class VkExternalFenceHandleTypeFlagBits: uint32_t {
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 8,
};
enum class VkExternalFenceFeatureFlagBits: uint32_t {
    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 1,
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 2,
};
enum class VkFenceImportFlagBits: uint32_t {
    VK_FENCE_IMPORT_TEMPORARY_BIT = 1,
};
enum class VkSurfaceCounterFlagBitsEXT: uint32_t {
    VK_SURFACE_COUNTER_VBLANK_BIT_EXT = 1,
    VK_SURFACE_COUNTER_VBLANK_EXT = VK_SURFACE_COUNTER_VBLANK_BIT_EXT,
};
enum class VkPeerMemoryFeatureFlagBits: uint32_t {
    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 1,
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 2,
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 4,
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 8,
};
enum class VkMemoryAllocateFlagBits: uint32_t {
    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 1,
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 2,
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 4,
};
enum class VkDeviceGroupPresentModeFlagBitsKHR: uint32_t {
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 1,
    VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 2,
    VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 4,
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 8,
};
enum class VkSwapchainCreateFlagBitsKHR: uint32_t {
    VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1,
    VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 2,
    VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 4,
};
enum class VkSubpassDescriptionFlagBits: uint32_t {
    VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 1,
    VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 2,
    VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = 4,
    VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = 8,
};
enum class VkDebugUtilsMessageSeverityFlagBitsEXT: uint32_t {
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 1,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 16,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 256,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 4096,
};
enum class VkDebugUtilsMessageTypeFlagBitsEXT: uint32_t {
    VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 1,
    VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 2,
    VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 4,
};
enum class VkDescriptorBindingFlagBits: uint32_t {
    VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 1,
    VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 2,
    VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 4,
    VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 8,
};
enum class VkConditionalRenderingFlagBitsEXT: uint32_t {
    VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 1,
};
enum class VkResolveModeFlagBits: uint32_t {
    VK_RESOLVE_MODE_NONE = 0,
    VK_RESOLVE_MODE_SAMPLE_ZERO_BIT = 1,
    VK_RESOLVE_MODE_AVERAGE_BIT = 2,
    VK_RESOLVE_MODE_MIN_BIT = 4,
    VK_RESOLVE_MODE_MAX_BIT = 8,
};
enum class VkGeometryInstanceFlagBitsKHR: uint32_t {
    VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 1,
    VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = 2,
    VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 4,
    VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 8,
};
enum class VkGeometryFlagBitsKHR: uint32_t {
    VK_GEOMETRY_OPAQUE_BIT_KHR = 1,
    VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 2,
};
enum class VkBuildAccelerationStructureFlagBitsKHR: uint32_t {
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 1,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 2,
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 4,
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 8,
    VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 16,
};
enum class VkAccelerationStructureCreateFlagBitsKHR: uint32_t {
    VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 1,
};
enum class VkFramebufferCreateFlagBits: uint32_t {
    VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT = 1,
};
enum class VkDeviceDiagnosticsConfigFlagBitsNV: uint32_t {
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 1,
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 2,
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 4,
};
enum class VkPipelineCreationFeedbackFlagBitsEXT: uint32_t {
    VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = 1,
    VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = 2,
    VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = 4,
};
enum class VkPerformanceCounterDescriptionFlagBitsKHR: uint32_t {
    VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = 1,
    VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR,
    VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = 2,
    VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR,
};
enum class VkAcquireProfilingLockFlagBitsKHR: uint32_t {
};
enum class VkShaderCorePropertiesFlagBitsAMD: uint32_t {
};
enum class VkShaderModuleCreateFlagBits: uint32_t {
};
enum class VkPipelineCompilerControlFlagBitsAMD: uint32_t {
};
enum class VkToolPurposeFlagBitsEXT: uint32_t {
    VK_TOOL_PURPOSE_VALIDATION_BIT_EXT = 1,
    VK_TOOL_PURPOSE_PROFILING_BIT_EXT = 2,
    VK_TOOL_PURPOSE_TRACING_BIT_EXT = 4,
    VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = 8,
    VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = 16,
    VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 32,
    VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 64,
};
enum class VkQueryPoolCreateFlagBits: uint32_t { };
enum class VkPipelineLayoutCreateFlagBits: uint32_t { };
enum class VkPipelineDepthStencilStateCreateFlagBits: uint32_t { };
enum class VkPipelineDynamicStateCreateFlagBits: uint32_t { };
enum class VkPipelineColorBlendStateCreateFlagBits: uint32_t { };
enum class VkPipelineMultisampleStateCreateFlagBits: uint32_t { };
enum class VkPipelineRasterizationStateCreateFlagBits: uint32_t { };
enum class VkPipelineViewportStateCreateFlagBits: uint32_t { };
enum class VkPipelineTessellationStateCreateFlagBits: uint32_t { };
enum class VkPipelineInputAssemblyStateCreateFlagBits: uint32_t { };
enum class VkPipelineVertexInputStateCreateFlagBits: uint32_t { };
enum class VkBufferViewCreateFlagBits: uint32_t { };
enum class VkInstanceCreateFlagBits: uint32_t { };
enum class VkDeviceCreateFlagBits: uint32_t { };
enum class VkSemaphoreCreateFlagBits: uint32_t { };
enum class VkEventCreateFlagBits: uint32_t { };
enum class VkMemoryMapFlagBits: uint32_t { };
enum class VkDescriptorPoolResetFlagBits: uint32_t { };
enum class VkDescriptorUpdateTemplateCreateFlagBits: uint32_t { };
enum class VkDisplayModeCreateFlagBitsKHR: uint32_t { };
enum class VkDisplaySurfaceCreateFlagBitsKHR: uint32_t { };
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
enum class VkAndroidSurfaceCreateFlagBitsKHR: uint32_t { };
#endif // defined(VK_USE_PLATFORM_ANDROID_KHR)
#if defined(VK_USE_PLATFORM_VI_NN)
enum class VkViSurfaceCreateFlagBitsNN: uint32_t { };
#endif // defined(VK_USE_PLATFORM_VI_NN)
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
enum class VkWaylandSurfaceCreateFlagBitsKHR: uint32_t { };
#endif // defined(VK_USE_PLATFORM_WAYLAND_KHR)
#if defined(VK_USE_PLATFORM_WIN32_KHR)
enum class VkWin32SurfaceCreateFlagBitsKHR: uint32_t { };
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
#if defined(VK_USE_PLATFORM_XLIB_KHR)
enum class VkXlibSurfaceCreateFlagBitsKHR: uint32_t { };
#endif // defined(VK_USE_PLATFORM_XLIB_KHR)
#if defined(VK_USE_PLATFORM_XCB_KHR)
enum class VkXcbSurfaceCreateFlagBitsKHR: uint32_t { };
#endif // defined(VK_USE_PLATFORM_XCB_KHR)
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
enum class VkDirectFBSurfaceCreateFlagBitsEXT: uint32_t { };
#endif // defined(VK_USE_PLATFORM_DIRECTFB_EXT)
#if defined(VK_USE_PLATFORM_IOS_MVK)
enum class VkIOSSurfaceCreateFlagBitsMVK: uint32_t { };
#endif // defined(VK_USE_PLATFORM_IOS_MVK)
#if defined(VK_USE_PLATFORM_MACOS_MVK)
enum class VkMacOSSurfaceCreateFlagBitsMVK: uint32_t { };
#endif // defined(VK_USE_PLATFORM_MACOS_MVK)
#if defined(VK_USE_PLATFORM_METAL_EXT)
enum class VkMetalSurfaceCreateFlagBitsEXT: uint32_t { };
#endif // defined(VK_USE_PLATFORM_METAL_EXT)
#if defined(VK_USE_PLATFORM_FUCHSIA)
enum class VkImagePipeSurfaceCreateFlagBitsFUCHSIA: uint32_t { };
#endif // defined(VK_USE_PLATFORM_FUCHSIA)
#if defined(VK_USE_PLATFORM_GGP)
enum class VkStreamDescriptorSurfaceCreateFlagBitsGGP: uint32_t { };
#endif // defined(VK_USE_PLATFORM_GGP)
enum class VkHeadlessSurfaceCreateFlagBitsEXT: uint32_t { };
enum class VkCommandPoolTrimFlagBits: uint32_t { };
enum class VkPipelineViewportSwizzleStateCreateFlagBitsNV: uint32_t { };
enum class VkPipelineDiscardRectangleStateCreateFlagBitsEXT: uint32_t { };
enum class VkPipelineCoverageToColorStateCreateFlagBitsNV: uint32_t { };
enum class VkPipelineCoverageModulationStateCreateFlagBitsNV: uint32_t { };
enum class VkPipelineCoverageReductionStateCreateFlagBitsNV: uint32_t { };
enum class VkValidationCacheCreateFlagBitsEXT: uint32_t { };
enum class VkDebugUtilsMessengerCreateFlagBitsEXT: uint32_t { };
enum class VkDebugUtilsMessengerCallbackDataFlagBitsEXT: uint32_t { };
enum class VkDeviceMemoryReportFlagBitsEXT: uint32_t { };
enum class VkPipelineRasterizationConservativeStateCreateFlagBitsEXT: uint32_t { };
enum class VkPipelineRasterizationStateStreamCreateFlagBitsEXT: uint32_t { };
enum class VkPipelineRasterizationDepthClipStateCreateFlagBitsEXT: uint32_t { };

#define DECLARE_ENUM_FLAG_OPERATORS(FLAG_TYPE, FLAG_BITS, BASE_TYPE)                       \
                                                                                           \
struct FLAG_TYPE {                                                                         \
    BASE_TYPE flags = static_cast<BASE_TYPE>(0);                                           \
                                                                                           \
    constexpr FLAG_TYPE() noexcept = default;                                              \
    constexpr explicit FLAG_TYPE(BASE_TYPE in) noexcept: flags(in){ }                      \
    constexpr FLAG_TYPE(FLAG_BITS in) noexcept: flags(static_cast<BASE_TYPE>(in)){ }       \
    constexpr bool operator==(FLAG_TYPE const& right) const { return flags == right.flags;}\
    constexpr bool operator!=(FLAG_TYPE const& right) const { return flags != right.flags;}\
    constexpr explicit operator BASE_TYPE() const { return flags;}                         \
    constexpr explicit operator bool() const noexcept {                                    \
      return flags != 0;                                                                   \
    }                                                                                      \
};                                                                                         \
constexpr FLAG_TYPE operator|(FLAG_TYPE a, FLAG_TYPE b) noexcept {                         \
    return static_cast<FLAG_TYPE>(a.flags | b.flags);                                      \
}                                                                                          \
constexpr FLAG_TYPE operator&(FLAG_TYPE a, FLAG_TYPE b) noexcept {                         \
    return static_cast<FLAG_TYPE>(a.flags & b.flags);                                      \
}                                                                                          \
constexpr FLAG_TYPE operator^(FLAG_TYPE a, FLAG_TYPE b) noexcept {                         \
    return static_cast<FLAG_TYPE>(a.flags ^ b.flags);                                      \
}                                                                                          \
constexpr FLAG_TYPE operator~(FLAG_TYPE a) noexcept {                                      \
    return static_cast<FLAG_TYPE>(~a.flags);                                               \
}                                                                                          \
constexpr FLAG_TYPE& operator|=(FLAG_TYPE& a, FLAG_TYPE b) noexcept {                      \
    return a.flags = (a.flags | b.flags), a;                                                                              \
}                                                                                          \
constexpr FLAG_TYPE& operator&=(FLAG_TYPE& a, FLAG_TYPE b) noexcept {                      \
    return a.flags = (a.flags & b.flags), a;                                                                              \
}                                                                                          \
constexpr FLAG_TYPE operator^=(FLAG_TYPE& a, FLAG_TYPE b) noexcept {                       \
    return  a.flags = (a.flags ^ b.flags), a;                                                                              \
}                                                                                          \
constexpr FLAG_TYPE operator|(FLAG_BITS a, FLAG_BITS b) noexcept {                         \
    return static_cast<FLAG_TYPE>(static_cast<BASE_TYPE>(a) | static_cast<BASE_TYPE>(b));  \
}                                                                                          \
constexpr FLAG_TYPE operator&(FLAG_BITS a, FLAG_BITS b) noexcept {                         \
    return static_cast<FLAG_TYPE>(static_cast<BASE_TYPE>(a) & static_cast<BASE_TYPE>(b));  \
}                                                                                          \
constexpr FLAG_TYPE operator~(FLAG_BITS key) noexcept {                                    \
    return static_cast<FLAG_TYPE>(~static_cast<BASE_TYPE>(key));                           \
}                                                                                          \
constexpr FLAG_TYPE operator^(FLAG_BITS a, FLAG_BITS b) noexcept {                         \
    return static_cast<FLAG_TYPE>(static_cast<BASE_TYPE>(a) ^ static_cast<BASE_TYPE>(b));  \
}                                                                                          \

DECLARE_ENUM_FLAG_OPERATORS(VkFramebufferCreateFlags, VkFramebufferCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkQueryPoolCreateFlags, VkQueryPoolCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkRenderPassCreateFlags, VkRenderPassCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkSamplerCreateFlags, VkSamplerCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkPipelineLayoutCreateFlags, VkPipelineLayoutCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkPipelineCacheCreateFlags, VkPipelineCacheCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkPipelineDepthStencilStateCreateFlags, VkPipelineDepthStencilStateCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkPipelineDynamicStateCreateFlags, VkPipelineDynamicStateCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkPipelineColorBlendStateCreateFlags, VkPipelineColorBlendStateCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkPipelineMultisampleStateCreateFlags, VkPipelineMultisampleStateCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkPipelineRasterizationStateCreateFlags, VkPipelineRasterizationStateCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkPipelineViewportStateCreateFlags, VkPipelineViewportStateCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkPipelineTessellationStateCreateFlags, VkPipelineTessellationStateCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkPipelineInputAssemblyStateCreateFlags, VkPipelineInputAssemblyStateCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkPipelineVertexInputStateCreateFlags, VkPipelineVertexInputStateCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkPipelineShaderStageCreateFlags, VkPipelineShaderStageCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkDescriptorSetLayoutCreateFlags, VkDescriptorSetLayoutCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkBufferViewCreateFlags, VkBufferViewCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkInstanceCreateFlags, VkInstanceCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkDeviceCreateFlags, VkDeviceCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkDeviceQueueCreateFlags, VkDeviceQueueCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkQueueFlags, VkQueueFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkMemoryPropertyFlags, VkMemoryPropertyFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkMemoryHeapFlags, VkMemoryHeapFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkAccessFlags, VkAccessFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkBufferUsageFlags, VkBufferUsageFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkBufferCreateFlags, VkBufferCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkShaderStageFlags, VkShaderStageFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkImageUsageFlags, VkImageUsageFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkImageCreateFlags, VkImageCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkImageViewCreateFlags, VkImageViewCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkPipelineCreateFlags, VkPipelineCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkColorComponentFlags, VkColorComponentFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkFenceCreateFlags, VkFenceCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkSemaphoreCreateFlags, VkSemaphoreCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkFormatFeatureFlags, VkFormatFeatureFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkQueryControlFlags, VkQueryControlFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkQueryResultFlags, VkQueryResultFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkShaderModuleCreateFlags, VkShaderModuleCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkEventCreateFlags, VkEventCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkCommandPoolCreateFlags, VkCommandPoolCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkCommandPoolResetFlags, VkCommandPoolResetFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkCommandBufferResetFlags, VkCommandBufferResetFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkCommandBufferUsageFlags, VkCommandBufferUsageFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkQueryPipelineStatisticFlags, VkQueryPipelineStatisticFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkMemoryMapFlags, VkMemoryMapFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkImageAspectFlags, VkImageAspectFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkSparseMemoryBindFlags, VkSparseMemoryBindFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkSparseImageFormatFlags, VkSparseImageFormatFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkSubpassDescriptionFlags, VkSubpassDescriptionFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkPipelineStageFlags, VkPipelineStageFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkSampleCountFlags, VkSampleCountFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkAttachmentDescriptionFlags, VkAttachmentDescriptionFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkStencilFaceFlags, VkStencilFaceFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkCullModeFlags, VkCullModeFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkDescriptorPoolCreateFlags, VkDescriptorPoolCreateFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkDescriptorPoolResetFlags, VkDescriptorPoolResetFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkDependencyFlags, VkDependencyFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkSubgroupFeatureFlags, VkSubgroupFeatureFlagBits, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkIndirectCommandsLayoutUsageFlagsNV, VkIndirectCommandsLayoutUsageFlagBitsNV, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkIndirectStateFlagsNV, VkIndirectStateFlagBitsNV, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkGeometryFlagsKHR, VkGeometryFlagBitsKHR, uint32_t)
using VkGeometryFlagsNV = VkGeometryFlagsKHR;
DECLARE_ENUM_FLAG_OPERATORS(VkGeometryInstanceFlagsKHR, VkGeometryInstanceFlagBitsKHR, uint32_t)
using VkGeometryInstanceFlagsNV = VkGeometryInstanceFlagsKHR;
DECLARE_ENUM_FLAG_OPERATORS(VkBuildAccelerationStructureFlagsKHR, VkBuildAccelerationStructureFlagBitsKHR, uint32_t)
using VkBuildAccelerationStructureFlagsNV = VkBuildAccelerationStructureFlagsKHR;
DECLARE_ENUM_FLAG_OPERATORS(VkPrivateDataSlotCreateFlagsEXT, VkPrivateDataSlotCreateFlagBitsEXT, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkAccelerationStructureCreateFlagsKHR, VkAccelerationStructureCreateFlagBitsKHR, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkDescriptorUpdateTemplateCreateFlags, VkDescriptorUpdateTemplateCreateFlagBits, uint32_t)
using VkDescriptorUpdateTemplateCreateFlagsKHR = VkDescriptorUpdateTemplateCreateFlags;
DECLARE_ENUM_FLAG_OPERATORS(VkPipelineCreationFeedbackFlagsEXT, VkPipelineCreationFeedbackFlagBitsEXT, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkPerformanceCounterDescriptionFlagsKHR, VkPerformanceCounterDescriptionFlagBitsKHR, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkAcquireProfilingLockFlagsKHR, VkAcquireProfilingLockFlagBitsKHR, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkSemaphoreWaitFlags, VkSemaphoreWaitFlagBits, uint32_t)
using VkSemaphoreWaitFlagsKHR = VkSemaphoreWaitFlags;
DECLARE_ENUM_FLAG_OPERATORS(VkPipelineCompilerControlFlagsAMD, VkPipelineCompilerControlFlagBitsAMD, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkShaderCorePropertiesFlagsAMD, VkShaderCorePropertiesFlagBitsAMD, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkDeviceDiagnosticsConfigFlagsNV, VkDeviceDiagnosticsConfigFlagBitsNV, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkCompositeAlphaFlagsKHR, VkCompositeAlphaFlagBitsKHR, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkDisplayPlaneAlphaFlagsKHR, VkDisplayPlaneAlphaFlagBitsKHR, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkSurfaceTransformFlagsKHR, VkSurfaceTransformFlagBitsKHR, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkSwapchainCreateFlagsKHR, VkSwapchainCreateFlagBitsKHR, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkDisplayModeCreateFlagsKHR, VkDisplayModeCreateFlagBitsKHR, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkDisplaySurfaceCreateFlagsKHR, VkDisplaySurfaceCreateFlagBitsKHR, uint32_t)
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
DECLARE_ENUM_FLAG_OPERATORS(VkAndroidSurfaceCreateFlagsKHR, VkAndroidSurfaceCreateFlagBitsKHR, uint32_t)
#endif // defined(VK_USE_PLATFORM_ANDROID_KHR)
#if defined(VK_USE_PLATFORM_VI_NN)
DECLARE_ENUM_FLAG_OPERATORS(VkViSurfaceCreateFlagsNN, VkViSurfaceCreateFlagBitsNN, uint32_t)
#endif // defined(VK_USE_PLATFORM_VI_NN)
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
DECLARE_ENUM_FLAG_OPERATORS(VkWaylandSurfaceCreateFlagsKHR, VkWaylandSurfaceCreateFlagBitsKHR, uint32_t)
#endif // defined(VK_USE_PLATFORM_WAYLAND_KHR)
#if defined(VK_USE_PLATFORM_WIN32_KHR)
DECLARE_ENUM_FLAG_OPERATORS(VkWin32SurfaceCreateFlagsKHR, VkWin32SurfaceCreateFlagBitsKHR, uint32_t)
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
#if defined(VK_USE_PLATFORM_XLIB_KHR)
DECLARE_ENUM_FLAG_OPERATORS(VkXlibSurfaceCreateFlagsKHR, VkXlibSurfaceCreateFlagBitsKHR, uint32_t)
#endif // defined(VK_USE_PLATFORM_XLIB_KHR)
#if defined(VK_USE_PLATFORM_XCB_KHR)
DECLARE_ENUM_FLAG_OPERATORS(VkXcbSurfaceCreateFlagsKHR, VkXcbSurfaceCreateFlagBitsKHR, uint32_t)
#endif // defined(VK_USE_PLATFORM_XCB_KHR)
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
DECLARE_ENUM_FLAG_OPERATORS(VkDirectFBSurfaceCreateFlagsEXT, VkDirectFBSurfaceCreateFlagBitsEXT, uint32_t)
#endif // defined(VK_USE_PLATFORM_DIRECTFB_EXT)
#if defined(VK_USE_PLATFORM_IOS_MVK)
DECLARE_ENUM_FLAG_OPERATORS(VkIOSSurfaceCreateFlagsMVK, VkIOSSurfaceCreateFlagBitsMVK, uint32_t)
#endif // defined(VK_USE_PLATFORM_IOS_MVK)
#if defined(VK_USE_PLATFORM_MACOS_MVK)
DECLARE_ENUM_FLAG_OPERATORS(VkMacOSSurfaceCreateFlagsMVK, VkMacOSSurfaceCreateFlagBitsMVK, uint32_t)
#endif // defined(VK_USE_PLATFORM_MACOS_MVK)
#if defined(VK_USE_PLATFORM_METAL_EXT)
DECLARE_ENUM_FLAG_OPERATORS(VkMetalSurfaceCreateFlagsEXT, VkMetalSurfaceCreateFlagBitsEXT, uint32_t)
#endif // defined(VK_USE_PLATFORM_METAL_EXT)
#if defined(VK_USE_PLATFORM_FUCHSIA)
DECLARE_ENUM_FLAG_OPERATORS(VkImagePipeSurfaceCreateFlagsFUCHSIA, VkImagePipeSurfaceCreateFlagBitsFUCHSIA, uint32_t)
#endif // defined(VK_USE_PLATFORM_FUCHSIA)
#if defined(VK_USE_PLATFORM_GGP)
DECLARE_ENUM_FLAG_OPERATORS(VkStreamDescriptorSurfaceCreateFlagsGGP, VkStreamDescriptorSurfaceCreateFlagBitsGGP, uint32_t)
#endif // defined(VK_USE_PLATFORM_GGP)
DECLARE_ENUM_FLAG_OPERATORS(VkHeadlessSurfaceCreateFlagsEXT, VkHeadlessSurfaceCreateFlagBitsEXT, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkPeerMemoryFeatureFlags, VkPeerMemoryFeatureFlagBits, uint32_t)
using VkPeerMemoryFeatureFlagsKHR = VkPeerMemoryFeatureFlags;
DECLARE_ENUM_FLAG_OPERATORS(VkMemoryAllocateFlags, VkMemoryAllocateFlagBits, uint32_t)
using VkMemoryAllocateFlagsKHR = VkMemoryAllocateFlags;
DECLARE_ENUM_FLAG_OPERATORS(VkDeviceGroupPresentModeFlagsKHR, VkDeviceGroupPresentModeFlagBitsKHR, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkDebugReportFlagsEXT, VkDebugReportFlagBitsEXT, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkCommandPoolTrimFlags, VkCommandPoolTrimFlagBits, uint32_t)
using VkCommandPoolTrimFlagsKHR = VkCommandPoolTrimFlags;
DECLARE_ENUM_FLAG_OPERATORS(VkExternalMemoryHandleTypeFlagsNV, VkExternalMemoryHandleTypeFlagBitsNV, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkExternalMemoryFeatureFlagsNV, VkExternalMemoryFeatureFlagBitsNV, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkExternalMemoryHandleTypeFlags, VkExternalMemoryHandleTypeFlagBits, uint32_t)
using VkExternalMemoryHandleTypeFlagsKHR = VkExternalMemoryHandleTypeFlags;
DECLARE_ENUM_FLAG_OPERATORS(VkExternalMemoryFeatureFlags, VkExternalMemoryFeatureFlagBits, uint32_t)
using VkExternalMemoryFeatureFlagsKHR = VkExternalMemoryFeatureFlags;
DECLARE_ENUM_FLAG_OPERATORS(VkExternalSemaphoreHandleTypeFlags, VkExternalSemaphoreHandleTypeFlagBits, uint32_t)
using VkExternalSemaphoreHandleTypeFlagsKHR = VkExternalSemaphoreHandleTypeFlags;
DECLARE_ENUM_FLAG_OPERATORS(VkExternalSemaphoreFeatureFlags, VkExternalSemaphoreFeatureFlagBits, uint32_t)
using VkExternalSemaphoreFeatureFlagsKHR = VkExternalSemaphoreFeatureFlags;
DECLARE_ENUM_FLAG_OPERATORS(VkSemaphoreImportFlags, VkSemaphoreImportFlagBits, uint32_t)
using VkSemaphoreImportFlagsKHR = VkSemaphoreImportFlags;
DECLARE_ENUM_FLAG_OPERATORS(VkExternalFenceHandleTypeFlags, VkExternalFenceHandleTypeFlagBits, uint32_t)
using VkExternalFenceHandleTypeFlagsKHR = VkExternalFenceHandleTypeFlags;
DECLARE_ENUM_FLAG_OPERATORS(VkExternalFenceFeatureFlags, VkExternalFenceFeatureFlagBits, uint32_t)
using VkExternalFenceFeatureFlagsKHR = VkExternalFenceFeatureFlags;
DECLARE_ENUM_FLAG_OPERATORS(VkFenceImportFlags, VkFenceImportFlagBits, uint32_t)
using VkFenceImportFlagsKHR = VkFenceImportFlags;
DECLARE_ENUM_FLAG_OPERATORS(VkSurfaceCounterFlagsEXT, VkSurfaceCounterFlagBitsEXT, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkPipelineViewportSwizzleStateCreateFlagsNV, VkPipelineViewportSwizzleStateCreateFlagBitsNV, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkPipelineDiscardRectangleStateCreateFlagsEXT, VkPipelineDiscardRectangleStateCreateFlagBitsEXT, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkPipelineCoverageToColorStateCreateFlagsNV, VkPipelineCoverageToColorStateCreateFlagBitsNV, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkPipelineCoverageModulationStateCreateFlagsNV, VkPipelineCoverageModulationStateCreateFlagBitsNV, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkPipelineCoverageReductionStateCreateFlagsNV, VkPipelineCoverageReductionStateCreateFlagBitsNV, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkValidationCacheCreateFlagsEXT, VkValidationCacheCreateFlagBitsEXT, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkDebugUtilsMessageSeverityFlagsEXT, VkDebugUtilsMessageSeverityFlagBitsEXT, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkDebugUtilsMessageTypeFlagsEXT, VkDebugUtilsMessageTypeFlagBitsEXT, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkDebugUtilsMessengerCreateFlagsEXT, VkDebugUtilsMessengerCreateFlagBitsEXT, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkDebugUtilsMessengerCallbackDataFlagsEXT, VkDebugUtilsMessengerCallbackDataFlagBitsEXT, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkDeviceMemoryReportFlagsEXT, VkDeviceMemoryReportFlagBitsEXT, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkPipelineRasterizationConservativeStateCreateFlagsEXT, VkPipelineRasterizationConservativeStateCreateFlagBitsEXT, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkDescriptorBindingFlags, VkDescriptorBindingFlagBits, uint32_t)
using VkDescriptorBindingFlagsEXT = VkDescriptorBindingFlags;
DECLARE_ENUM_FLAG_OPERATORS(VkConditionalRenderingFlagsEXT, VkConditionalRenderingFlagBitsEXT, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkResolveModeFlags, VkResolveModeFlagBits, uint32_t)
using VkResolveModeFlagsKHR = VkResolveModeFlags;
DECLARE_ENUM_FLAG_OPERATORS(VkPipelineRasterizationStateStreamCreateFlagsEXT, VkPipelineRasterizationStateStreamCreateFlagBitsEXT, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkPipelineRasterizationDepthClipStateCreateFlagsEXT, VkPipelineRasterizationDepthClipStateCreateFlagBitsEXT, uint32_t)
DECLARE_ENUM_FLAG_OPERATORS(VkToolPurposeFlagsEXT, VkToolPurposeFlagBitsEXT, uint32_t)
VK_DEFINE_HANDLE(VkInstance)
VK_DEFINE_HANDLE(VkPhysicalDevice)
VK_DEFINE_HANDLE(VkDevice)
VK_DEFINE_HANDLE(VkQueue)
VK_DEFINE_HANDLE(VkCommandBuffer)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDeviceMemory)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkCommandPool)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkBuffer)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkBufferView)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkImage)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkImageView)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkShaderModule)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPipeline)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPipelineLayout)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSampler)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorSet)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorSetLayout)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorPool)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkFence)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSemaphore)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkEvent)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkQueryPool)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkFramebuffer)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkRenderPass)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPipelineCache)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkIndirectCommandsLayoutNV)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorUpdateTemplate)
using VkDescriptorUpdateTemplateKHR = VkDescriptorUpdateTemplate;
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSamplerYcbcrConversion)
using VkSamplerYcbcrConversionKHR = VkSamplerYcbcrConversion;
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkValidationCacheEXT)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkAccelerationStructureKHR)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkAccelerationStructureNV)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPerformanceConfigurationINTEL)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDeferredOperationKHR)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPrivateDataSlotEXT)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDisplayKHR)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDisplayModeKHR)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSurfaceKHR)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSwapchainKHR)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDebugReportCallbackEXT)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDebugUtilsMessengerEXT)
struct VkDebugUtilsMessengerCallbackDataEXT;
struct VkDeviceMemoryReportCallbackDataEXT;
typedef void (VKAPI_PTR * PFN_vkInternalAllocationNotification )(
     void *                                       pUserData,
     size_t                                       size,
     VkInternalAllocationType                     allocationType,
     VkSystemAllocationScope                      allocationScope);
typedef void (VKAPI_PTR * PFN_vkInternalFreeNotification )(
     void *                                       pUserData,
     size_t                                       size,
     VkInternalAllocationType                     allocationType,
     VkSystemAllocationScope                      allocationScope);
typedef void* (VKAPI_PTR * PFN_vkReallocationFunction )(
     void *                                       pUserData,
     void *                                       pOriginal,
     size_t                                       size,
     size_t                                       alignment,
     VkSystemAllocationScope                      allocationScope);
typedef void* (VKAPI_PTR * PFN_vkAllocationFunction )(
     void *                                       pUserData,
     size_t                                       size,
     size_t                                       alignment,
     VkSystemAllocationScope                      allocationScope);
typedef void (VKAPI_PTR * PFN_vkFreeFunction )(
     void *                                       pUserData,
     void *                                       pMemory);
typedef void (VKAPI_PTR * PFN_vkVoidFunction )(void);
typedef VkBool32 (VKAPI_PTR * PFN_vkDebugReportCallbackEXT )(
     VkDebugReportFlagsEXT                        flags,
     VkDebugReportObjectTypeEXT                   objectType,
     uint64_t                                     object,
     size_t                                       location,
     int32_t                                      messageCode,
    const  char *                                 pLayerPrefix,
    const  char *                                 pMessage,
     void *                                       pUserData);
typedef VkBool32 (VKAPI_PTR * PFN_vkDebugUtilsMessengerCallbackEXT )(
     VkDebugUtilsMessageSeverityFlagBitsEXT            messageSeverity,
     VkDebugUtilsMessageTypeFlagsEXT                   messageTypes,
    const  VkDebugUtilsMessengerCallbackDataEXT *      pCallbackData,
     void *                                            pUserData);
typedef void (VKAPI_PTR * PFN_vkDeviceMemoryReportCallbackEXT )(
    const  VkDeviceMemoryReportCallbackDataEXT *  pCallbackData,
     void *                                       pUserData);
struct VkBaseOutStructure {
    VkStructureType   sType{};
    struct  VkBaseOutStructure *  pNext{};
};
struct VkBaseInStructure {
    VkStructureType   sType{};
    const struct  VkBaseInStructure *  pNext{};
};
struct VkOffset2D {
    int32_t          x{};
    int32_t          y{};
};
struct VkOffset3D {
    int32_t          x{};
    int32_t          y{};
    int32_t          z{};
};
struct VkExtent2D {
    uint32_t          width{};
    uint32_t          height{};
};
struct VkExtent3D {
    uint32_t          width{};
    uint32_t          height{};
    uint32_t          depth{};
};
struct VkViewport {
    float   x{};
    float   y{};
    float   width{};
    float   height{};
    float                         minDepth{};
    float                         maxDepth{};
};
struct VkRect2D {
    VkOffset2D       offset{};
    VkExtent2D       extent{};
};
struct VkClearRect {
    VkRect2D         rect{};
    uint32_t         baseArrayLayer{};
    uint32_t         layerCount{};
};
struct VkComponentMapping {
    VkComponentSwizzle   r{};
    VkComponentSwizzle   g{};
    VkComponentSwizzle   b{};
    VkComponentSwizzle   a{};
};
struct VkPhysicalDeviceSparseProperties {
    VkBool32                 residencyStandard2DBlockShape{};
    VkBool32                 residencyStandard2DMultisampleBlockShape{};
    VkBool32                 residencyStandard3DBlockShape{};
    VkBool32                 residencyAlignedMipSize{};
    VkBool32                 residencyNonResidentStrict{};
};
struct VkPhysicalDeviceLimits {
    uint32_t                 maxImageDimension1D{};
    uint32_t                 maxImageDimension2D{};
    uint32_t                 maxImageDimension3D{};
    uint32_t                 maxImageDimensionCube{};
    uint32_t                 maxImageArrayLayers{};
    uint32_t                 maxTexelBufferElements{};
    uint32_t                 maxUniformBufferRange{};
    uint32_t                 maxStorageBufferRange{};
    uint32_t                 maxPushConstantsSize{};
    uint32_t                 maxMemoryAllocationCount{};
    uint32_t                 maxSamplerAllocationCount{};
    VkDeviceSize             bufferImageGranularity{};
    VkDeviceSize             sparseAddressSpaceSize{};
    uint32_t                 maxBoundDescriptorSets{};
    uint32_t                 maxPerStageDescriptorSamplers{};
    uint32_t                 maxPerStageDescriptorUniformBuffers{};
    uint32_t                 maxPerStageDescriptorStorageBuffers{};
    uint32_t                 maxPerStageDescriptorSampledImages{};
    uint32_t                 maxPerStageDescriptorStorageImages{};
    uint32_t                 maxPerStageDescriptorInputAttachments{};
    uint32_t                 maxPerStageResources{};
    uint32_t                 maxDescriptorSetSamplers{};
    uint32_t                 maxDescriptorSetUniformBuffers{};
    uint32_t                 maxDescriptorSetUniformBuffersDynamic{};
    uint32_t                 maxDescriptorSetStorageBuffers{};
    uint32_t                 maxDescriptorSetStorageBuffersDynamic{};
    uint32_t                 maxDescriptorSetSampledImages{};
    uint32_t                 maxDescriptorSetStorageImages{};
    uint32_t                 maxDescriptorSetInputAttachments{};
    uint32_t                 maxVertexInputAttributes{};
    uint32_t                 maxVertexInputBindings{};
    uint32_t                 maxVertexInputAttributeOffset{};
    uint32_t                 maxVertexInputBindingStride{};
    uint32_t                 maxVertexOutputComponents{};
    uint32_t                 maxTessellationGenerationLevel{};
    uint32_t                 maxTessellationPatchSize{};
    uint32_t                 maxTessellationControlPerVertexInputComponents{};
    uint32_t                 maxTessellationControlPerVertexOutputComponents{};
    uint32_t                 maxTessellationControlPerPatchOutputComponents{};
    uint32_t                 maxTessellationControlTotalOutputComponents{};
    uint32_t                 maxTessellationEvaluationInputComponents{};
    uint32_t                 maxTessellationEvaluationOutputComponents{};
    uint32_t                 maxGeometryShaderInvocations{};
    uint32_t                 maxGeometryInputComponents{};
    uint32_t                 maxGeometryOutputComponents{};
    uint32_t                 maxGeometryOutputVertices{};
    uint32_t                 maxGeometryTotalOutputComponents{};
    uint32_t                 maxFragmentInputComponents{};
    uint32_t                 maxFragmentOutputAttachments{};
    uint32_t                 maxFragmentDualSrcAttachments{};
    uint32_t                 maxFragmentCombinedOutputResources{};
    uint32_t                 maxComputeSharedMemorySize{};
    uint32_t                 maxComputeWorkGroupCount [3]{};
    uint32_t                 maxComputeWorkGroupInvocations{};
    uint32_t                 maxComputeWorkGroupSize [3]{};
    uint32_t                 subPixelPrecisionBits{};
    uint32_t                 subTexelPrecisionBits{};
    uint32_t                 mipmapPrecisionBits{};
    uint32_t                 maxDrawIndexedIndexValue{};
    uint32_t                 maxDrawIndirectCount{};
    float                    maxSamplerLodBias{};
    float                    maxSamplerAnisotropy{};
    uint32_t                 maxViewports{};
    uint32_t                 maxViewportDimensions [2]{};
    float                    viewportBoundsRange [2]{};
    uint32_t                 viewportSubPixelBits{};
    size_t                   minMemoryMapAlignment{};
    VkDeviceSize             minTexelBufferOffsetAlignment{};
    VkDeviceSize             minUniformBufferOffsetAlignment{};
    VkDeviceSize             minStorageBufferOffsetAlignment{};
    int32_t                  minTexelOffset{};
    uint32_t                 maxTexelOffset{};
    int32_t                  minTexelGatherOffset{};
    uint32_t                 maxTexelGatherOffset{};
    float                    minInterpolationOffset{};
    float                    maxInterpolationOffset{};
    uint32_t                 subPixelInterpolationOffsetBits{};
    uint32_t                 maxFramebufferWidth{};
    uint32_t                 maxFramebufferHeight{};
    uint32_t                 maxFramebufferLayers{};
    VkSampleCountFlags       framebufferColorSampleCounts{};
    VkSampleCountFlags       framebufferDepthSampleCounts{};
    VkSampleCountFlags       framebufferStencilSampleCounts{};
    VkSampleCountFlags       framebufferNoAttachmentsSampleCounts{};
    uint32_t                 maxColorAttachments{};
    VkSampleCountFlags       sampledImageColorSampleCounts{};
    VkSampleCountFlags       sampledImageIntegerSampleCounts{};
    VkSampleCountFlags       sampledImageDepthSampleCounts{};
    VkSampleCountFlags       sampledImageStencilSampleCounts{};
    VkSampleCountFlags       storageImageSampleCounts{};
    uint32_t                 maxSampleMaskWords{};
    VkBool32                 timestampComputeAndGraphics{};
    float                    timestampPeriod{};
    uint32_t                 maxClipDistances{};
    uint32_t                 maxCullDistances{};
    uint32_t                 maxCombinedClipAndCullDistances{};
    uint32_t                 discreteQueuePriorities{};
    float                    pointSizeRange [2]{};
    float                    lineWidthRange [2]{};
    float                    pointSizeGranularity{};
    float                    lineWidthGranularity{};
    VkBool32                 strictLines{};
    VkBool32                 standardSampleLocations{};
    VkDeviceSize             optimalBufferCopyOffsetAlignment{};
    VkDeviceSize             optimalBufferCopyRowPitchAlignment{};
    VkDeviceSize             nonCoherentAtomSize{};
};
struct VkPhysicalDeviceProperties {
    uint32_t         apiVersion{};
    uint32_t         driverVersion{};
    uint32_t         vendorID{};
    uint32_t         deviceID{};
    VkPhysicalDeviceType   deviceType{};
    char             deviceName [ VK_MAX_PHYSICAL_DEVICE_NAME_SIZE ]{};
    uint8_t          pipelineCacheUUID [ VK_UUID_SIZE ]{};
    VkPhysicalDeviceLimits   limits{};
    VkPhysicalDeviceSparseProperties   sparseProperties{};
};
struct VkExtensionProperties {
    char              extensionName [ VK_MAX_EXTENSION_NAME_SIZE ]{};
    uint32_t          specVersion{};
};
struct VkLayerProperties {
    char              layerName [ VK_MAX_EXTENSION_NAME_SIZE ]{};
    uint32_t          specVersion{};
    uint32_t          implementationVersion{};
    char              description [ VK_MAX_DESCRIPTION_SIZE ]{};
};
struct VkApplicationInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_APPLICATION_INFO;
    const  void *      pNext{};
    const  char *      pApplicationName{};
    uint32_t          applicationVersion{};
    const  char *      pEngineName{};
    uint32_t          engineVersion{};
    uint32_t          apiVersion{};
};
struct VkAllocationCallbacks {
    void *            pUserData{};
    PFN_vkAllocationFunction     pfnAllocation{};
    PFN_vkReallocationFunction   pfnReallocation{};
    PFN_vkFreeFunction      pfnFree{};
    PFN_vkInternalAllocationNotification   pfnInternalAllocation{};
    PFN_vkInternalFreeNotification   pfnInternalFree{};
};
struct VkDeviceQueueCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO;
    const  void *      pNext{};
    VkDeviceQueueCreateFlags      flags{};
    uint32_t          queueFamilyIndex{};
    uint32_t          queueCount{};
    const  float *     pQueuePriorities{};
};
struct VkPhysicalDeviceFeatures {
    VkBool32                 robustBufferAccess{};
    VkBool32                 fullDrawIndexUint32{};
    VkBool32                 imageCubeArray{};
    VkBool32                 independentBlend{};
    VkBool32                 geometryShader{};
    VkBool32                 tessellationShader{};
    VkBool32                 sampleRateShading{};
    VkBool32                 dualSrcBlend{};
    VkBool32                 logicOp{};
    VkBool32                 multiDrawIndirect{};
    VkBool32                 drawIndirectFirstInstance{};
    VkBool32                 depthClamp{};
    VkBool32                 depthBiasClamp{};
    VkBool32                 fillModeNonSolid{};
    VkBool32                 depthBounds{};
    VkBool32                 wideLines{};
    VkBool32                 largePoints{};
    VkBool32                 alphaToOne{};
    VkBool32                 multiViewport{};
    VkBool32                 samplerAnisotropy{};
    VkBool32                 textureCompressionETC2{};
    VkBool32                 textureCompressionASTC_LDR{};
    VkBool32                 textureCompressionBC{};
    VkBool32                 occlusionQueryPrecise{};
    VkBool32                 pipelineStatisticsQuery{};
    VkBool32                 vertexPipelineStoresAndAtomics{};
    VkBool32                 fragmentStoresAndAtomics{};
    VkBool32                 shaderTessellationAndGeometryPointSize{};
    VkBool32                 shaderImageGatherExtended{};
    VkBool32                 shaderStorageImageExtendedFormats{};
    VkBool32                 shaderStorageImageMultisample{};
    VkBool32                 shaderStorageImageReadWithoutFormat{};
    VkBool32                 shaderStorageImageWriteWithoutFormat{};
    VkBool32                 shaderUniformBufferArrayDynamicIndexing{};
    VkBool32                 shaderSampledImageArrayDynamicIndexing{};
    VkBool32                 shaderStorageBufferArrayDynamicIndexing{};
    VkBool32                 shaderStorageImageArrayDynamicIndexing{};
    VkBool32                 shaderClipDistance{};
    VkBool32                 shaderCullDistance{};
    VkBool32                 shaderFloat64{};
    VkBool32                 shaderInt64{};
    VkBool32                 shaderInt16{};
    VkBool32                 shaderResourceResidency{};
    VkBool32                 shaderResourceMinLod{};
    VkBool32                 sparseBinding{};
    VkBool32                 sparseResidencyBuffer{};
    VkBool32                 sparseResidencyImage2D{};
    VkBool32                 sparseResidencyImage3D{};
    VkBool32                 sparseResidency2Samples{};
    VkBool32                 sparseResidency4Samples{};
    VkBool32                 sparseResidency8Samples{};
    VkBool32                 sparseResidency16Samples{};
    VkBool32                 sparseResidencyAliased{};
    VkBool32                 variableMultisampleRate{};
    VkBool32                 inheritedQueries{};
};
struct VkDeviceCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO;
    const  void *      pNext{};
    VkDeviceCreateFlags      flags{};
    uint32_t          queueCreateInfoCount{};
    const  VkDeviceQueueCreateInfo *  pQueueCreateInfos{};
    uint32_t                 enabledLayerCount{};
    const  char * const*       ppEnabledLayerNames{};
    uint32_t                 enabledExtensionCount{};
    const  char * const*       ppEnabledExtensionNames{};
    const  VkPhysicalDeviceFeatures *  pEnabledFeatures{};
};
struct VkInstanceCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
    const  void *      pNext{};
    VkInstanceCreateFlags    flags{};
    const  VkApplicationInfo *  pApplicationInfo{};
    uint32_t                 enabledLayerCount{};
    const  char * const*       ppEnabledLayerNames{};
    uint32_t                 enabledExtensionCount{};
    const  char * const*       ppEnabledExtensionNames{};
};
struct VkQueueFamilyProperties {
    VkQueueFlags             queueFlags{};
    uint32_t                 queueCount{};
    uint32_t                 timestampValidBits{};
    VkExtent3D               minImageTransferGranularity{};
};
struct VkMemoryHeap {
    VkDeviceSize             size{};
    VkMemoryHeapFlags        flags{};
};
struct VkMemoryType {
    VkMemoryPropertyFlags    propertyFlags{};
    uint32_t                 heapIndex{};
};
struct VkPhysicalDeviceMemoryProperties {
    uint32_t                 memoryTypeCount{};
    VkMemoryType             memoryTypes [ VK_MAX_MEMORY_TYPES ]{};
    uint32_t                 memoryHeapCount{};
    VkMemoryHeap             memoryHeaps [ VK_MAX_MEMORY_HEAPS ]{};
};
struct VkMemoryAllocateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
    const  void *             pNext{};
    VkDeviceSize             allocationSize{};
    uint32_t                 memoryTypeIndex{};
};
struct VkMemoryRequirements {
    VkDeviceSize             size{};
    VkDeviceSize             alignment{};
    uint32_t                 memoryTypeBits{};
};
struct VkSparseImageFormatProperties {
    VkImageAspectFlags       aspectMask{};
    VkExtent3D               imageGranularity{};
    VkSparseImageFormatFlags   flags{};
};
struct VkSparseImageMemoryRequirements {
    VkSparseImageFormatProperties   formatProperties{};
    uint32_t                 imageMipTailFirstLod{};
    VkDeviceSize             imageMipTailSize{};
    VkDeviceSize             imageMipTailOffset{};
    VkDeviceSize             imageMipTailStride{};
};
struct VkMappedMemoryRange {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE;
    const  void *             pNext{};
    VkDeviceMemory           memory{};
    VkDeviceSize             offset{};
    VkDeviceSize             size{};
};
struct VkFormatProperties {
    VkFormatFeatureFlags     linearTilingFeatures{};
    VkFormatFeatureFlags     optimalTilingFeatures{};
    VkFormatFeatureFlags     bufferFeatures{};
};
struct VkImageFormatProperties {
    VkExtent3D               maxExtent{};
    uint32_t                 maxMipLevels{};
    uint32_t                 maxArrayLayers{};
    VkSampleCountFlags       sampleCounts{};
    VkDeviceSize             maxResourceSize{};
};
struct VkDescriptorBufferInfo {
    VkBuffer                 buffer{};
    VkDeviceSize             offset{};
    VkDeviceSize             range{};
};
struct VkDescriptorImageInfo {
    VkSampler         sampler{};
    VkImageView       imageView{};
    VkImageLayout     imageLayout{};
};
struct VkWriteDescriptorSet {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
    const  void *             pNext{};
    VkDescriptorSet          dstSet{};
    uint32_t                 dstBinding{};
    uint32_t                 dstArrayElement{};
    uint32_t                 descriptorCount{};
    VkDescriptorType         descriptorType{};
    const  VkDescriptorImageInfo *  pImageInfo{};
    const  VkDescriptorBufferInfo *  pBufferInfo{};
    const  VkBufferView *     pTexelBufferView{};
};
struct VkCopyDescriptorSet {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET;
    const  void *             pNext{};
    VkDescriptorSet          srcSet{};
    uint32_t                 srcBinding{};
    uint32_t                 srcArrayElement{};
    VkDescriptorSet          dstSet{};
    uint32_t                 dstBinding{};
    uint32_t                 dstArrayElement{};
    uint32_t                 descriptorCount{};
};
struct VkBufferCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;
    const  void *             pNext{};
    VkBufferCreateFlags      flags{};
    VkDeviceSize             size{};
    VkBufferUsageFlags       usage{};
    VkSharingMode            sharingMode{};
    uint32_t                 queueFamilyIndexCount{};
    const  uint32_t *         pQueueFamilyIndices{};
};
struct VkBufferViewCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO;
    const  void *             pNext{};
    VkBufferViewCreateFlags flags{};
    VkBuffer                 buffer{};
    VkFormat                 format{};
    VkDeviceSize             offset{};
    VkDeviceSize             range{};
};
struct VkImageSubresource {
    VkImageAspectFlags       aspectMask{};
    uint32_t                 mipLevel{};
    uint32_t                 arrayLayer{};
};
struct VkImageSubresourceLayers {
    VkImageAspectFlags       aspectMask{};
    uint32_t                 mipLevel{};
    uint32_t                 baseArrayLayer{};
    uint32_t                 layerCount{};
};
struct VkImageSubresourceRange {
    VkImageAspectFlags       aspectMask{};
    uint32_t                 baseMipLevel{};
    uint32_t                 levelCount{};
    uint32_t                 baseArrayLayer{};
    uint32_t                 layerCount{};
};
struct VkMemoryBarrier {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_MEMORY_BARRIER;
    const  void *             pNext{};
    VkAccessFlags            srcAccessMask{};
    VkAccessFlags            dstAccessMask{};
};
struct VkBufferMemoryBarrier {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER;
    const  void *             pNext{};
    VkAccessFlags            srcAccessMask{};
    VkAccessFlags            dstAccessMask{};
    uint32_t                 srcQueueFamilyIndex{};
    uint32_t                 dstQueueFamilyIndex{};
    VkBuffer                 buffer{};
    VkDeviceSize             offset{};
    VkDeviceSize             size{};
};
struct VkImageMemoryBarrier {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;
    const  void *             pNext{};
    VkAccessFlags            srcAccessMask{};
    VkAccessFlags            dstAccessMask{};
    VkImageLayout            oldLayout{};
    VkImageLayout            newLayout{};
    uint32_t                 srcQueueFamilyIndex{};
    uint32_t                 dstQueueFamilyIndex{};
    VkImage                  image{};
    VkImageSubresourceRange   subresourceRange{};
};
struct VkImageCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO;
    const  void *             pNext{};
    VkImageCreateFlags       flags{};
    VkImageType              imageType{};
    VkFormat                 format{};
    VkExtent3D               extent{};
    uint32_t                 mipLevels{};
    uint32_t                 arrayLayers{};
    VkSampleCountFlagBits    samples{};
    VkImageTiling            tiling{};
    VkImageUsageFlags        usage{};
    VkSharingMode            sharingMode{};
    uint32_t                 queueFamilyIndexCount{};
    const  uint32_t *         pQueueFamilyIndices{};
    VkImageLayout            initialLayout{};
};
struct VkSubresourceLayout {
    VkDeviceSize             offset{};
    VkDeviceSize             size{};
    VkDeviceSize             rowPitch{};
    VkDeviceSize             arrayPitch{};
    VkDeviceSize             depthPitch{};
};
struct VkImageViewCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;
    const  void *             pNext{};
    VkImageViewCreateFlags   flags{};
    VkImage                  image{};
    VkImageViewType          viewType{};
    VkFormat                 format{};
    VkComponentMapping       components{};
    VkImageSubresourceRange   subresourceRange{};
};
struct VkBufferCopy {
    VkDeviceSize                         srcOffset{};
    VkDeviceSize                         dstOffset{};
    VkDeviceSize   size{};
};
struct VkSparseMemoryBind {
    VkDeviceSize             resourceOffset{};
    VkDeviceSize             size{};
    VkDeviceMemory           memory{};
    VkDeviceSize             memoryOffset{};
    VkSparseMemoryBindFlags flags{};
};
struct VkSparseImageMemoryBind {
    VkImageSubresource       subresource{};
    VkOffset3D               offset{};
    VkExtent3D               extent{};
    VkDeviceMemory           memory{};
    VkDeviceSize             memoryOffset{};
    VkSparseMemoryBindFlags flags{};
};
struct VkSparseBufferMemoryBindInfo {
    VkBuffer   buffer{};
    uint32_t                 bindCount{};
    const  VkSparseMemoryBind *  pBinds{};
};
struct VkSparseImageOpaqueMemoryBindInfo {
    VkImage   image{};
    uint32_t                 bindCount{};
    const  VkSparseMemoryBind *  pBinds{};
};
struct VkSparseImageMemoryBindInfo {
    VkImage   image{};
    uint32_t                 bindCount{};
    const  VkSparseImageMemoryBind *  pBinds{};
};
struct VkBindSparseInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_BIND_SPARSE_INFO;
    const  void *             pNext{};
    uint32_t                 waitSemaphoreCount{};
    const  VkSemaphore *      pWaitSemaphores{};
    uint32_t                 bufferBindCount{};
    const  VkSparseBufferMemoryBindInfo *  pBufferBinds{};
    uint32_t                 imageOpaqueBindCount{};
    const  VkSparseImageOpaqueMemoryBindInfo *  pImageOpaqueBinds{};
    uint32_t                 imageBindCount{};
    const  VkSparseImageMemoryBindInfo *  pImageBinds{};
    uint32_t                 signalSemaphoreCount{};
    const  VkSemaphore *      pSignalSemaphores{};
};
struct VkImageCopy {
    VkImageSubresourceLayers   srcSubresource{};
    VkOffset3D               srcOffset{};
    VkImageSubresourceLayers   dstSubresource{};
    VkOffset3D               dstOffset{};
    VkExtent3D               extent{};
};
struct VkImageBlit {
    VkImageSubresourceLayers   srcSubresource{};
    VkOffset3D               srcOffsets [2]{};
    VkImageSubresourceLayers   dstSubresource{};
    VkOffset3D               dstOffsets [2]{};
};
struct VkBufferImageCopy {
    VkDeviceSize             bufferOffset{};
    uint32_t                 bufferRowLength{};
    uint32_t                 bufferImageHeight{};
    VkImageSubresourceLayers   imageSubresource{};
    VkOffset3D               imageOffset{};
    VkExtent3D               imageExtent{};
};
struct VkImageResolve {
    VkImageSubresourceLayers   srcSubresource{};
    VkOffset3D               srcOffset{};
    VkImageSubresourceLayers   dstSubresource{};
    VkOffset3D               dstOffset{};
    VkExtent3D               extent{};
};
struct VkShaderModuleCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;
    const  void *             pNext{};
    VkShaderModuleCreateFlags   flags{};
    size_t                   codeSize{};
    const  uint32_t *             pCode{};
};
struct VkDescriptorSetLayoutBinding {
    uint32_t                 binding{};
    VkDescriptorType         descriptorType{};
    uint32_t   descriptorCount{};
    VkShaderStageFlags       stageFlags{};
    const  VkSampler *        pImmutableSamplers{};
};
struct VkDescriptorSetLayoutCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
    const  void *             pNext{};
    VkDescriptorSetLayoutCreateFlags      flags{};
    uint32_t                 bindingCount{};
    const  VkDescriptorSetLayoutBinding *  pBindings{};
};
struct VkDescriptorPoolSize {
    VkDescriptorType         type{};
    uint32_t                 descriptorCount{};
};
struct VkDescriptorPoolCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
    const  void *             pNext{};
    VkDescriptorPoolCreateFlags    flags{};
    uint32_t                 maxSets{};
    uint32_t                 poolSizeCount{};
    const  VkDescriptorPoolSize *  pPoolSizes{};
};
struct VkDescriptorSetAllocateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
    const  void *             pNext{};
    VkDescriptorPool         descriptorPool{};
    uint32_t                 descriptorSetCount{};
    const  VkDescriptorSetLayout *  pSetLayouts{};
};
struct VkSpecializationMapEntry {
    uint32_t                       constantID{};
    uint32_t                       offset{};
    size_t   size{};
};
struct VkSpecializationInfo {
    uint32_t                 mapEntryCount{};
    const  VkSpecializationMapEntry *  pMapEntries{};
    size_t                   dataSize{};
    const  void *             pData{};
};
struct VkPipelineShaderStageCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
    const  void *             pNext{};
    VkPipelineShaderStageCreateFlags      flags{};
    VkShaderStageFlagBits    stage{};
    VkShaderModule           module{};
    const  char *             pName{};
    const  VkSpecializationInfo *  pSpecializationInfo{};
};
struct VkComputePipelineCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO;
    const  void *             pNext{};
    VkPipelineCreateFlags    flags{};
    VkPipelineShaderStageCreateInfo   stage{};
    VkPipelineLayout         layout{};
    VkPipeline        basePipelineHandle{};
    int32_t                  basePipelineIndex{};
};
struct VkVertexInputBindingDescription {
    uint32_t                 binding{};
    uint32_t                 stride{};
    VkVertexInputRate        inputRate{};
};
struct VkVertexInputAttributeDescription {
    uint32_t                 location{};
    uint32_t                 binding{};
    VkFormat                 format{};
    uint32_t                 offset{};
};
struct VkPipelineVertexInputStateCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;
    const  void *             pNext{};
    VkPipelineVertexInputStateCreateFlags      flags{};
    uint32_t                 vertexBindingDescriptionCount{};
    const  VkVertexInputBindingDescription *  pVertexBindingDescriptions{};
    uint32_t                 vertexAttributeDescriptionCount{};
    const  VkVertexInputAttributeDescription *  pVertexAttributeDescriptions{};
};
struct VkPipelineInputAssemblyStateCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
    const  void *             pNext{};
    VkPipelineInputAssemblyStateCreateFlags      flags{};
    VkPrimitiveTopology      topology{};
    VkBool32                 primitiveRestartEnable{};
};
struct VkPipelineTessellationStateCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO;
    const  void *             pNext{};
    VkPipelineTessellationStateCreateFlags      flags{};
    uint32_t                 patchControlPoints{};
};
struct VkPipelineViewportStateCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO;
    const  void *             pNext{};
    VkPipelineViewportStateCreateFlags      flags{};
    uint32_t                 viewportCount{};
    const  VkViewport *       pViewports{};
    uint32_t                 scissorCount{};
    const  VkRect2D *         pScissors{};
};
struct VkPipelineRasterizationStateCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO;
    const  void *  pNext{};
    VkPipelineRasterizationStateCreateFlags      flags{};
    VkBool32                 depthClampEnable{};
    VkBool32                 rasterizerDiscardEnable{};
    VkPolygonMode            polygonMode{};
    VkCullModeFlags          cullMode{};
    VkFrontFace              frontFace{};
    VkBool32                 depthBiasEnable{};
    float                    depthBiasConstantFactor{};
    float                    depthBiasClamp{};
    float                    depthBiasSlopeFactor{};
    float                    lineWidth{};
};
struct VkPipelineMultisampleStateCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;
    const  void *             pNext{};
    VkPipelineMultisampleStateCreateFlags      flags{};
    VkSampleCountFlagBits    rasterizationSamples{};
    VkBool32                 sampleShadingEnable{};
    float                    minSampleShading{};
    const  VkSampleMask *     pSampleMask{};
    VkBool32                 alphaToCoverageEnable{};
    VkBool32                 alphaToOneEnable{};
};
struct VkPipelineColorBlendAttachmentState {
    VkBool32                 blendEnable{};
    VkBlendFactor            srcColorBlendFactor{};
    VkBlendFactor            dstColorBlendFactor{};
    VkBlendOp                colorBlendOp{};
    VkBlendFactor            srcAlphaBlendFactor{};
    VkBlendFactor            dstAlphaBlendFactor{};
    VkBlendOp                alphaBlendOp{};
    VkColorComponentFlags    colorWriteMask{};
};
struct VkPipelineColorBlendStateCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
    const  void *             pNext{};
    VkPipelineColorBlendStateCreateFlags      flags{};
    VkBool32                 logicOpEnable{};
    VkLogicOp                logicOp{};
    uint32_t                 attachmentCount{};
    const  VkPipelineColorBlendAttachmentState *  pAttachments{};
    float                    blendConstants [4]{};
};
struct VkPipelineDynamicStateCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO;
    const  void *             pNext{};
    VkPipelineDynamicStateCreateFlags      flags{};
    uint32_t                 dynamicStateCount{};
    const  VkDynamicState *   pDynamicStates{};
};
struct VkStencilOpState {
    VkStencilOp              failOp{};
    VkStencilOp              passOp{};
    VkStencilOp              depthFailOp{};
    VkCompareOp              compareOp{};
    uint32_t                 compareMask{};
    uint32_t                 writeMask{};
    uint32_t                 reference{};
};
struct VkPipelineDepthStencilStateCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;
    const  void *             pNext{};
    VkPipelineDepthStencilStateCreateFlags      flags{};
    VkBool32                 depthTestEnable{};
    VkBool32                 depthWriteEnable{};
    VkCompareOp              depthCompareOp{};
    VkBool32                 depthBoundsTestEnable{};
    VkBool32                 stencilTestEnable{};
    VkStencilOpState         front{};
    VkStencilOpState         back{};
    float                    minDepthBounds{};
    float                    maxDepthBounds{};
};
struct VkGraphicsPipelineCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;
    const  void *             pNext{};
    VkPipelineCreateFlags    flags{};
    uint32_t                 stageCount{};
    const  VkPipelineShaderStageCreateInfo *  pStages{};
    const  VkPipelineVertexInputStateCreateInfo *  pVertexInputState{};
    const  VkPipelineInputAssemblyStateCreateInfo *  pInputAssemblyState{};
    const  VkPipelineTessellationStateCreateInfo *  pTessellationState{};
    const  VkPipelineViewportStateCreateInfo *  pViewportState{};
    const  VkPipelineRasterizationStateCreateInfo *  pRasterizationState{};
    const  VkPipelineMultisampleStateCreateInfo *  pMultisampleState{};
    const  VkPipelineDepthStencilStateCreateInfo *  pDepthStencilState{};
    const  VkPipelineColorBlendStateCreateInfo *  pColorBlendState{};
    const  VkPipelineDynamicStateCreateInfo *  pDynamicState{};
    VkPipelineLayout         layout{};
    VkRenderPass             renderPass{};
    uint32_t                 subpass{};
    VkPipeline        basePipelineHandle{};
    int32_t                  basePipelineIndex{};
};
struct VkPipelineCacheCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO;
    const  void *             pNext{};
    VkPipelineCacheCreateFlags      flags{};
    size_t                   initialDataSize{};
    const  void *             pInitialData{};
};
struct VkPushConstantRange {
    VkShaderStageFlags       stageFlags{};
    uint32_t                 offset{};
    uint32_t                 size{};
};
struct VkPipelineLayoutCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
    const  void *             pNext{};
    VkPipelineLayoutCreateFlags      flags{};
    uint32_t                 setLayoutCount{};
    const  VkDescriptorSetLayout *  pSetLayouts{};
    uint32_t                 pushConstantRangeCount{};
    const  VkPushConstantRange *  pPushConstantRanges{};
};
struct VkSamplerCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO;
    const  void *             pNext{};
    VkSamplerCreateFlags     flags{};
    VkFilter                 magFilter{};
    VkFilter                 minFilter{};
    VkSamplerMipmapMode      mipmapMode{};
    VkSamplerAddressMode     addressModeU{};
    VkSamplerAddressMode     addressModeV{};
    VkSamplerAddressMode     addressModeW{};
    float                    mipLodBias{};
    VkBool32                 anisotropyEnable{};
    float                    maxAnisotropy{};
    VkBool32                 compareEnable{};
    VkCompareOp              compareOp{};
    float                    minLod{};
    float                    maxLod{};
    VkBorderColor            borderColor{};
    VkBool32                 unnormalizedCoordinates{};
};
struct VkCommandPoolCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO;
    const  void *             pNext{};
    VkCommandPoolCreateFlags     flags{};
    uint32_t                 queueFamilyIndex{};
};
struct VkCommandBufferAllocateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
    const  void *             pNext{};
    VkCommandPool            commandPool{};
    VkCommandBufferLevel     level{};
    uint32_t                 commandBufferCount{};
};
struct VkCommandBufferInheritanceInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO;
    const  void *             pNext{};
    VkRenderPass      renderPass{};
    uint32_t                 subpass{};
    VkFramebuffer     framebuffer{};
    VkBool32                 occlusionQueryEnable{};
    VkQueryControlFlags      queryFlags{};
    VkQueryPipelineStatisticFlags   pipelineStatistics{};
};
struct VkCommandBufferBeginInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
    const  void *             pNext{};
    VkCommandBufferUsageFlags    flags{};
    const  VkCommandBufferInheritanceInfo *        pInheritanceInfo{};
};
struct VkClearDepthStencilValue {
    float                    depth{};
    uint32_t                 stencil{};
};
union VkClearColorValue {
    float                    float32 [4];
    int32_t                  int32 [4];
    uint32_t                 uint32 [4];
};
union VkClearValue {
    VkClearColorValue        color;
    VkClearDepthStencilValue   depthStencil;
};
struct VkRenderPassBeginInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;
    const  void *             pNext{};
    VkRenderPass             renderPass{};
    VkFramebuffer            framebuffer{};
    VkRect2D                 renderArea{};
    uint32_t                 clearValueCount{};
    const  VkClearValue *     pClearValues{};
};
struct VkClearAttachment {
    VkImageAspectFlags       aspectMask{};
    uint32_t                 colorAttachment{};
    VkClearValue             clearValue{};
};
struct VkAttachmentDescription {
    VkAttachmentDescriptionFlags   flags{};
    VkFormat                 format{};
    VkSampleCountFlagBits    samples{};
    VkAttachmentLoadOp       loadOp{};
    VkAttachmentStoreOp      storeOp{};
    VkAttachmentLoadOp       stencilLoadOp{};
    VkAttachmentStoreOp      stencilStoreOp{};
    VkImageLayout            initialLayout{};
    VkImageLayout            finalLayout{};
};
struct VkAttachmentReference {
    uint32_t                 attachment{};
    VkImageLayout            layout{};
};
struct VkSubpassDescription {
    VkSubpassDescriptionFlags   flags{};
    VkPipelineBindPoint      pipelineBindPoint{};
    uint32_t                 inputAttachmentCount{};
    const  VkAttachmentReference *  pInputAttachments{};
    uint32_t                 colorAttachmentCount{};
    const  VkAttachmentReference *  pColorAttachments{};
    const  VkAttachmentReference *  pResolveAttachments{};
    const  VkAttachmentReference *  pDepthStencilAttachment{};
    uint32_t                 preserveAttachmentCount{};
    const  uint32_t *  pPreserveAttachments{};
};
struct VkSubpassDependency {
    uint32_t                 srcSubpass{};
    uint32_t                 dstSubpass{};
    VkPipelineStageFlags     srcStageMask{};
    VkPipelineStageFlags     dstStageMask{};
    VkAccessFlags            srcAccessMask{};
    VkAccessFlags            dstAccessMask{};
    VkDependencyFlags        dependencyFlags{};
};
struct VkRenderPassCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO;
    const  void *             pNext{};
    VkRenderPassCreateFlags   flags{};
    uint32_t     attachmentCount{};
    const  VkAttachmentDescription *  pAttachments{};
    uint32_t                 subpassCount{};
    const  VkSubpassDescription *  pSubpasses{};
    uint32_t         dependencyCount{};
    const  VkSubpassDependency *  pDependencies{};
};
struct VkEventCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_EVENT_CREATE_INFO;
    const  void *             pNext{};
    VkEventCreateFlags       flags{};
};
struct VkFenceCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_FENCE_CREATE_INFO;
    const  void *             pNext{};
    VkFenceCreateFlags       flags{};
};
struct VkSemaphoreCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO;
    const  void *             pNext{};
    VkSemaphoreCreateFlags   flags{};
};
struct VkQueryPoolCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO;
    const  void *             pNext{};
    VkQueryPoolCreateFlags   flags{};
    VkQueryType              queryType{};
    uint32_t                 queryCount{};
    VkQueryPipelineStatisticFlags   pipelineStatistics{};
};
struct VkFramebufferCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO;
    const  void *             pNext{};
    VkFramebufferCreateFlags      flags{};
    VkRenderPass             renderPass{};
    uint32_t                 attachmentCount{};
    const  VkImageView *      pAttachments{};
    uint32_t                 width{};
    uint32_t                 height{};
    uint32_t                 layers{};
};
struct VkDrawIndirectCommand {
    uint32_t                         vertexCount{};
    uint32_t                         instanceCount{};
    uint32_t                         firstVertex{};
    uint32_t   firstInstance{};
};
struct VkDrawIndexedIndirectCommand {
    uint32_t                         indexCount{};
    uint32_t                         instanceCount{};
    uint32_t                         firstIndex{};
    int32_t                          vertexOffset{};
    uint32_t   firstInstance{};
};
struct VkDispatchIndirectCommand {
    uint32_t   x{};
    uint32_t   y{};
    uint32_t   z{};
};
struct VkSubmitInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SUBMIT_INFO;
    const  void *  pNext{};
    uint32_t         waitSemaphoreCount{};
    const  VkSemaphore *      pWaitSemaphores{};
    const  VkPipelineStageFlags *            pWaitDstStageMask{};
    uint32_t         commandBufferCount{};
    const  VkCommandBuffer *      pCommandBuffers{};
    uint32_t         signalSemaphoreCount{};
    const  VkSemaphore *      pSignalSemaphores{};
};
struct VkDisplayPropertiesKHR {
    VkDisplayKHR                       display{};
    const  char *                       displayName{};
    VkExtent2D                         physicalDimensions{};
    VkExtent2D                         physicalResolution{};
    VkSurfaceTransformFlagsKHR         supportedTransforms{};
    VkBool32                           planeReorderPossible{};
    VkBool32                           persistentContent{};
};
struct VkDisplayPlanePropertiesKHR {
    VkDisplayKHR                       currentDisplay{};
    uint32_t                           currentStackIndex{};
};
struct VkDisplayModeParametersKHR {
    VkExtent2D                         visibleRegion{};
    uint32_t     refreshRate{};
};
struct VkDisplayModePropertiesKHR {
    VkDisplayModeKHR                   displayMode{};
    VkDisplayModeParametersKHR         parameters{};
};
struct VkDisplayModeCreateInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR;
    const  void *                       pNext{};
    VkDisplayModeCreateFlagsKHR        flags{};
    VkDisplayModeParametersKHR         parameters{};
};
struct VkDisplayPlaneCapabilitiesKHR {
    VkDisplayPlaneAlphaFlagsKHR        supportedAlpha{};
    VkOffset2D                         minSrcPosition{};
    VkOffset2D                         maxSrcPosition{};
    VkExtent2D                         minSrcExtent{};
    VkExtent2D                         maxSrcExtent{};
    VkOffset2D                         minDstPosition{};
    VkOffset2D                         maxDstPosition{};
    VkExtent2D                         minDstExtent{};
    VkExtent2D                         maxDstExtent{};
};
struct VkDisplaySurfaceCreateInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR;
    const  void *                       pNext{};
    VkDisplaySurfaceCreateFlagsKHR     flags{};
    VkDisplayModeKHR                   displayMode{};
    uint32_t                           planeIndex{};
    uint32_t                           planeStackIndex{};
    VkSurfaceTransformFlagBitsKHR      transform{};
    float                              globalAlpha{};
    VkDisplayPlaneAlphaFlagBitsKHR     alphaMode{};
    VkExtent2D                         imageExtent{};
};
struct VkDisplayPresentInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR;
    const  void *                       pNext{};
    VkRect2D                           srcRect{};
    VkRect2D                           dstRect{};
    VkBool32                           persistent{};
};
struct VkSurfaceCapabilitiesKHR {
    uint32_t                           minImageCount{};
    uint32_t                           maxImageCount{};
    VkExtent2D                         currentExtent{};
    VkExtent2D                         minImageExtent{};
    VkExtent2D                         maxImageExtent{};
    uint32_t                           maxImageArrayLayers{};
    VkSurfaceTransformFlagsKHR         supportedTransforms{};
    VkSurfaceTransformFlagBitsKHR      currentTransform{};
    VkCompositeAlphaFlagsKHR           supportedCompositeAlpha{};
    VkImageUsageFlags                  supportedUsageFlags{};
};
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
struct VkAndroidSurfaceCreateInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR;
    const  void *                                     pNext{};
    VkAndroidSurfaceCreateFlagsKHR   flags{};
    struct  ANativeWindow *     window{};
};
#endif // defined(VK_USE_PLATFORM_ANDROID_KHR)
#if defined(VK_USE_PLATFORM_VI_NN)
struct VkViSurfaceCreateInfoNN {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN;
    const  void *                       pNext{};
    VkViSurfaceCreateFlagsNN     flags{};
    void *                             window{};
};
#endif // defined(VK_USE_PLATFORM_VI_NN)
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
struct VkWaylandSurfaceCreateInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR;
    const  void *                       pNext{};
    VkWaylandSurfaceCreateFlagsKHR     flags{};
    struct  wl_display *                display{};
    struct  wl_surface *                surface{};
};
#endif // defined(VK_USE_PLATFORM_WAYLAND_KHR)
#if defined(VK_USE_PLATFORM_WIN32_KHR)
struct VkWin32SurfaceCreateInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR;
    const  void *                       pNext{};
    VkWin32SurfaceCreateFlagsKHR     flags{};
    HINSTANCE                          hinstance{};
    HWND                               hwnd{};
};
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
#if defined(VK_USE_PLATFORM_XLIB_KHR)
struct VkXlibSurfaceCreateInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR;
    const  void *                       pNext{};
    VkXlibSurfaceCreateFlagsKHR     flags{};
    Display *                          dpy{};
    Window                             window{};
};
#endif // defined(VK_USE_PLATFORM_XLIB_KHR)
#if defined(VK_USE_PLATFORM_XCB_KHR)
struct VkXcbSurfaceCreateInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR;
    const  void *                       pNext{};
    VkXcbSurfaceCreateFlagsKHR     flags{};
    xcb_connection_t *                 connection{};
    xcb_window_t                       window{};
};
#endif // defined(VK_USE_PLATFORM_XCB_KHR)
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
struct VkDirectFBSurfaceCreateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT;
    const  void *                       pNext{};
    VkDirectFBSurfaceCreateFlagsEXT     flags{};
    IDirectFB *                        dfb{};
    IDirectFBSurface *                 surface{};
};
#endif // defined(VK_USE_PLATFORM_DIRECTFB_EXT)
#if defined(VK_USE_PLATFORM_FUCHSIA)
struct VkImagePipeSurfaceCreateInfoFUCHSIA {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA;
    const  void *                       pNext{};
    VkImagePipeSurfaceCreateFlagsFUCHSIA     flags{};
    zx_handle_t                        imagePipeHandle{};
};
#endif // defined(VK_USE_PLATFORM_FUCHSIA)
#if defined(VK_USE_PLATFORM_GGP)
struct VkStreamDescriptorSurfaceCreateInfoGGP {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP;
    const  void *                       pNext{};
    VkStreamDescriptorSurfaceCreateFlagsGGP   flags{};
    GgpStreamDescriptor                streamDescriptor{};
};
#endif // defined(VK_USE_PLATFORM_GGP)
struct VkSurfaceFormatKHR {
    VkFormat                           format{};
    VkColorSpaceKHR                    colorSpace{};
};
struct VkSwapchainCreateInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR;
    const  void *                       pNext{};
    VkSwapchainCreateFlagsKHR          flags{};
    VkSurfaceKHR                       surface{};
    uint32_t                           minImageCount{};
    VkFormat                           imageFormat{};
    VkColorSpaceKHR                    imageColorSpace{};
    VkExtent2D                         imageExtent{};
    uint32_t                           imageArrayLayers{};
    VkImageUsageFlags                  imageUsage{};
    VkSharingMode                      imageSharingMode{};
    uint32_t           queueFamilyIndexCount{};
    const  uint32_t *                   pQueueFamilyIndices{};
    VkSurfaceTransformFlagBitsKHR      preTransform{};
    VkCompositeAlphaFlagBitsKHR        compositeAlpha{};
    VkPresentModeKHR                   presentMode{};
    VkBool32                           clipped{};
    VkSwapchainKHR     oldSwapchain{};
};
struct VkPresentInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PRESENT_INFO_KHR;
    const  void *   pNext{};
    uint32_t           waitSemaphoreCount{};
    const  VkSemaphore *  pWaitSemaphores{};
    uint32_t                           swapchainCount{};
    const  VkSwapchainKHR *  pSwapchains{};
    const  uint32_t *  pImageIndices{};
    VkResult *  pResults{};
};
struct VkDebugReportCallbackCreateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT;
    const  void *                       pNext{};
    VkDebugReportFlagsEXT              flags{};
    PFN_vkDebugReportCallbackEXT       pfnCallback{};
    void *             pUserData{};
};
struct VkValidationFlagsEXT {
    VkStructureType                    sType = VkStructureType::VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT;
    const  void *                       pNext{};
    uint32_t                           disabledValidationCheckCount{};
    const  VkValidationCheckEXT *  pDisabledValidationChecks{};
};
struct VkValidationFeaturesEXT {
    VkStructureType    sType = VkStructureType::VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT;
    const  void *                       pNext{};
    uint32_t                           enabledValidationFeatureCount{};
    const  VkValidationFeatureEnableEXT *  pEnabledValidationFeatures{};
    uint32_t                           disabledValidationFeatureCount{};
    const  VkValidationFeatureDisableEXT *  pDisabledValidationFeatures{};
};
struct VkPipelineRasterizationStateRasterizationOrderAMD {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD;
    const  void *                       pNext{};
    VkRasterizationOrderAMD            rasterizationOrder{};
};
struct VkDebugMarkerObjectNameInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT;
    const  void *                       pNext{};
    VkDebugReportObjectTypeEXT         objectType{};
    uint64_t                           object{};
    const  char *  pObjectName{};
};
struct VkDebugMarkerObjectTagInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT;
    const  void *                       pNext{};
    VkDebugReportObjectTypeEXT         objectType{};
    uint64_t                           object{};
    uint64_t                           tagName{};
    size_t                             tagSize{};
    const  void *         pTag{};
};
struct VkDebugMarkerMarkerInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT;
    const  void *                       pNext{};
    const  char *  pMarkerName{};
    float              color [4]{};
};
struct VkDedicatedAllocationImageCreateInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV;
    const  void *                       pNext{};
    VkBool32                           dedicatedAllocation{};
};
struct VkDedicatedAllocationBufferCreateInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV;
    const  void *                       pNext{};
    VkBool32                           dedicatedAllocation{};
};
struct VkDedicatedAllocationMemoryAllocateInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV;
    const  void *                       pNext{};
    VkImage            image{};
    VkBuffer           buffer{};
};
struct VkExternalImageFormatPropertiesNV {
    VkImageFormatProperties            imageFormatProperties{};
    VkExternalMemoryFeatureFlagsNV     externalMemoryFeatures{};
    VkExternalMemoryHandleTypeFlagsNV   exportFromImportedHandleTypes{};
    VkExternalMemoryHandleTypeFlagsNV   compatibleHandleTypes{};
};
struct VkExternalMemoryImageCreateInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV;
    const  void *                       pNext{};
    VkExternalMemoryHandleTypeFlagsNV   handleTypes{};
};
struct VkExportMemoryAllocateInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV;
    const  void *                       pNext{};
    VkExternalMemoryHandleTypeFlagsNV   handleTypes{};
};
#if defined(VK_USE_PLATFORM_WIN32_KHR)
struct VkImportMemoryWin32HandleInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV;
    const  void *                       pNext{};
    VkExternalMemoryHandleTypeFlagsNV   handleType{};
    HANDLE                             handle{};
};
struct VkExportMemoryWin32HandleInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV;
    const  void *                       pNext{};
    const  SECURITY_ATTRIBUTES *        pAttributes{};
    DWORD                              dwAccess{};
};
struct VkWin32KeyedMutexAcquireReleaseInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV;
    const  void *                       pNext{};
    uint32_t                           acquireCount{};
    const  VkDeviceMemory *             pAcquireSyncs{};
    const  uint64_t *                   pAcquireKeys{};
    const  uint32_t *                   pAcquireTimeoutMilliseconds{};
    uint32_t                           releaseCount{};
    const  VkDeviceMemory *             pReleaseSyncs{};
    const  uint64_t *                   pReleaseKeys{};
};
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
    VkStructureType sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV;
    void *     pNext{};
    VkBool32                         deviceGeneratedCommands{};
};
struct VkDevicePrivateDataCreateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT;
    const  void *                             pNext{};
    uint32_t                                 privateDataSlotRequestCount{};
};
struct VkPrivateDataSlotCreateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT;
    const  void *                             pNext{};
    VkPrivateDataSlotCreateFlagsEXT          flags{};
};
struct VkPhysicalDevicePrivateDataFeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT;
    void *                                   pNext{};
    VkBool32                                 privateData{};
};
struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV;
    void *     pNext{};
    uint32_t           maxGraphicsShaderGroupCount{};
    uint32_t           maxIndirectSequenceCount{};
    uint32_t           maxIndirectCommandsTokenCount{};
    uint32_t           maxIndirectCommandsStreamCount{};
    uint32_t           maxIndirectCommandsTokenOffset{};
    uint32_t           maxIndirectCommandsStreamStride{};
    uint32_t           minSequencesCountBufferOffsetAlignment{};
    uint32_t           minSequencesIndexBufferOffsetAlignment{};
    uint32_t           minIndirectCommandsBufferOffsetAlignment{};
};
struct VkGraphicsShaderGroupCreateInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV;
    const  void *                                                 pNext{};
    uint32_t                                                     stageCount{};
    const  VkPipelineShaderStageCreateInfo *     pStages{};
    const  VkPipelineVertexInputStateCreateInfo *                 pVertexInputState{};
    const  VkPipelineTessellationStateCreateInfo *                pTessellationState{};
};
struct VkGraphicsPipelineShaderGroupsCreateInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV;
    const  void *                                                 pNext{};
    uint32_t                                                     groupCount{};
    const  VkGraphicsShaderGroupCreateInfoNV *   pGroups{};
    uint32_t                                     pipelineCount{};
    const  VkPipeline *                       pPipelines{};
};
struct VkBindShaderGroupIndirectCommandNV {
    uint32_t           groupIndex{};
};
struct VkBindIndexBufferIndirectCommandNV {
    VkDeviceAddress    bufferAddress{};
    uint32_t           size{};
    VkIndexType        indexType{};
};
struct VkBindVertexBufferIndirectCommandNV {
    VkDeviceAddress    bufferAddress{};
    uint32_t           size{};
    uint32_t           stride{};
};
struct VkSetStateFlagsIndirectCommandNV {
    uint32_t            data{};
};
struct VkIndirectCommandsStreamNV {
    VkBuffer        buffer{};
    VkDeviceSize    offset{};
};
struct VkIndirectCommandsLayoutTokenNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV;
    const  void *                     pNext{};
    VkIndirectCommandsTokenTypeNV    tokenType{};
    uint32_t                         stream{};
    uint32_t                         offset{};
    uint32_t                                  vertexBindingUnit{};
    VkBool32                                  vertexDynamicStride{};
    VkPipelineLayout          pushconstantPipelineLayout{};
    VkShaderStageFlags        pushconstantShaderStageFlags{};
    uint32_t                                  pushconstantOffset{};
    uint32_t                                  pushconstantSize{};
    VkIndirectStateFlagsNV    indirectStateFlags{};
    uint32_t                  indexTypeCount{};
    const  VkIndexType *  pIndexTypes{};
    const  uint32_t *     pIndexTypeValues{};
};
struct VkIndirectCommandsLayoutCreateInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV;
    const  void *                              pNext{};
    VkIndirectCommandsLayoutUsageFlagsNV      flags{};
    VkPipelineBindPoint                       pipelineBindPoint{};
    uint32_t                                  tokenCount{};
    const  VkIndirectCommandsLayoutTokenNV *   pTokens{};
    uint32_t                                  streamCount{};
    const  uint32_t *        pStreamStrides{};
};
struct VkGeneratedCommandsInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV;
    const  void *                         pNext{};
    VkPipelineBindPoint                  pipelineBindPoint{};
    VkPipeline                           pipeline{};
    VkIndirectCommandsLayoutNV           indirectCommandsLayout{};
    uint32_t                             streamCount{};
    const  VkIndirectCommandsStreamNV *   pStreams{};
    uint32_t                             sequencesCount{};
    VkBuffer                             preprocessBuffer{};
    VkDeviceSize                         preprocessOffset{};
    VkDeviceSize                         preprocessSize{};
    VkBuffer             sequencesCountBuffer{};
    VkDeviceSize                         sequencesCountOffset{};
    VkBuffer             sequencesIndexBuffer{};
    VkDeviceSize                         sequencesIndexOffset{};
};
struct VkGeneratedCommandsMemoryRequirementsInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV;
    const  void *                  pNext{};
    VkPipelineBindPoint           pipelineBindPoint{};
    VkPipeline                    pipeline{};
    VkIndirectCommandsLayoutNV    indirectCommandsLayout{};
    uint32_t                      maxSequencesCount{};
};
struct VkPhysicalDeviceFeatures2 {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2;
    void *                             pNext{};
    VkPhysicalDeviceFeatures           features{};
};
using VkPhysicalDeviceFeatures2KHR = VkPhysicalDeviceFeatures2;
struct VkPhysicalDeviceProperties2 {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2;
    void *                             pNext{};
    VkPhysicalDeviceProperties         properties{};
};
using VkPhysicalDeviceProperties2KHR = VkPhysicalDeviceProperties2;
struct VkFormatProperties2 {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2;
    void *                             pNext{};
    VkFormatProperties                 formatProperties{};
};
using VkFormatProperties2KHR = VkFormatProperties2;
struct VkImageFormatProperties2 {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2;
    void *  pNext{};
    VkImageFormatProperties            imageFormatProperties{};
};
using VkImageFormatProperties2KHR = VkImageFormatProperties2;
struct VkPhysicalDeviceImageFormatInfo2 {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2;
    const  void *  pNext{};
    VkFormat                           format{};
    VkImageType                        type{};
    VkImageTiling                      tiling{};
    VkImageUsageFlags                  usage{};
    VkImageCreateFlags   flags{};
};
using VkPhysicalDeviceImageFormatInfo2KHR = VkPhysicalDeviceImageFormatInfo2;
struct VkQueueFamilyProperties2 {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2;
    void *                             pNext{};
    VkQueueFamilyProperties            queueFamilyProperties{};
};
using VkQueueFamilyProperties2KHR = VkQueueFamilyProperties2;
struct VkPhysicalDeviceMemoryProperties2 {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2;
    void *                             pNext{};
    VkPhysicalDeviceMemoryProperties   memoryProperties{};
};
using VkPhysicalDeviceMemoryProperties2KHR = VkPhysicalDeviceMemoryProperties2;
struct VkSparseImageFormatProperties2 {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2;
    void *                             pNext{};
    VkSparseImageFormatProperties      properties{};
};
using VkSparseImageFormatProperties2KHR = VkSparseImageFormatProperties2;
struct VkPhysicalDeviceSparseImageFormatInfo2 {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2;
    const  void *                       pNext{};
    VkFormat                           format{};
    VkImageType                        type{};
    VkSampleCountFlagBits              samples{};
    VkImageUsageFlags                  usage{};
    VkImageTiling                      tiling{};
};
using VkPhysicalDeviceSparseImageFormatInfo2KHR = VkPhysicalDeviceSparseImageFormatInfo2;
struct VkPhysicalDevicePushDescriptorPropertiesKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR;
    void *                             pNext{};
    uint32_t                           maxPushDescriptors{};
};
struct VkConformanceVersion {
    uint8_t                            major{};
    uint8_t                            minor{};
    uint8_t                            subminor{};
    uint8_t                            patch{};
};
using VkConformanceVersionKHR = VkConformanceVersion;
struct VkPhysicalDeviceDriverProperties {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES;
    void *                             pNext{};
    VkDriverId                         driverID{};
    char                               driverName [ VK_MAX_DRIVER_NAME_SIZE ]{};
    char                               driverInfo [ VK_MAX_DRIVER_INFO_SIZE ]{};
    VkConformanceVersion               conformanceVersion{};
};
using VkPhysicalDeviceDriverPropertiesKHR = VkPhysicalDeviceDriverProperties;
struct VkRectLayerKHR {
    VkOffset2D                         offset{};
    VkExtent2D   extent{};
    uint32_t                           layer{};
};
struct VkPresentRegionKHR {
    uint32_t           rectangleCount{};
    const  VkRectLayerKHR *    pRectangles{};
};
struct VkPresentRegionsKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR;
    const  void *                       pNext{};
    uint32_t                           swapchainCount{};
    const  VkPresentRegionKHR *    pRegions{};
};
struct VkPhysicalDeviceVariablePointersFeatures {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES;
    void *                             pNext{};
    VkBool32                           variablePointersStorageBuffer{};
    VkBool32                           variablePointers{};
};
using VkPhysicalDeviceVariablePointersFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;
using VkPhysicalDeviceVariablePointerFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;
using VkPhysicalDeviceVariablePointerFeatures = VkPhysicalDeviceVariablePointersFeatures;
struct VkExternalMemoryProperties {
    VkExternalMemoryFeatureFlags    externalMemoryFeatures{};
    VkExternalMemoryHandleTypeFlags   exportFromImportedHandleTypes{};
    VkExternalMemoryHandleTypeFlags   compatibleHandleTypes{};
};
using VkExternalMemoryPropertiesKHR = VkExternalMemoryProperties;
struct VkPhysicalDeviceExternalImageFormatInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO;
    const  void *                       pNext{};
    VkExternalMemoryHandleTypeFlagBits   handleType{};
};
using VkPhysicalDeviceExternalImageFormatInfoKHR = VkPhysicalDeviceExternalImageFormatInfo;
struct VkExternalImageFormatProperties {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES;
    void *                             pNext{};
    VkExternalMemoryProperties   externalMemoryProperties{};
};
using VkExternalImageFormatPropertiesKHR = VkExternalImageFormatProperties;
struct VkPhysicalDeviceExternalBufferInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO;
    const  void *                       pNext{};
    VkBufferCreateFlags   flags{};
    VkBufferUsageFlags                 usage{};
    VkExternalMemoryHandleTypeFlagBits   handleType{};
};
using VkPhysicalDeviceExternalBufferInfoKHR = VkPhysicalDeviceExternalBufferInfo;
struct VkExternalBufferProperties {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES;
    void *                             pNext{};
    VkExternalMemoryProperties      externalMemoryProperties{};
};
using VkExternalBufferPropertiesKHR = VkExternalBufferProperties;
struct VkPhysicalDeviceIDProperties {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES;
    void *                             pNext{};
    uint8_t                            deviceUUID [ VK_UUID_SIZE ]{};
    uint8_t                            driverUUID [ VK_UUID_SIZE ]{};
    uint8_t                            deviceLUID [ VK_LUID_SIZE ]{};
    uint32_t                           deviceNodeMask{};
    VkBool32                           deviceLUIDValid{};
};
using VkPhysicalDeviceIDPropertiesKHR = VkPhysicalDeviceIDProperties;
struct VkExternalMemoryImageCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO;
    const  void *                       pNext{};
    VkExternalMemoryHandleTypeFlags   handleTypes{};
};
using VkExternalMemoryImageCreateInfoKHR = VkExternalMemoryImageCreateInfo;
struct VkExternalMemoryBufferCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO;
    const  void *                       pNext{};
    VkExternalMemoryHandleTypeFlags   handleTypes{};
};
using VkExternalMemoryBufferCreateInfoKHR = VkExternalMemoryBufferCreateInfo;
struct VkExportMemoryAllocateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO;
    const  void *                       pNext{};
    VkExternalMemoryHandleTypeFlags   handleTypes{};
};
using VkExportMemoryAllocateInfoKHR = VkExportMemoryAllocateInfo;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
struct VkImportMemoryWin32HandleInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR;
    const  void *                       pNext{};
    VkExternalMemoryHandleTypeFlagBits   handleType{};
    HANDLE             handle{};
    LPCWSTR            name{};
};
struct VkExportMemoryWin32HandleInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR;
    const  void *                       pNext{};
    const  SECURITY_ATTRIBUTES *  pAttributes{};
    DWORD                              dwAccess{};
    LPCWSTR                            name{};
};
struct VkMemoryWin32HandlePropertiesKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR;
    void *                             pNext{};
    uint32_t                           memoryTypeBits{};
};
struct VkMemoryGetWin32HandleInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR;
    const  void *                       pNext{};
    VkDeviceMemory                     memory{};
    VkExternalMemoryHandleTypeFlagBits   handleType{};
};
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
struct VkImportMemoryFdInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR;
    const  void *                       pNext{};
    VkExternalMemoryHandleTypeFlagBits   handleType{};
    int                                fd{};
};
struct VkMemoryFdPropertiesKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR;
    void *                             pNext{};
    uint32_t                           memoryTypeBits{};
};
struct VkMemoryGetFdInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR;
    const  void *                       pNext{};
    VkDeviceMemory                     memory{};
    VkExternalMemoryHandleTypeFlagBits   handleType{};
};
#if defined(VK_USE_PLATFORM_WIN32_KHR)
struct VkWin32KeyedMutexAcquireReleaseInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR;
    const  void *                       pNext{};
    uint32_t           acquireCount{};
    const  VkDeviceMemory *  pAcquireSyncs{};
    const  uint64_t *  pAcquireKeys{};
    const  uint32_t *  pAcquireTimeouts{};
    uint32_t           releaseCount{};
    const  VkDeviceMemory *  pReleaseSyncs{};
    const  uint64_t *  pReleaseKeys{};
};
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
struct VkPhysicalDeviceExternalSemaphoreInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO;
    const  void *                       pNext{};
    VkExternalSemaphoreHandleTypeFlagBits   handleType{};
};
using VkPhysicalDeviceExternalSemaphoreInfoKHR = VkPhysicalDeviceExternalSemaphoreInfo;
struct VkExternalSemaphoreProperties {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES;
    void *                             pNext{};
    VkExternalSemaphoreHandleTypeFlags   exportFromImportedHandleTypes{};
    VkExternalSemaphoreHandleTypeFlags   compatibleHandleTypes{};
    VkExternalSemaphoreFeatureFlags   externalSemaphoreFeatures{};
};
using VkExternalSemaphorePropertiesKHR = VkExternalSemaphoreProperties;
struct VkExportSemaphoreCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO;
    const  void *                       pNext{};
    VkExternalSemaphoreHandleTypeFlags   handleTypes{};
};
using VkExportSemaphoreCreateInfoKHR = VkExportSemaphoreCreateInfo;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
struct VkImportSemaphoreWin32HandleInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR;
    const  void *                       pNext{};
    VkSemaphore      semaphore{};
    VkSemaphoreImportFlags   flags{};
    VkExternalSemaphoreHandleTypeFlagBits   handleType{};
    HANDLE             handle{};
    LPCWSTR            name{};
};
struct VkExportSemaphoreWin32HandleInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR;
    const  void *                       pNext{};
    const  SECURITY_ATTRIBUTES *        pAttributes{};
    DWORD                              dwAccess{};
    LPCWSTR                            name{};
};
struct VkD3D12FenceSubmitInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR;
    const  void *                       pNext{};
    uint32_t           waitSemaphoreValuesCount{};
    const  uint64_t *  pWaitSemaphoreValues{};
    uint32_t           signalSemaphoreValuesCount{};
    const  uint64_t *  pSignalSemaphoreValues{};
};
struct VkSemaphoreGetWin32HandleInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR;
    const  void *                       pNext{};
    VkSemaphore                        semaphore{};
    VkExternalSemaphoreHandleTypeFlagBits   handleType{};
};
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
struct VkImportSemaphoreFdInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR;
    const  void *                       pNext{};
    VkSemaphore      semaphore{};
    VkSemaphoreImportFlags   flags{};
    VkExternalSemaphoreHandleTypeFlagBits   handleType{};
    int                                fd{};
};
struct VkSemaphoreGetFdInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR;
    const  void *                       pNext{};
    VkSemaphore                        semaphore{};
    VkExternalSemaphoreHandleTypeFlagBits   handleType{};
};
struct VkPhysicalDeviceExternalFenceInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO;
    const  void *                       pNext{};
    VkExternalFenceHandleTypeFlagBits   handleType{};
};
using VkPhysicalDeviceExternalFenceInfoKHR = VkPhysicalDeviceExternalFenceInfo;
struct VkExternalFenceProperties {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES;
    void *                             pNext{};
    VkExternalFenceHandleTypeFlags   exportFromImportedHandleTypes{};
    VkExternalFenceHandleTypeFlags   compatibleHandleTypes{};
    VkExternalFenceFeatureFlags   externalFenceFeatures{};
};
using VkExternalFencePropertiesKHR = VkExternalFenceProperties;
struct VkExportFenceCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO;
    const  void *                       pNext{};
    VkExternalFenceHandleTypeFlags   handleTypes{};
};
using VkExportFenceCreateInfoKHR = VkExportFenceCreateInfo;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
struct VkImportFenceWin32HandleInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR;
    const  void *                                         pNext{};
    VkFence                            fence{};
    VkFenceImportFlags                flags{};
    VkExternalFenceHandleTypeFlagBits    handleType{};
    HANDLE                               handle{};
    LPCWSTR                              name{};
};
struct VkExportFenceWin32HandleInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR;
    const  void *                                 pNext{};
    const  SECURITY_ATTRIBUTES *  pAttributes{};
    DWORD                                        dwAccess{};
    LPCWSTR                                      name{};
};
struct VkFenceGetWin32HandleInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR;
    const  void *                             pNext{};
    VkFence                                  fence{};
    VkExternalFenceHandleTypeFlagBits     handleType{};
};
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
struct VkImportFenceFdInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR;
    const  void *                             pNext{};
    VkFence                fence{};
    VkFenceImportFlags    flags{};
    VkExternalFenceHandleTypeFlagBits     handleType{};
    int                                      fd{};
};
struct VkFenceGetFdInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR;
    const  void *                             pNext{};
    VkFence                                  fence{};
    VkExternalFenceHandleTypeFlagBits     handleType{};
};
struct VkPhysicalDeviceMultiviewFeatures {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES;
    void *                             pNext{};
    VkBool32                           multiview{};
    VkBool32                           multiviewGeometryShader{};
    VkBool32                           multiviewTessellationShader{};
};
using VkPhysicalDeviceMultiviewFeaturesKHR = VkPhysicalDeviceMultiviewFeatures;
struct VkPhysicalDeviceMultiviewProperties {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES;
    void *                             pNext{};
    uint32_t                           maxMultiviewViewCount{};
    uint32_t                           maxMultiviewInstanceIndex{};
};
using VkPhysicalDeviceMultiviewPropertiesKHR = VkPhysicalDeviceMultiviewProperties;
struct VkRenderPassMultiviewCreateInfo {
    VkStructureType          sType = VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO;
    const  void *             pNext{};
    uint32_t                 subpassCount{};
    const  uint32_t *      pViewMasks{};
    uint32_t                 dependencyCount{};
    const  int32_t *    pViewOffsets{};
    uint32_t                 correlationMaskCount{};
    const  uint32_t *  pCorrelationMasks{};
};
using VkRenderPassMultiviewCreateInfoKHR = VkRenderPassMultiviewCreateInfo;
struct VkSurfaceCapabilities2EXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT;
    void *                             pNext{};
    uint32_t                           minImageCount{};
    uint32_t                           maxImageCount{};
    VkExtent2D                         currentExtent{};
    VkExtent2D                         minImageExtent{};
    VkExtent2D                         maxImageExtent{};
    uint32_t                           maxImageArrayLayers{};
    VkSurfaceTransformFlagsKHR         supportedTransforms{};
    VkSurfaceTransformFlagBitsKHR      currentTransform{};
    VkCompositeAlphaFlagsKHR           supportedCompositeAlpha{};
    VkImageUsageFlags                  supportedUsageFlags{};
    VkSurfaceCounterFlagsEXT   supportedSurfaceCounters{};
};
struct VkDisplayPowerInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT;
    const  void *                       pNext{};
    VkDisplayPowerStateEXT             powerState{};
};
struct VkDeviceEventInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT;
    const  void *                       pNext{};
    VkDeviceEventTypeEXT               deviceEvent{};
};
struct VkDisplayEventInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT;
    const  void *                       pNext{};
    VkDisplayEventTypeEXT              displayEvent{};
};
struct VkSwapchainCounterCreateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT;
    const  void *                       pNext{};
    VkSurfaceCounterFlagsEXT           surfaceCounters{};
};
struct VkPhysicalDeviceGroupProperties {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES;
    void *                             pNext{};
    uint32_t                           physicalDeviceCount{};
    VkPhysicalDevice                   physicalDevices [ VK_MAX_DEVICE_GROUP_SIZE ]{};
    VkBool32                           subsetAllocation{};
};
using VkPhysicalDeviceGroupPropertiesKHR = VkPhysicalDeviceGroupProperties;
struct VkMemoryAllocateFlagsInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO;
    const  void *                       pNext{};
    VkMemoryAllocateFlags   flags{};
    uint32_t                           deviceMask{};
};
using VkMemoryAllocateFlagsInfoKHR = VkMemoryAllocateFlagsInfo;
struct VkBindBufferMemoryInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO;
    const  void *                       pNext{};
    VkBuffer                           buffer{};
    VkDeviceMemory                     memory{};
    VkDeviceSize                       memoryOffset{};
};
using VkBindBufferMemoryInfoKHR = VkBindBufferMemoryInfo;
struct VkBindBufferMemoryDeviceGroupInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO;
    const  void *                       pNext{};
    uint32_t           deviceIndexCount{};
    const  uint32_t *   pDeviceIndices{};
};
using VkBindBufferMemoryDeviceGroupInfoKHR = VkBindBufferMemoryDeviceGroupInfo;
struct VkBindImageMemoryInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO;
    const  void *                       pNext{};
    VkImage                            image{};
    VkDeviceMemory                     memory{};
    VkDeviceSize                       memoryOffset{};
};
using VkBindImageMemoryInfoKHR = VkBindImageMemoryInfo;
struct VkBindImageMemoryDeviceGroupInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO;
    const  void *                       pNext{};
    uint32_t           deviceIndexCount{};
    const  uint32_t *   pDeviceIndices{};
    uint32_t           splitInstanceBindRegionCount{};
    const  VkRect2D *   pSplitInstanceBindRegions{};
};
using VkBindImageMemoryDeviceGroupInfoKHR = VkBindImageMemoryDeviceGroupInfo;
struct VkDeviceGroupRenderPassBeginInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO;
    const  void *                       pNext{};
    uint32_t                           deviceMask{};
    uint32_t           deviceRenderAreaCount{};
    const  VkRect2D *   pDeviceRenderAreas{};
};
using VkDeviceGroupRenderPassBeginInfoKHR = VkDeviceGroupRenderPassBeginInfo;
struct VkDeviceGroupCommandBufferBeginInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO;
    const  void *                       pNext{};
    uint32_t                           deviceMask{};
};
using VkDeviceGroupCommandBufferBeginInfoKHR = VkDeviceGroupCommandBufferBeginInfo;
struct VkDeviceGroupSubmitInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO;
    const  void *                       pNext{};
    uint32_t           waitSemaphoreCount{};
    const  uint32_t *     pWaitSemaphoreDeviceIndices{};
    uint32_t           commandBufferCount{};
    const  uint32_t *     pCommandBufferDeviceMasks{};
    uint32_t           signalSemaphoreCount{};
    const  uint32_t *   pSignalSemaphoreDeviceIndices{};
};
using VkDeviceGroupSubmitInfoKHR = VkDeviceGroupSubmitInfo;
struct VkDeviceGroupBindSparseInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO;
    const  void *                       pNext{};
    uint32_t                           resourceDeviceIndex{};
    uint32_t                           memoryDeviceIndex{};
};
using VkDeviceGroupBindSparseInfoKHR = VkDeviceGroupBindSparseInfo;
struct VkDeviceGroupPresentCapabilitiesKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR;
    const  void *                       pNext{};
    uint32_t                           presentMask [ VK_MAX_DEVICE_GROUP_SIZE ]{};
    VkDeviceGroupPresentModeFlagsKHR   modes{};
};
struct VkImageSwapchainCreateInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR;
    const  void *                       pNext{};
    VkSwapchainKHR     swapchain{};
};
struct VkBindImageMemorySwapchainInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR;
    const  void *                       pNext{};
    VkSwapchainKHR   swapchain{};
    uint32_t                           imageIndex{};
};
struct VkAcquireNextImageInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR;
    const  void *                       pNext{};
    VkSwapchainKHR   swapchain{};
    uint64_t                           timeout{};
    VkSemaphore   semaphore{};
    VkFence   fence{};
    uint32_t                           deviceMask{};
};
struct VkDeviceGroupPresentInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR;
    const  void *                       pNext{};
    uint32_t           swapchainCount{};
    const  uint32_t *  pDeviceMasks{};
    VkDeviceGroupPresentModeFlagBitsKHR   mode{};
};
struct VkDeviceGroupDeviceCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO;
    const  void *                       pNext{};
    uint32_t                           physicalDeviceCount{};
    const  VkPhysicalDevice *   pPhysicalDevices{};
};
using VkDeviceGroupDeviceCreateInfoKHR = VkDeviceGroupDeviceCreateInfo;
struct VkDeviceGroupSwapchainCreateInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR;
    const  void *                       pNext{};
    VkDeviceGroupPresentModeFlagsKHR                           modes{};
};
struct VkDescriptorUpdateTemplateEntry {
    uint32_t                           dstBinding{};
    uint32_t                           dstArrayElement{};
    uint32_t                           descriptorCount{};
    VkDescriptorType                   descriptorType{};
    size_t                             offset{};
    size_t                             stride{};
};
using VkDescriptorUpdateTemplateEntryKHR = VkDescriptorUpdateTemplateEntry;
struct VkDescriptorUpdateTemplateCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO;
    const  void *                                pNext{};
    VkDescriptorUpdateTemplateCreateFlags      flags{};
    uint32_t                   descriptorUpdateEntryCount{};
    const  VkDescriptorUpdateTemplateEntry *  pDescriptorUpdateEntries{};
    VkDescriptorUpdateTemplateType   templateType{};
    VkDescriptorSetLayout   descriptorSetLayout{};
    VkPipelineBindPoint   pipelineBindPoint{};
    VkPipelineLayout pipelineLayout{};
    uint32_t   set{};
};
using VkDescriptorUpdateTemplateCreateInfoKHR = VkDescriptorUpdateTemplateCreateInfo;
struct VkXYColorEXT {
    float     x{};
    float     y{};
};
struct VkHdrMetadataEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_HDR_METADATA_EXT;
    const  void *     pNext{};
    VkXYColorEXT     displayPrimaryRed{};
    VkXYColorEXT     displayPrimaryGreen{};
    VkXYColorEXT     displayPrimaryBlue{};
    VkXYColorEXT     whitePoint{};
    float            maxLuminance{};
    float            minLuminance{};
    float            maxContentLightLevel{};
    float            maxFrameAverageLightLevel{};
};
struct VkDisplayNativeHdrSurfaceCapabilitiesAMD {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD;
    void *           pNext{};
    VkBool32         localDimmingSupport{};
};
struct VkSwapchainDisplayNativeHdrCreateInfoAMD {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD;
    const  void *     pNext{};
    VkBool32         localDimmingEnable{};
};
struct VkRefreshCycleDurationGOOGLE {
    uint64_t                           refreshDuration{};
};
struct VkPastPresentationTimingGOOGLE {
    uint32_t                           presentID{};
    uint64_t                           desiredPresentTime{};
    uint64_t                           actualPresentTime{};
    uint64_t                           earliestPresentTime{};
    uint64_t                           presentMargin{};
};
struct VkPresentTimeGOOGLE {
    uint32_t                           presentID{};
    uint64_t                           desiredPresentTime{};
};
struct VkPresentTimesInfoGOOGLE {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE;
    const  void *                       pNext{};
    uint32_t                           swapchainCount{};
    const  VkPresentTimeGOOGLE *    pTimes{};
};
#if defined(VK_USE_PLATFORM_IOS_MVK)
struct VkIOSSurfaceCreateInfoMVK {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK;
    const  void *                                     pNext{};
    VkIOSSurfaceCreateFlagsMVK       flags{};
    const  void *                                     pView{};
};
#endif // defined(VK_USE_PLATFORM_IOS_MVK)
#if defined(VK_USE_PLATFORM_MACOS_MVK)
struct VkMacOSSurfaceCreateInfoMVK {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK;
    const  void *                                     pNext{};
    VkMacOSSurfaceCreateFlagsMVK     flags{};
    const  void *                                     pView{};
};
#endif // defined(VK_USE_PLATFORM_MACOS_MVK)
#if defined(VK_USE_PLATFORM_METAL_EXT)
struct VkMetalSurfaceCreateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT;
    const  void *                                     pNext{};
    VkMetalSurfaceCreateFlagsEXT     flags{};
    const  CAMetalLayer *       pLayer{};
};
#endif // defined(VK_USE_PLATFORM_METAL_EXT)
struct VkViewportWScalingNV {
    float            xcoeff{};
    float            ycoeff{};
};
struct VkPipelineViewportWScalingStateCreateInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV;
    const  void *                       pNext{};
    VkBool32                 viewportWScalingEnable{};
    uint32_t                 viewportCount{};
    const  VkViewportWScalingNV *       pViewportWScalings{};
};
struct VkViewportSwizzleNV {
    VkViewportCoordinateSwizzleNV            x{};
    VkViewportCoordinateSwizzleNV            y{};
    VkViewportCoordinateSwizzleNV            z{};
    VkViewportCoordinateSwizzleNV            w{};
};
struct VkPipelineViewportSwizzleStateCreateInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV;
    const  void *             pNext{};
    VkPipelineViewportSwizzleStateCreateFlagsNV      flags{};
    uint32_t                 viewportCount{};
    const  VkViewportSwizzleNV *       pViewportSwizzles{};
};
struct VkPhysicalDeviceDiscardRectanglePropertiesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT;
    void *                   pNext{};
    uint32_t                 maxDiscardRectangles{};
};
struct VkPipelineDiscardRectangleStateCreateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT;
    const  void *                                                        pNext{};
    VkPipelineDiscardRectangleStateCreateFlagsEXT       flags{};
    VkDiscardRectangleModeEXT                                           discardRectangleMode{};
    uint32_t                                            discardRectangleCount{};
    const  VkRect2D *  pDiscardRectangles{};
};
struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX;
    void *                             pNext{};
    VkBool32                           perViewPositionAllComponents{};
};
struct VkInputAttachmentAspectReference {
    uint32_t                          subpass{};
    uint32_t                          inputAttachmentIndex{};
    VkImageAspectFlags                aspectMask{};
};
using VkInputAttachmentAspectReferenceKHR = VkInputAttachmentAspectReference;
struct VkRenderPassInputAttachmentAspectCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO;
    const  void *                      pNext{};
    uint32_t                          aspectReferenceCount{};
    const  VkInputAttachmentAspectReference *  pAspectReferences{};
};
using VkRenderPassInputAttachmentAspectCreateInfoKHR = VkRenderPassInputAttachmentAspectCreateInfo;
struct VkPhysicalDeviceSurfaceInfo2KHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR;
    const  void *  pNext{};
    VkSurfaceKHR   surface{};
};
struct VkSurfaceCapabilities2KHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR;
    void *    pNext{};
    VkSurfaceCapabilitiesKHR   surfaceCapabilities{};
};
struct VkSurfaceFormat2KHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR;
    void *  pNext{};
    VkSurfaceFormatKHR   surfaceFormat{};
};
struct VkDisplayProperties2KHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR;
    void *  pNext{};
    VkDisplayPropertiesKHR   displayProperties{};
};
struct VkDisplayPlaneProperties2KHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR;
    void *  pNext{};
    VkDisplayPlanePropertiesKHR   displayPlaneProperties{};
};
struct VkDisplayModeProperties2KHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR;
    void *  pNext{};
    VkDisplayModePropertiesKHR   displayModeProperties{};
};
struct VkDisplayPlaneInfo2KHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR;
    const  void *  pNext{};
    VkDisplayModeKHR   mode{};
    uint32_t   planeIndex{};
};
struct VkDisplayPlaneCapabilities2KHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR;
    void *  pNext{};
    VkDisplayPlaneCapabilitiesKHR   capabilities{};
};
struct VkSharedPresentSurfaceCapabilitiesKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR;
    void *                             pNext{};
    VkImageUsageFlags   sharedPresentSupportedUsageFlags{};
};
struct VkPhysicalDevice16BitStorageFeatures {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES;
    void *       pNext{};
    VkBool32                           storageBuffer16BitAccess{};
    VkBool32                           uniformAndStorageBuffer16BitAccess{};
    VkBool32                           storagePushConstant16{};
    VkBool32                           storageInputOutput16{};
};
using VkPhysicalDevice16BitStorageFeaturesKHR = VkPhysicalDevice16BitStorageFeatures;
struct VkPhysicalDeviceSubgroupProperties {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES;
    void *                    pNext{};
    uint32_t                        subgroupSize{};
    VkShaderStageFlags              supportedStages{};
    VkSubgroupFeatureFlags          supportedOperations{};
    VkBool32   quadOperationsInAllStages{};
};
struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES;
    void *                           pNext{};
    VkBool32   shaderSubgroupExtendedTypes{};
};
using VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR = VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;
struct VkBufferMemoryRequirementsInfo2 {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2;
    const  void *                                                           pNext{};
    VkBuffer                                                               buffer{};
};
using VkBufferMemoryRequirementsInfo2KHR = VkBufferMemoryRequirementsInfo2;
struct VkImageMemoryRequirementsInfo2 {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2;
    const  void *                                                           pNext{};
    VkImage                                                                image{};
};
using VkImageMemoryRequirementsInfo2KHR = VkImageMemoryRequirementsInfo2;
struct VkImageSparseMemoryRequirementsInfo2 {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2;
    const  void *                                                           pNext{};
    VkImage                                                                image{};
};
using VkImageSparseMemoryRequirementsInfo2KHR = VkImageSparseMemoryRequirementsInfo2;
struct VkMemoryRequirements2 {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2;
    void *  pNext{};
    VkMemoryRequirements                                                   memoryRequirements{};
};
using VkMemoryRequirements2KHR = VkMemoryRequirements2;
struct VkSparseImageMemoryRequirements2 {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2;
    void *                                        pNext{};
    VkSparseImageMemoryRequirements                                        memoryRequirements{};
};
using VkSparseImageMemoryRequirements2KHR = VkSparseImageMemoryRequirements2;
struct VkPhysicalDevicePointClippingProperties {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES;
    void *                             pNext{};
    VkPointClippingBehavior        pointClippingBehavior{};
};
using VkPhysicalDevicePointClippingPropertiesKHR = VkPhysicalDevicePointClippingProperties;
struct VkMemoryDedicatedRequirements {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS;
    void *                             pNext{};
    VkBool32                           prefersDedicatedAllocation{};
    VkBool32                           requiresDedicatedAllocation{};
};
using VkMemoryDedicatedRequirementsKHR = VkMemoryDedicatedRequirements;
struct VkMemoryDedicatedAllocateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO;
    const  void *                       pNext{};
    VkImage            image{};
    VkBuffer           buffer{};
};
using VkMemoryDedicatedAllocateInfoKHR = VkMemoryDedicatedAllocateInfo;
struct VkImageViewUsageCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO;
    const  void *  pNext{};
    VkImageUsageFlags   usage{};
};
using VkImageViewUsageCreateInfoKHR = VkImageViewUsageCreateInfo;
struct VkPipelineTessellationDomainOriginStateCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO;
    const  void *                       pNext{};
    VkTessellationDomainOrigin      domainOrigin{};
};
using VkPipelineTessellationDomainOriginStateCreateInfoKHR = VkPipelineTessellationDomainOriginStateCreateInfo;
struct VkSamplerYcbcrConversionInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO;
    const  void *                       pNext{};
    VkSamplerYcbcrConversion        conversion{};
};
using VkSamplerYcbcrConversionInfoKHR = VkSamplerYcbcrConversionInfo;
struct VkSamplerYcbcrConversionCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO;
    const  void *                       pNext{};
    VkFormat                           format{};
    VkSamplerYcbcrModelConversion   ycbcrModel{};
    VkSamplerYcbcrRange             ycbcrRange{};
    VkComponentMapping                 components{};
    VkChromaLocation                xChromaOffset{};
    VkChromaLocation                yChromaOffset{};
    VkFilter                           chromaFilter{};
    VkBool32                           forceExplicitReconstruction{};
};
using VkSamplerYcbcrConversionCreateInfoKHR = VkSamplerYcbcrConversionCreateInfo;
struct VkBindImagePlaneMemoryInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO;
    const  void *                       pNext{};
    VkImageAspectFlagBits              planeAspect{};
};
using VkBindImagePlaneMemoryInfoKHR = VkBindImagePlaneMemoryInfo;
struct VkImagePlaneMemoryRequirementsInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO;
    const  void *                       pNext{};
    VkImageAspectFlagBits              planeAspect{};
};
using VkImagePlaneMemoryRequirementsInfoKHR = VkImagePlaneMemoryRequirementsInfo;
struct VkPhysicalDeviceSamplerYcbcrConversionFeatures {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES;
    void *       pNext{};
    VkBool32                           samplerYcbcrConversion{};
};
using VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR = VkPhysicalDeviceSamplerYcbcrConversionFeatures;
struct VkSamplerYcbcrConversionImageFormatProperties {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES;
    void *       pNext{};
    uint32_t                           combinedImageSamplerDescriptorCount{};
};
using VkSamplerYcbcrConversionImageFormatPropertiesKHR = VkSamplerYcbcrConversionImageFormatProperties;
struct VkTextureLODGatherFormatPropertiesAMD {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD;
    void *                             pNext{};
    VkBool32                           supportsTextureGatherLODBiasAMD{};
};
struct VkConditionalRenderingBeginInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT;
    const  void *                       pNext{};
    VkBuffer                           buffer{};
    VkDeviceSize                       offset{};
    VkConditionalRenderingFlagsEXT      flags{};
};
struct VkProtectedSubmitInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO;
    const  void *                      pNext{};
    VkBool32                          protectedSubmit{};
};
struct VkPhysicalDeviceProtectedMemoryFeatures {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES;
    void *                                pNext{};
    VkBool32                              protectedMemory{};
};
struct VkPhysicalDeviceProtectedMemoryProperties {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES;
    void *                                pNext{};
    VkBool32                              protectedNoFault{};
};
struct VkDeviceQueueInfo2 {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2;
    const  void *                          pNext{};
    VkDeviceQueueCreateFlags              flags{};
    uint32_t                              queueFamilyIndex{};
    uint32_t                              queueIndex{};
};
struct VkPipelineCoverageToColorStateCreateInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV;
    const  void *                                                                       pNext{};
    VkPipelineCoverageToColorStateCreateFlagsNV                      flags{};
    VkBool32                           coverageToColorEnable{};
    uint32_t           coverageToColorLocation{};
};
struct VkPhysicalDeviceSamplerFilterMinmaxProperties {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES;
    void *                   pNext{};
    VkBool32                 filterMinmaxSingleComponentFormats{};
    VkBool32                 filterMinmaxImageComponentMapping{};
};
using VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT = VkPhysicalDeviceSamplerFilterMinmaxProperties;
struct VkSampleLocationEXT {
    float                              x{};
    float                              y{};
};
struct VkSampleLocationsInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT;
    const  void *                             pNext{};
    VkSampleCountFlagBits    sampleLocationsPerPixel{};
    VkExtent2D                               sampleLocationGridSize{};
    uint32_t                 sampleLocationsCount{};
    const  VkSampleLocationEXT *  pSampleLocations{};
};
struct VkAttachmentSampleLocationsEXT {
    uint32_t                           attachmentIndex{};
    VkSampleLocationsInfoEXT           sampleLocationsInfo{};
};
struct VkSubpassSampleLocationsEXT {
    uint32_t                           subpassIndex{};
    VkSampleLocationsInfoEXT           sampleLocationsInfo{};
};
struct VkRenderPassSampleLocationsBeginInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT;
    const  void *                       pNext{};
    uint32_t           attachmentInitialSampleLocationsCount{};
    const  VkAttachmentSampleLocationsEXT *  pAttachmentInitialSampleLocations{};
    uint32_t           postSubpassSampleLocationsCount{};
    const  VkSubpassSampleLocationsEXT *  pPostSubpassSampleLocations{};
};
struct VkPipelineSampleLocationsStateCreateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT;
    const  void *                       pNext{};
    VkBool32                           sampleLocationsEnable{};
    VkSampleLocationsInfoEXT           sampleLocationsInfo{};
};
struct VkPhysicalDeviceSampleLocationsPropertiesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT;
    void *                             pNext{};
    VkSampleCountFlags                 sampleLocationSampleCounts{};
    VkExtent2D                         maxSampleLocationGridSize{};
    float                              sampleLocationCoordinateRange [2]{};
    uint32_t                           sampleLocationSubPixelBits{};
    VkBool32                           variableSampleLocations{};
};
struct VkMultisamplePropertiesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT;
    void *                             pNext{};
    VkExtent2D                         maxSampleLocationGridSize{};
};
struct VkSamplerReductionModeCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO;
    const  void *                       pNext{};
    VkSamplerReductionMode             reductionMode{};
};
using VkSamplerReductionModeCreateInfoEXT = VkSamplerReductionModeCreateInfo;
struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT;
    void *                             pNext{};
    VkBool32                           advancedBlendCoherentOperations{};
};
struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT;
    void *                             pNext{};
    uint32_t                           advancedBlendMaxColorAttachments{};
    VkBool32                           advancedBlendIndependentBlend{};
    VkBool32                           advancedBlendNonPremultipliedSrcColor{};
    VkBool32                           advancedBlendNonPremultipliedDstColor{};
    VkBool32                           advancedBlendCorrelatedOverlap{};
    VkBool32                           advancedBlendAllOperations{};
};
struct VkPipelineColorBlendAdvancedStateCreateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT;
    const  void *             pNext{};
    VkBool32                 srcPremultiplied{};
    VkBool32                 dstPremultiplied{};
    VkBlendOverlapEXT        blendOverlap{};
};
struct VkPhysicalDeviceInlineUniformBlockFeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT;
    void *                   pNext{};
    VkBool32                 inlineUniformBlock{};
    VkBool32                 descriptorBindingInlineUniformBlockUpdateAfterBind{};
};
struct VkPhysicalDeviceInlineUniformBlockPropertiesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT;
    void *                   pNext{};
    uint32_t                 maxInlineUniformBlockSize{};
    uint32_t                 maxPerStageDescriptorInlineUniformBlocks{};
    uint32_t                 maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks{};
    uint32_t                 maxDescriptorSetInlineUniformBlocks{};
    uint32_t                 maxDescriptorSetUpdateAfterBindInlineUniformBlocks{};
};
struct VkWriteDescriptorSetInlineUniformBlockEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT;
    const  void *             pNext{};
    uint32_t                 dataSize{};
    const  void *  pData{};
};
struct VkDescriptorPoolInlineUniformBlockCreateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT;
    const  void *             pNext{};
    uint32_t                 maxInlineUniformBlockBindings{};
};
struct VkPipelineCoverageModulationStateCreateInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV;
    const  void *                                                                       pNext{};
    VkPipelineCoverageModulationStateCreateFlagsNV                     flags{};
    VkCoverageModulationModeNV                                                         coverageModulationMode{};
    VkBool32                                                                           coverageModulationTableEnable{};
    uint32_t                                                           coverageModulationTableCount{};
    const  float *  pCoverageModulationTable{};
};
struct VkImageFormatListCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO;
    const  void *                             pNext{};
    uint32_t                 viewFormatCount{};
    const  VkFormat *   pViewFormats{};
};
using VkImageFormatListCreateInfoKHR = VkImageFormatListCreateInfo;
struct VkValidationCacheCreateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT;
    const  void *             pNext{};
    VkValidationCacheCreateFlagsEXT      flags{};
    size_t                   initialDataSize{};
    const  void *             pInitialData{};
};
struct VkShaderModuleValidationCacheCreateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT;
    const  void *             pNext{};
    VkValidationCacheEXT      validationCache{};
};
struct VkPhysicalDeviceMaintenance3Properties {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES;
    void *                             pNext{};
    uint32_t                           maxPerSetDescriptors{};
    VkDeviceSize                       maxMemoryAllocationSize{};
};
using VkPhysicalDeviceMaintenance3PropertiesKHR = VkPhysicalDeviceMaintenance3Properties;
struct VkDescriptorSetLayoutSupport {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT;
    void *             pNext{};
    VkBool32           supported{};
};
using VkDescriptorSetLayoutSupportKHR = VkDescriptorSetLayoutSupport;
struct VkPhysicalDeviceShaderDrawParametersFeatures {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES;
    void *                             pNext{};
    VkBool32                           shaderDrawParameters{};
};
using VkPhysicalDeviceShaderDrawParameterFeatures = VkPhysicalDeviceShaderDrawParametersFeatures;
struct VkPhysicalDeviceShaderFloat16Int8Features {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES;
    void *       pNext{};
    VkBool32                           shaderFloat16{};
    VkBool32                           shaderInt8{};
};
using VkPhysicalDeviceShaderFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features;
using VkPhysicalDeviceFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features;
struct VkPhysicalDeviceFloatControlsProperties {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES;
    void *                             pNext{};
    VkShaderFloatControlsIndependence   denormBehaviorIndependence{};
    VkShaderFloatControlsIndependence   roundingModeIndependence{};
    VkBool32                           shaderSignedZeroInfNanPreserveFloat16{};
    VkBool32                           shaderSignedZeroInfNanPreserveFloat32{};
    VkBool32                           shaderSignedZeroInfNanPreserveFloat64{};
    VkBool32                           shaderDenormPreserveFloat16{};
    VkBool32                           shaderDenormPreserveFloat32{};
    VkBool32                           shaderDenormPreserveFloat64{};
    VkBool32                           shaderDenormFlushToZeroFloat16{};
    VkBool32                           shaderDenormFlushToZeroFloat32{};
    VkBool32                           shaderDenormFlushToZeroFloat64{};
    VkBool32                           shaderRoundingModeRTEFloat16{};
    VkBool32                           shaderRoundingModeRTEFloat32{};
    VkBool32                           shaderRoundingModeRTEFloat64{};
    VkBool32                           shaderRoundingModeRTZFloat16{};
    VkBool32                           shaderRoundingModeRTZFloat32{};
    VkBool32                           shaderRoundingModeRTZFloat64{};
};
using VkPhysicalDeviceFloatControlsPropertiesKHR = VkPhysicalDeviceFloatControlsProperties;
struct VkPhysicalDeviceHostQueryResetFeatures {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES;
    void *         pNext{};
    VkBool32                             hostQueryReset{};
};
using VkPhysicalDeviceHostQueryResetFeaturesEXT = VkPhysicalDeviceHostQueryResetFeatures;
struct VkShaderResourceUsageAMD {
    uint32_t   numUsedVgprs{};
    uint32_t   numUsedSgprs{};
    uint32_t   ldsSizePerLocalWorkGroup{};
    size_t   ldsUsageSizeInBytes{};
    size_t   scratchMemUsageInBytes{};
};
struct VkShaderStatisticsInfoAMD {
    VkShaderStageFlags   shaderStageMask{};
    VkShaderResourceUsageAMD   resourceUsage{};
    uint32_t   numPhysicalVgprs{};
    uint32_t   numPhysicalSgprs{};
    uint32_t   numAvailableVgprs{};
    uint32_t   numAvailableSgprs{};
    uint32_t   computeWorkGroupSize [3]{};
};
struct VkDeviceQueueGlobalPriorityCreateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT;
    const  void *                     pNext{};
    VkQueueGlobalPriorityEXT         globalPriority{};
};
struct VkDebugUtilsObjectNameInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT;
    const  void *                                             pNext{};
    VkObjectType                                             objectType{};
    uint64_t                                                 objectHandle{};
    const  char *       pObjectName{};
};
struct VkDebugUtilsObjectTagInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT;
    const  void *                             pNext{};
    VkObjectType                             objectType{};
    uint64_t                                 objectHandle{};
    uint64_t                                 tagName{};
    size_t                                   tagSize{};
    const  void *               pTag{};
};
struct VkDebugUtilsLabelEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT;
    const  void *                             pNext{};
    const  char *       pLabelName{};
    float                    color [4]{};
};
struct VkDebugUtilsMessengerCreateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT;
    const  void *                                           pNext{};
    VkDebugUtilsMessengerCreateFlagsEXT    flags{};
    VkDebugUtilsMessageSeverityFlagsEXT                    messageSeverity{};
    VkDebugUtilsMessageTypeFlagsEXT                        messageType{};
    PFN_vkDebugUtilsMessengerCallbackEXT                   pfnUserCallback{};
    void *                                 pUserData{};
};
struct VkDebugUtilsMessengerCallbackDataEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT;
    const  void *                                                         pNext{};
    VkDebugUtilsMessengerCallbackDataFlagsEXT                            flags{};
    const  char *                                   pMessageIdName{};
    int32_t                                                              messageIdNumber{};
    const  char *                                                   pMessage{};
    uint32_t                                                             queueLabelCount{};
    const  VkDebugUtilsLabelEXT *                   pQueueLabels{};
    uint32_t                                                             cmdBufLabelCount{};
    const  VkDebugUtilsLabelEXT *                  pCmdBufLabels{};
    uint32_t                                                             objectCount{};
    const  VkDebugUtilsObjectNameInfoEXT *              pObjects{};
};
struct VkPhysicalDeviceDeviceMemoryReportFeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT;
    void *  pNext{};
    VkBool32                      deviceMemoryReport{};
};
struct VkDeviceDeviceMemoryReportCreateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT;
    const  void *          pNext{};
    VkDeviceMemoryReportFlagsEXT          flags{};
    PFN_vkDeviceMemoryReportCallbackEXT   pfnUserCallback{};
    void *                                pUserData{};
};
struct VkDeviceMemoryReportCallbackDataEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT;
    const  void *                       pNext{};
    VkDeviceMemoryReportFlagsEXT       flags{};
    VkDeviceMemoryReportEventTypeEXT   type{};
    uint64_t                           memoryObjectId{};
    VkDeviceSize                       size{};
    VkObjectType                       objectType{};
    uint64_t                           objectHandle{};
    uint32_t                           heapIndex{};
};
struct VkImportMemoryHostPointerInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT;
    const  void *  pNext{};
    VkExternalMemoryHandleTypeFlagBits   handleType{};
    void *  pHostPointer{};
};
struct VkMemoryHostPointerPropertiesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT;
    void *  pNext{};
    uint32_t   memoryTypeBits{};
};
struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT;
    void *  pNext{};
    VkDeviceSize   minImportedHostPointerAlignment{};
};
struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT;
    void *                   pNext{};
    float                    primitiveOverestimationSize{};
    float                    maxExtraPrimitiveOverestimationSize{};
    float                    extraPrimitiveOverestimationSizeGranularity{};
    VkBool32                 primitiveUnderestimation{};
    VkBool32                 conservativePointAndLineRasterization{};
    VkBool32                 degenerateTrianglesRasterized{};
    VkBool32                 degenerateLinesRasterized{};
    VkBool32                 fullyCoveredFragmentShaderInputVariable{};
    VkBool32                 conservativeRasterizationPostDepthCoverage{};
};
struct VkCalibratedTimestampInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT;
    const  void *             pNext{};
    VkTimeDomainEXT          timeDomain{};
};
struct VkPhysicalDeviceShaderCorePropertiesAMD {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD;
    void *     pNext{};
    uint32_t   shaderEngineCount{};
    uint32_t   shaderArraysPerEngineCount{};
    uint32_t   computeUnitsPerShaderArray{};
    uint32_t   simdPerComputeUnit{};
    uint32_t   wavefrontsPerSimd{};
    uint32_t   wavefrontSize{};
    uint32_t   sgprsPerSimd{};
    uint32_t   minSgprAllocation{};
    uint32_t   maxSgprAllocation{};
    uint32_t   sgprAllocationGranularity{};
    uint32_t   vgprsPerSimd{};
    uint32_t   minVgprAllocation{};
    uint32_t   maxVgprAllocation{};
    uint32_t   vgprAllocationGranularity{};
};
struct VkPhysicalDeviceShaderCoreProperties2AMD {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD;
    void *     pNext{};
    VkShaderCorePropertiesFlagsAMD   shaderCoreFeatures{};
    uint32_t   activeComputeUnitCount{};
};
struct VkPipelineRasterizationConservativeStateCreateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT;
    const  void *                                                                       pNext{};
    VkPipelineRasterizationConservativeStateCreateFlagsEXT             flags{};
    VkConservativeRasterizationModeEXT                                                 conservativeRasterizationMode{};
    float                                                                              extraPrimitiveOverestimationSize{};
};
struct VkPhysicalDeviceDescriptorIndexingFeatures {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES;
    void *                             pNext{};
    VkBool32                 shaderInputAttachmentArrayDynamicIndexing{};
    VkBool32                 shaderUniformTexelBufferArrayDynamicIndexing{};
    VkBool32                 shaderStorageTexelBufferArrayDynamicIndexing{};
    VkBool32                 shaderUniformBufferArrayNonUniformIndexing{};
    VkBool32                 shaderSampledImageArrayNonUniformIndexing{};
    VkBool32                 shaderStorageBufferArrayNonUniformIndexing{};
    VkBool32                 shaderStorageImageArrayNonUniformIndexing{};
    VkBool32                 shaderInputAttachmentArrayNonUniformIndexing{};
    VkBool32                 shaderUniformTexelBufferArrayNonUniformIndexing{};
    VkBool32                 shaderStorageTexelBufferArrayNonUniformIndexing{};
    VkBool32                 descriptorBindingUniformBufferUpdateAfterBind{};
    VkBool32                 descriptorBindingSampledImageUpdateAfterBind{};
    VkBool32                 descriptorBindingStorageImageUpdateAfterBind{};
    VkBool32                 descriptorBindingStorageBufferUpdateAfterBind{};
    VkBool32                 descriptorBindingUniformTexelBufferUpdateAfterBind{};
    VkBool32                 descriptorBindingStorageTexelBufferUpdateAfterBind{};
    VkBool32                 descriptorBindingUpdateUnusedWhilePending{};
    VkBool32                 descriptorBindingPartiallyBound{};
    VkBool32                 descriptorBindingVariableDescriptorCount{};
    VkBool32                 runtimeDescriptorArray{};
};
using VkPhysicalDeviceDescriptorIndexingFeaturesEXT = VkPhysicalDeviceDescriptorIndexingFeatures;
struct VkPhysicalDeviceDescriptorIndexingProperties {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES;
    void *                             pNext{};
    uint32_t                 maxUpdateAfterBindDescriptorsInAllPools{};
    VkBool32                 shaderUniformBufferArrayNonUniformIndexingNative{};
    VkBool32                 shaderSampledImageArrayNonUniformIndexingNative{};
    VkBool32                 shaderStorageBufferArrayNonUniformIndexingNative{};
    VkBool32                 shaderStorageImageArrayNonUniformIndexingNative{};
    VkBool32                 shaderInputAttachmentArrayNonUniformIndexingNative{};
    VkBool32                 robustBufferAccessUpdateAfterBind{};
    VkBool32                 quadDivergentImplicitLod{};
    uint32_t                 maxPerStageDescriptorUpdateAfterBindSamplers{};
    uint32_t                 maxPerStageDescriptorUpdateAfterBindUniformBuffers{};
    uint32_t                 maxPerStageDescriptorUpdateAfterBindStorageBuffers{};
    uint32_t                 maxPerStageDescriptorUpdateAfterBindSampledImages{};
    uint32_t                 maxPerStageDescriptorUpdateAfterBindStorageImages{};
    uint32_t                 maxPerStageDescriptorUpdateAfterBindInputAttachments{};
    uint32_t                 maxPerStageUpdateAfterBindResources{};
    uint32_t                 maxDescriptorSetUpdateAfterBindSamplers{};
    uint32_t                 maxDescriptorSetUpdateAfterBindUniformBuffers{};
    uint32_t                 maxDescriptorSetUpdateAfterBindUniformBuffersDynamic{};
    uint32_t                 maxDescriptorSetUpdateAfterBindStorageBuffers{};
    uint32_t                 maxDescriptorSetUpdateAfterBindStorageBuffersDynamic{};
    uint32_t                 maxDescriptorSetUpdateAfterBindSampledImages{};
    uint32_t                 maxDescriptorSetUpdateAfterBindStorageImages{};
    uint32_t                 maxDescriptorSetUpdateAfterBindInputAttachments{};
};
using VkPhysicalDeviceDescriptorIndexingPropertiesEXT = VkPhysicalDeviceDescriptorIndexingProperties;
struct VkDescriptorSetLayoutBindingFlagsCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO;
    const  void *                                                         pNext{};
    uint32_t                                             bindingCount{};
    const  VkDescriptorBindingFlags *  pBindingFlags{};
};
using VkDescriptorSetLayoutBindingFlagsCreateInfoEXT = VkDescriptorSetLayoutBindingFlagsCreateInfo;
struct VkDescriptorSetVariableDescriptorCountAllocateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO;
    const  void *                             pNext{};
    uint32_t                 descriptorSetCount{};
    const  uint32_t *  pDescriptorCounts{};
};
using VkDescriptorSetVariableDescriptorCountAllocateInfoEXT = VkDescriptorSetVariableDescriptorCountAllocateInfo;
struct VkDescriptorSetVariableDescriptorCountLayoutSupport {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT;
    void *             pNext{};
    uint32_t           maxVariableDescriptorCount{};
};
using VkDescriptorSetVariableDescriptorCountLayoutSupportEXT = VkDescriptorSetVariableDescriptorCountLayoutSupport;
struct VkAttachmentDescription2 {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2;
    const  void *             pNext{};
    VkAttachmentDescriptionFlags   flags{};
    VkFormat                                       format{};
    VkSampleCountFlagBits                          samples{};
    VkAttachmentLoadOp                             loadOp{};
    VkAttachmentStoreOp                            storeOp{};
    VkAttachmentLoadOp                             stencilLoadOp{};
    VkAttachmentStoreOp                            stencilStoreOp{};
    VkImageLayout                                  initialLayout{};
    VkImageLayout                                  finalLayout{};
};
using VkAttachmentDescription2KHR = VkAttachmentDescription2;
struct VkAttachmentReference2 {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2;
    const  void *  pNext{};
    uint32_t                            attachment{};
    VkImageLayout                       layout{};
    VkImageAspectFlags   aspectMask{};
};
using VkAttachmentReference2KHR = VkAttachmentReference2;
struct VkSubpassDescription2 {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2;
    const  void *                            pNext{};
    VkSubpassDescriptionFlags                     flags{};
    VkPipelineBindPoint                                           pipelineBindPoint{};
    uint32_t                                                      viewMask{};
    uint32_t                                      inputAttachmentCount{};
    const  VkAttachmentReference2 *     pInputAttachments{};
    uint32_t                                      colorAttachmentCount{};
    const  VkAttachmentReference2 *     pColorAttachments{};
    const  VkAttachmentReference2 *  pResolveAttachments{};
    const  VkAttachmentReference2 *                pDepthStencilAttachment{};
    uint32_t                                      preserveAttachmentCount{};
    const  uint32_t *                pPreserveAttachments{};
};
using VkSubpassDescription2KHR = VkSubpassDescription2;
struct VkSubpassDependency2 {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2;
    const  void *  pNext{};
    uint32_t                            srcSubpass{};
    uint32_t                            dstSubpass{};
    VkPipelineStageFlags                srcStageMask{};
    VkPipelineStageFlags                dstStageMask{};
    VkAccessFlags       srcAccessMask{};
    VkAccessFlags       dstAccessMask{};
    VkDependencyFlags   dependencyFlags{};
    int32_t                             viewOffset{};
};
using VkSubpassDependency2KHR = VkSubpassDependency2;
struct VkRenderPassCreateInfo2 {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2;
    const  void *                                               pNext{};
    VkRenderPassCreateFlags                    flags{};
    uint32_t                                   attachmentCount{};
    const  VkAttachmentDescription2 *     pAttachments{};
    uint32_t                                                   subpassCount{};
    const  VkSubpassDescription2 *           pSubpasses{};
    uint32_t                                   dependencyCount{};
    const  VkSubpassDependency2 *         pDependencies{};
    uint32_t                                   correlatedViewMaskCount{};
    const  uint32_t *             pCorrelatedViewMasks{};
};
using VkRenderPassCreateInfo2KHR = VkRenderPassCreateInfo2;
struct VkSubpassBeginInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO;
    const  void *             pNext{};
    VkSubpassContents        contents{};
};
using VkSubpassBeginInfoKHR = VkSubpassBeginInfo;
struct VkSubpassEndInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_END_INFO;
    const  void *             pNext{};
};
using VkSubpassEndInfoKHR = VkSubpassEndInfo;
struct VkPhysicalDeviceTimelineSemaphoreFeatures {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES;
    void *                   pNext{};
    VkBool32                 timelineSemaphore{};
};
using VkPhysicalDeviceTimelineSemaphoreFeaturesKHR = VkPhysicalDeviceTimelineSemaphoreFeatures;
struct VkPhysicalDeviceTimelineSemaphoreProperties {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES;
    void *                   pNext{};
    uint64_t                 maxTimelineSemaphoreValueDifference{};
};
using VkPhysicalDeviceTimelineSemaphorePropertiesKHR = VkPhysicalDeviceTimelineSemaphoreProperties;
struct VkSemaphoreTypeCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO;
    const  void *             pNext{};
    VkSemaphoreType          semaphoreType{};
    uint64_t                 initialValue{};
};
using VkSemaphoreTypeCreateInfoKHR = VkSemaphoreTypeCreateInfo;
struct VkTimelineSemaphoreSubmitInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO;
    const  void *                       pNext{};
    uint32_t           waitSemaphoreValueCount{};
    const  uint64_t *  pWaitSemaphoreValues{};
    uint32_t           signalSemaphoreValueCount{};
    const  uint64_t *  pSignalSemaphoreValues{};
};
using VkTimelineSemaphoreSubmitInfoKHR = VkTimelineSemaphoreSubmitInfo;
struct VkSemaphoreWaitInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO;
    const  void *             pNext{};
    VkSemaphoreWaitFlags   flags{};
    uint32_t                 semaphoreCount{};
    const  VkSemaphore *  pSemaphores{};
    const  uint64_t *     pValues{};
};
using VkSemaphoreWaitInfoKHR = VkSemaphoreWaitInfo;
struct VkSemaphoreSignalInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO;
    const  void *             pNext{};
    VkSemaphore              semaphore{};
    uint64_t                 value{};
};
using VkSemaphoreSignalInfoKHR = VkSemaphoreSignalInfo;
struct VkVertexInputBindingDivisorDescriptionEXT {
    uint32_t            binding{};
    uint32_t            divisor{};
};
struct VkPipelineVertexInputDivisorStateCreateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT;
    const  void *                          pNext{};
    uint32_t                              vertexBindingDivisorCount{};
    const  VkVertexInputBindingDivisorDescriptionEXT *       pVertexBindingDivisors{};
};
struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT;
    void *                   pNext{};
    uint32_t                 maxVertexAttribDivisor{};
};
struct VkPhysicalDevicePCIBusInfoPropertiesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT;
    void *                   pNext{};
    uint32_t                 pciDomain{};
    uint32_t                 pciBus{};
    uint32_t                 pciDevice{};
    uint32_t                 pciFunction{};
};
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
struct VkImportAndroidHardwareBufferInfoANDROID {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID;
    const  void *                         pNext{};
    struct  AHardwareBuffer *             buffer{};
};
struct VkAndroidHardwareBufferUsageANDROID {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID;
    void *                               pNext{};
    uint64_t                             androidHardwareBufferUsage{};
};
struct VkAndroidHardwareBufferPropertiesANDROID {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID;
    void *                               pNext{};
    VkDeviceSize                         allocationSize{};
    uint32_t                             memoryTypeBits{};
};
struct VkMemoryGetAndroidHardwareBufferInfoANDROID {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID;
    const  void *                         pNext{};
    VkDeviceMemory                       memory{};
};
struct VkAndroidHardwareBufferFormatPropertiesANDROID {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID;
    void *                               pNext{};
    VkFormat                             format{};
    uint64_t                             externalFormat{};
    VkFormatFeatureFlags                 formatFeatures{};
    VkComponentMapping                   samplerYcbcrConversionComponents{};
    VkSamplerYcbcrModelConversion        suggestedYcbcrModel{};
    VkSamplerYcbcrRange                  suggestedYcbcrRange{};
    VkChromaLocation                     suggestedXChromaOffset{};
    VkChromaLocation                     suggestedYChromaOffset{};
};
#endif // defined(VK_USE_PLATFORM_ANDROID_KHR)
struct VkCommandBufferInheritanceConditionalRenderingInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT;
    const  void *                          pNext{};
    VkBool32                              conditionalRenderingEnable{};
};
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
struct VkExternalFormatANDROID {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID;
    void *                               pNext{};
    uint64_t                             externalFormat{};
};
#endif // defined(VK_USE_PLATFORM_ANDROID_KHR)
struct VkPhysicalDevice8BitStorageFeatures {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES;
    void *       pNext{};
    VkBool32                           storageBuffer8BitAccess{};
    VkBool32                           uniformAndStorageBuffer8BitAccess{};
    VkBool32                           storagePushConstant8{};
};
using VkPhysicalDevice8BitStorageFeaturesKHR = VkPhysicalDevice8BitStorageFeatures;
struct VkPhysicalDeviceConditionalRenderingFeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT;
    void *         pNext{};
    VkBool32                             conditionalRendering{};
    VkBool32                             inheritedConditionalRendering{};
};
struct VkPhysicalDeviceVulkanMemoryModelFeatures {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES;
    void *       pNext{};
    VkBool32                           vulkanMemoryModel{};
    VkBool32                           vulkanMemoryModelDeviceScope{};
    VkBool32                           vulkanMemoryModelAvailabilityVisibilityChains{};
};
using VkPhysicalDeviceVulkanMemoryModelFeaturesKHR = VkPhysicalDeviceVulkanMemoryModelFeatures;
struct VkPhysicalDeviceShaderAtomicInt64Features {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES;
    void *                                pNext{};
    VkBool32                              shaderBufferInt64Atomics{};
    VkBool32                              shaderSharedInt64Atomics{};
};
using VkPhysicalDeviceShaderAtomicInt64FeaturesKHR = VkPhysicalDeviceShaderAtomicInt64Features;
struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT;
    void *                                pNext{};
    VkBool32                              shaderBufferFloat32Atomics{};
    VkBool32                              shaderBufferFloat32AtomicAdd{};
    VkBool32                              shaderBufferFloat64Atomics{};
    VkBool32                              shaderBufferFloat64AtomicAdd{};
    VkBool32                              shaderSharedFloat32Atomics{};
    VkBool32                              shaderSharedFloat32AtomicAdd{};
    VkBool32                              shaderSharedFloat64Atomics{};
    VkBool32                              shaderSharedFloat64AtomicAdd{};
    VkBool32                              shaderImageFloat32Atomics{};
    VkBool32                              shaderImageFloat32AtomicAdd{};
    VkBool32                              sparseImageFloat32Atomics{};
    VkBool32                              sparseImageFloat32AtomicAdd{};
};
struct VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT;
    void *         pNext{};
    VkBool32                             vertexAttributeInstanceRateDivisor{};
    VkBool32                             vertexAttributeInstanceRateZeroDivisor{};
};
struct VkQueueFamilyCheckpointPropertiesNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV;
    void *            pNext{};
    VkPipelineStageFlags   checkpointExecutionStageMask{};
};
struct VkCheckpointDataNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV;
    void *                   pNext{};
    VkPipelineStageFlagBits     stage{};
    void *  pCheckpointMarker{};
};
struct VkPhysicalDeviceDepthStencilResolveProperties {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES;
    void *                                 pNext{};
    VkResolveModeFlags                     supportedDepthResolveModes{};
    VkResolveModeFlags                     supportedStencilResolveModes{};
    VkBool32                               independentResolveNone{};
    VkBool32                               independentResolve{};
};
using VkPhysicalDeviceDepthStencilResolvePropertiesKHR = VkPhysicalDeviceDepthStencilResolveProperties;
struct VkSubpassDescriptionDepthStencilResolve {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE;
    const  void *                               pNext{};
    VkResolveModeFlagBits                depthResolveMode{};
    VkResolveModeFlagBits                stencilResolveMode{};
    const  VkAttachmentReference2 *             pDepthStencilResolveAttachment{};
};
using VkSubpassDescriptionDepthStencilResolveKHR = VkSubpassDescriptionDepthStencilResolve;
struct VkImageViewASTCDecodeModeEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT;
    const  void *                       pNext{};
    VkFormat                           decodeMode{};
};
struct VkPhysicalDeviceASTCDecodeFeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT;
    void *       pNext{};
    VkBool32                           decodeModeSharedExponent{};
};
struct VkPhysicalDeviceTransformFeedbackFeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT;
    void *                   pNext{};
    VkBool32                 transformFeedback{};
    VkBool32                 geometryStreams{};
};
struct VkPhysicalDeviceTransformFeedbackPropertiesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT;
    void *                   pNext{};
    uint32_t                 maxTransformFeedbackStreams{};
    uint32_t                 maxTransformFeedbackBuffers{};
    VkDeviceSize             maxTransformFeedbackBufferSize{};
    uint32_t                 maxTransformFeedbackStreamDataSize{};
    uint32_t                 maxTransformFeedbackBufferDataSize{};
    uint32_t                 maxTransformFeedbackBufferDataStride{};
    VkBool32                 transformFeedbackQueries{};
    VkBool32                 transformFeedbackStreamsLinesTriangles{};
    VkBool32                 transformFeedbackRasterizationStreamSelect{};
    VkBool32                 transformFeedbackDraw{};
};
struct VkPipelineRasterizationStateStreamCreateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT;
    const  void *                                                                       pNext{};
    VkPipelineRasterizationStateStreamCreateFlagsEXT                   flags{};
    uint32_t                                                                           rasterizationStream{};
};
struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
    VkStructureType sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV;
    void *     pNext{};
    VkBool32                         representativeFragmentTest{};
};
struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV;
    const  void *     pNext{};
    VkBool32         representativeFragmentTestEnable{};
};
struct VkPhysicalDeviceExclusiveScissorFeaturesNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV;
    void *                             pNext{};
    VkBool32                           exclusiveScissor{};
};
struct VkPipelineViewportExclusiveScissorStateCreateInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV;
    const  void *                                                        pNext{};
    uint32_t                                            exclusiveScissorCount{};
    const  VkRect2D *  pExclusiveScissors{};
};
struct VkPhysicalDeviceCornerSampledImageFeaturesNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV;
    void *                               pNext{};
    VkBool32                             cornerSampledImage{};
};
struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV;
    void *                             pNext{};
    VkBool32                           computeDerivativeGroupQuads{};
    VkBool32                           computeDerivativeGroupLinear{};
};
struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV;
    void *                             pNext{};
    VkBool32                           fragmentShaderBarycentric{};
};
struct VkPhysicalDeviceShaderImageFootprintFeaturesNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV;
    void *                               pNext{};
    VkBool32                             imageFootprint{};
};
struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV;
    void *                             pNext{};
    VkBool32                           dedicatedAllocationImageAliasing{};
};
struct VkShadingRatePaletteNV {
    uint32_t                                                                 shadingRatePaletteEntryCount{};
    const  VkShadingRatePaletteEntryNV *   pShadingRatePaletteEntries{};
};
struct VkPipelineViewportShadingRateImageStateCreateInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV;
    const  void *                                                              pNext{};
    VkBool32                                                                  shadingRateImageEnable{};
    uint32_t                                                  viewportCount{};
    const  VkShadingRatePaletteNV *  pShadingRatePalettes{};
};
struct VkPhysicalDeviceShadingRateImageFeaturesNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV;
    void *                                pNext{};
    VkBool32                              shadingRateImage{};
    VkBool32                              shadingRateCoarseSampleOrder{};
};
struct VkPhysicalDeviceShadingRateImagePropertiesNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV;
    void *                                pNext{};
    VkExtent2D                            shadingRateTexelSize{};
    uint32_t                              shadingRatePaletteSize{};
    uint32_t                              shadingRateMaxCoarseSamples{};
};
struct VkCoarseSampleLocationNV {
    uint32_t                              pixelX{};
    uint32_t                              pixelY{};
    uint32_t                              sample{};
};
struct VkCoarseSampleOrderCustomNV {
    VkShadingRatePaletteEntryNV           shadingRate{};
    uint32_t                              sampleCount{};
    uint32_t                              sampleLocationCount{};
    const  VkCoarseSampleLocationNV *  pSampleLocations{};
};
struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV;
    const  void *                                                             pNext{};
    VkCoarseSampleOrderTypeNV                                                sampleOrderType{};
    uint32_t                                                 customSampleOrderCount{};
    const  VkCoarseSampleOrderCustomNV *         pCustomSampleOrders{};
};
struct VkPhysicalDeviceMeshShaderFeaturesNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV;
    void *                                pNext{};
    VkBool32                              taskShader{};
    VkBool32                              meshShader{};
};
struct VkPhysicalDeviceMeshShaderPropertiesNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV;
    void *                                pNext{};
    uint32_t                              maxDrawMeshTasksCount{};
    uint32_t                              maxTaskWorkGroupInvocations{};
    uint32_t                              maxTaskWorkGroupSize [3]{};
    uint32_t                              maxTaskTotalMemorySize{};
    uint32_t                              maxTaskOutputCount{};
    uint32_t                              maxMeshWorkGroupInvocations{};
    uint32_t                              maxMeshWorkGroupSize [3]{};
    uint32_t                              maxMeshTotalMemorySize{};
    uint32_t                              maxMeshOutputVertices{};
    uint32_t                              maxMeshOutputPrimitives{};
    uint32_t                              maxMeshMultiviewViewCount{};
    uint32_t                              meshOutputPerVertexGranularity{};
    uint32_t                              meshOutputPerPrimitiveGranularity{};
};
struct VkDrawMeshTasksIndirectCommandNV {
    uint32_t                 taskCount{};
    uint32_t                 firstTask{};
};
struct VkRayTracingShaderGroupCreateInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV;
    const  void *             pNext{};
    VkRayTracingShaderGroupTypeKHR   type{};
    uint32_t                 generalShader{};
    uint32_t                 closestHitShader{};
    uint32_t                 anyHitShader{};
    uint32_t                 intersectionShader{};
};
struct VkRayTracingShaderGroupCreateInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR;
    const  void *             pNext{};
    VkRayTracingShaderGroupTypeKHR   type{};
    uint32_t                 generalShader{};
    uint32_t                 closestHitShader{};
    uint32_t                 anyHitShader{};
    uint32_t                 intersectionShader{};
    const  void *  pShaderGroupCaptureReplayHandle{};
};
struct VkRayTracingPipelineCreateInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV;
    const  void *             pNext{};
    VkPipelineCreateFlags    flags{};
    uint32_t                 stageCount{};
    const  VkPipelineShaderStageCreateInfo *  pStages{};
    uint32_t                 groupCount{};
    const  VkRayTracingShaderGroupCreateInfoNV *  pGroups{};
    uint32_t                 maxRecursionDepth{};
    VkPipelineLayout         layout{};
    VkPipeline        basePipelineHandle{};
    int32_t                  basePipelineIndex{};
};
struct VkRayTracingPipelineInterfaceCreateInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR;
    const  void *                             pNext{};
    uint32_t                                                 maxPipelineRayPayloadSize{};
    uint32_t                                                 maxPipelineRayHitAttributeSize{};
};
struct VkPipelineLibraryCreateInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR;
    const  void *                                             pNext{};
    uint32_t                                 libraryCount{};
    const  VkPipeline *                    pLibraries{};
};
struct VkRayTracingPipelineCreateInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR;
    const  void *             pNext{};
    VkPipelineCreateFlags    flags{};
    uint32_t   stageCount{};
    const  VkPipelineShaderStageCreateInfo *  pStages{};
    uint32_t   groupCount{};
    const  VkRayTracingShaderGroupCreateInfoKHR *  pGroups{};
    uint32_t                 maxPipelineRayRecursionDepth{};
    const  VkPipelineLibraryCreateInfoKHR *  pLibraryInfo{};
    const  VkRayTracingPipelineInterfaceCreateInfoKHR *  pLibraryInterface{};
    const  VkPipelineDynamicStateCreateInfo *  pDynamicState{};
    VkPipelineLayout         layout{};
    VkPipeline        basePipelineHandle{};
    int32_t                  basePipelineIndex{};
};
struct VkGeometryTrianglesNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV;
    const  void *                 pNext{};
    VkBuffer     vertexData{};
    VkDeviceSize                 vertexOffset{};
    uint32_t                     vertexCount{};
    VkDeviceSize                 vertexStride{};
    VkFormat                     vertexFormat{};
    VkBuffer     indexData{};
    VkDeviceSize                 indexOffset{};
    uint32_t                     indexCount{};
    VkIndexType                  indexType{};
    VkBuffer     transformData{};
    VkDeviceSize                 transformOffset{};
};
struct VkGeometryAABBNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV;
    const  void *                 pNext{};
    VkBuffer     aabbData{};
    uint32_t                     numAABBs{};
    uint32_t                     stride{};
    VkDeviceSize                 offset{};
};
struct VkGeometryDataNV {
    VkGeometryTrianglesNV                    triangles{};
    VkGeometryAABBNV                         aabbs{};
};
struct VkGeometryNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_GEOMETRY_NV;
    const  void *                                    pNext{};
    VkGeometryTypeKHR                    geometryType{};
    VkGeometryDataNV                                geometry{};
    VkGeometryFlagsKHR   flags{};
};
struct VkAccelerationStructureInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV;
    const  void *                             pNext{};
    VkAccelerationStructureTypeNV           type{};
    VkBuildAccelerationStructureFlagsNV flags{};
    uint32_t                 instanceCount{};
    uint32_t                 geometryCount{};
    const  VkGeometryNV *  pGeometries{};
};
struct VkAccelerationStructureCreateInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV;
    const  void *                             pNext{};
    VkDeviceSize                             compactedSize{};
    VkAccelerationStructureInfoNV            info{};
};
struct VkBindAccelerationStructureMemoryInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV;
    const  void *      pNext{};
    VkAccelerationStructureNV         accelerationStructure{};
    VkDeviceMemory                     memory{};
    VkDeviceSize                       memoryOffset{};
    uint32_t           deviceIndexCount{};
    const  uint32_t *   pDeviceIndices{};
};
struct VkWriteDescriptorSetAccelerationStructureKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR;
    const  void *                       pNext{};
    uint32_t                           accelerationStructureCount{};
    const  VkAccelerationStructureKHR *  pAccelerationStructures{};
};
struct VkWriteDescriptorSetAccelerationStructureNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV;
    const  void *       pNext{};
    uint32_t                           accelerationStructureCount{};
    const  VkAccelerationStructureNV *  pAccelerationStructures{};
};
struct VkAccelerationStructureMemoryRequirementsInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV;
    const  void *                                                           pNext{};
    VkAccelerationStructureMemoryRequirementsTypeNV                       type{};
    VkAccelerationStructureNV                                             accelerationStructure{};
};
struct VkPhysicalDeviceAccelerationStructureFeaturesKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR;
    void *                             pNext{};
    VkBool32                           accelerationStructure{};
    VkBool32                           accelerationStructureCaptureReplay{};
    VkBool32                           accelerationStructureIndirectBuild{};
    VkBool32                           accelerationStructureHostCommands{};
    VkBool32                           descriptorBindingAccelerationStructureUpdateAfterBind{};
};
struct VkPhysicalDeviceRayTracingPipelineFeaturesKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR;
    void *             pNext{};
    VkBool32                           rayTracingPipeline{};
    VkBool32                           rayTracingPipelineShaderGroupHandleCaptureReplay{};
    VkBool32                           rayTracingPipelineShaderGroupHandleCaptureReplayMixed{};
    VkBool32                           rayTracingPipelineTraceRaysIndirect{};
    VkBool32                           rayTraversalPrimitiveCulling{};
};
struct VkPhysicalDeviceRayQueryFeaturesKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR;
    void *             pNext{};
    VkBool32                           rayQuery{};
};
struct VkPhysicalDeviceAccelerationStructurePropertiesKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR;
    void *             pNext{};
    uint64_t                           maxGeometryCount{};
    uint64_t                           maxInstanceCount{};
    uint64_t                           maxPrimitiveCount{};
    uint32_t                           maxPerStageDescriptorAccelerationStructures{};
    uint32_t                           maxPerStageDescriptorUpdateAfterBindAccelerationStructures{};
    uint32_t                           maxDescriptorSetAccelerationStructures{};
    uint32_t                           maxDescriptorSetUpdateAfterBindAccelerationStructures{};
    uint32_t                           minAccelerationStructureScratchOffsetAlignment{};
};
struct VkPhysicalDeviceRayTracingPipelinePropertiesKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR;
    void *             pNext{};
    uint32_t                           shaderGroupHandleSize{};
    uint32_t                           maxRayRecursionDepth{};
    uint32_t                           maxShaderGroupStride{};
    uint32_t                           shaderGroupBaseAlignment{};
    uint32_t                           shaderGroupHandleCaptureReplaySize{};
    uint32_t                           maxRayDispatchInvocationCount{};
    uint32_t                           shaderGroupHandleAlignment{};
    uint32_t                           maxRayHitAttributeSize{};
};
struct VkPhysicalDeviceRayTracingPropertiesNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV;
    void *                             pNext{};
    uint32_t                           shaderGroupHandleSize{};
    uint32_t                           maxRecursionDepth{};
    uint32_t                           maxShaderGroupStride{};
    uint32_t                           shaderGroupBaseAlignment{};
    uint64_t                           maxGeometryCount{};
    uint64_t                           maxInstanceCount{};
    uint64_t                           maxTriangleCount{};
    uint32_t                           maxDescriptorSetAccelerationStructures{};
};
struct VkStridedDeviceAddressRegionKHR {
    VkDeviceAddress    deviceAddress{};
    VkDeviceSize                       stride{};
    VkDeviceSize                       size{};
};
struct VkTraceRaysIndirectCommandKHR {
    uint32_t                 width{};
    uint32_t                 height{};
    uint32_t                 depth{};
};
struct VkDrmFormatModifierPropertiesEXT {
    uint64_t   drmFormatModifier{};
    uint32_t   drmFormatModifierPlaneCount{};
    VkFormatFeatureFlags   drmFormatModifierTilingFeatures{};
};
struct VkDrmFormatModifierPropertiesListEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT;
    void *  pNext{};
    uint32_t   drmFormatModifierCount{};
    VkDrmFormatModifierPropertiesEXT *  pDrmFormatModifierProperties{};
};
struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT;
    const  void *  pNext{};
    uint64_t   drmFormatModifier{};
    VkSharingMode   sharingMode{};
    uint32_t   queueFamilyIndexCount{};
    const  uint32_t *  pQueueFamilyIndices{};
};
struct VkImageDrmFormatModifierListCreateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT;
    const  void *  pNext{};
    uint32_t   drmFormatModifierCount{};
    const  uint64_t *  pDrmFormatModifiers{};
};
struct VkImageDrmFormatModifierExplicitCreateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT;
    const  void *  pNext{};
    uint64_t   drmFormatModifier{};
    uint32_t   drmFormatModifierPlaneCount{};
    const  VkSubresourceLayout *  pPlaneLayouts{};
};
struct VkImageDrmFormatModifierPropertiesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT;
    void *  pNext{};
    uint64_t   drmFormatModifier{};
};
struct VkImageStencilUsageCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO;
    const  void *  pNext{};
    VkImageUsageFlags   stencilUsage{};
};
using VkImageStencilUsageCreateInfoEXT = VkImageStencilUsageCreateInfo;
struct VkDeviceMemoryOverallocationCreateInfoAMD {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD;
    const  void *                       pNext{};
    VkMemoryOverallocationBehaviorAMD   overallocationBehavior{};
};
struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT;
    void *                             pNext{};
    VkBool32                           fragmentDensityMap{};
    VkBool32                           fragmentDensityMapDynamic{};
    VkBool32                           fragmentDensityMapNonSubsampledImages{};
};
struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT;
    void *                             pNext{};
    VkBool32                           fragmentDensityMapDeferred{};
};
struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT;
    void *                             pNext{};
    VkExtent2D                         minFragmentDensityTexelSize{};
    VkExtent2D                         maxFragmentDensityTexelSize{};
    VkBool32                           fragmentDensityInvocations{};
};
struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT;
    void *                           pNext{};
    VkBool32                         subsampledLoads{};
    VkBool32                         subsampledCoarseReconstructionEarlyAccess{};
    uint32_t                         maxSubsampledArrayLayers{};
    uint32_t                         maxDescriptorSetSubsampledSamplers{};
};
struct VkRenderPassFragmentDensityMapCreateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT;
    const  void *                       pNext{};
    VkAttachmentReference              fragmentDensityMapAttachment{};
};
struct VkPhysicalDeviceScalarBlockLayoutFeatures {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES;
    void *                                pNext{};
    VkBool32                              scalarBlockLayout{};
};
using VkPhysicalDeviceScalarBlockLayoutFeaturesEXT = VkPhysicalDeviceScalarBlockLayoutFeatures;
struct VkSurfaceProtectedCapabilitiesKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR;
    const  void *  pNext{};
    VkBool32   supportsProtected{};
};
struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES;
    void *                                pNext{};
    VkBool32                              uniformBufferStandardLayout{};
};
using VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR = VkPhysicalDeviceUniformBufferStandardLayoutFeatures;
struct VkPhysicalDeviceDepthClipEnableFeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT;
    void *                   pNext{};
    VkBool32                 depthClipEnable{};
};
struct VkPipelineRasterizationDepthClipStateCreateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT;
    const  void *                                                                  pNext{};
    VkPipelineRasterizationDepthClipStateCreateFlagsEXT           flags{};
    VkBool32                                                                      depthClipEnable{};
};
struct VkPhysicalDeviceMemoryBudgetPropertiesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT;
    void *         pNext{};
    VkDeviceSize                         heapBudget [ VK_MAX_MEMORY_HEAPS ]{};
    VkDeviceSize                         heapUsage [ VK_MAX_MEMORY_HEAPS ]{};
};
struct VkPhysicalDeviceMemoryPriorityFeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT;
    void *         pNext{};
    VkBool32                             memoryPriority{};
};
struct VkMemoryPriorityAllocateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT;
    const  void *                         pNext{};
    float                                priority{};
};
struct VkPhysicalDeviceBufferDeviceAddressFeatures {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES;
    void *         pNext{};
    VkBool32                             bufferDeviceAddress{};
    VkBool32                             bufferDeviceAddressCaptureReplay{};
    VkBool32                             bufferDeviceAddressMultiDevice{};
};
using VkPhysicalDeviceBufferDeviceAddressFeaturesKHR = VkPhysicalDeviceBufferDeviceAddressFeatures;
struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT;
    void *         pNext{};
    VkBool32                             bufferDeviceAddress{};
    VkBool32                             bufferDeviceAddressCaptureReplay{};
    VkBool32                             bufferDeviceAddressMultiDevice{};
};
using VkPhysicalDeviceBufferAddressFeaturesEXT = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;
struct VkBufferDeviceAddressInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO;
    const  void *                                             pNext{};
    VkBuffer                                                 buffer{};
};
using VkBufferDeviceAddressInfoKHR = VkBufferDeviceAddressInfo;
using VkBufferDeviceAddressInfoEXT = VkBufferDeviceAddressInfo;
struct VkBufferOpaqueCaptureAddressCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO;
    const  void *                       pNext{};
    uint64_t                           opaqueCaptureAddress{};
};
using VkBufferOpaqueCaptureAddressCreateInfoKHR = VkBufferOpaqueCaptureAddressCreateInfo;
struct VkBufferDeviceAddressCreateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT;
    const  void *                       pNext{};
    VkDeviceAddress                    deviceAddress{};
};
struct VkPhysicalDeviceImageViewImageFormatInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT;
    void *                             pNext{};
    VkImageViewType                    imageViewType{};
};
struct VkFilterCubicImageViewImageFormatPropertiesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT;
    void *                             pNext{};
    VkBool32                           filterCubic{};
    VkBool32                           filterCubicMinmax{};
};
struct VkPhysicalDeviceImagelessFramebufferFeatures {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES;
    void *                                     pNext{};
    VkBool32                                   imagelessFramebuffer{};
};
using VkPhysicalDeviceImagelessFramebufferFeaturesKHR = VkPhysicalDeviceImagelessFramebufferFeatures;
struct VkFramebufferAttachmentImageInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO;
    const  void *                               pNext{};
    VkImageCreateFlags         flags{};
    VkImageUsageFlags                          usage{};
    uint32_t                                   width{};
    uint32_t                                   height{};
    uint32_t                                   layerCount{};
    uint32_t                   viewFormatCount{};
    const  VkFormat *     pViewFormats{};
};
struct VkFramebufferAttachmentsCreateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO;
    const  void *                               pNext{};
    uint32_t                   attachmentImageInfoCount{};
    const  VkFramebufferAttachmentImageInfo *  pAttachmentImageInfos{};
};
using VkFramebufferAttachmentsCreateInfoKHR = VkFramebufferAttachmentsCreateInfo;
using VkFramebufferAttachmentImageInfoKHR = VkFramebufferAttachmentImageInfo;
struct VkRenderPassAttachmentBeginInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO;
    const  void *                               pNext{};
    uint32_t                   attachmentCount{};
    const  VkImageView *  pAttachments{};
};
using VkRenderPassAttachmentBeginInfoKHR = VkRenderPassAttachmentBeginInfo;
struct VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT;
    void *                   pNext{};
    VkBool32                 textureCompressionASTC_HDR{};
};
struct VkPhysicalDeviceCooperativeMatrixFeaturesNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV;
    void *                                pNext{};
    VkBool32                              cooperativeMatrix{};
    VkBool32                              cooperativeMatrixRobustBufferAccess{};
};
struct VkPhysicalDeviceCooperativeMatrixPropertiesNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV;
    void *                                pNext{};
    VkShaderStageFlags                    cooperativeMatrixSupportedStages{};
};
struct VkCooperativeMatrixPropertiesNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV;
    void *                                pNext{};
    uint32_t                              MSize{};
    uint32_t                              NSize{};
    uint32_t                              KSize{};
    VkComponentTypeNV                     AType{};
    VkComponentTypeNV                     BType{};
    VkComponentTypeNV                     CType{};
    VkComponentTypeNV                     DType{};
    VkScopeNV                             scope{};
};
struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT;
    void *         pNext{};
    VkBool32                             ycbcrImageArrays{};
};
struct VkImageViewHandleInfoNVX {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX;
    const  void *             pNext{};
    VkImageView                           imageView{};
    VkDescriptorType                      descriptorType{};
    VkSampler             sampler{};
};
struct VkImageViewAddressPropertiesNVX {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX;
    void *               pNext{};
    VkDeviceAddress      deviceAddress{};
    VkDeviceSize         size{};
};
#if defined(VK_USE_PLATFORM_GGP)
struct VkPresentFrameTokenGGP {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP;
    const  void *                       pNext{};
    GgpFrameToken                      frameToken{};
};
#endif // defined(VK_USE_PLATFORM_GGP)
struct VkPipelineCreationFeedbackEXT {
    VkPipelineCreationFeedbackFlagsEXT    flags{};
    uint64_t                              duration{};
};
struct VkPipelineCreationFeedbackCreateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT;
    const  void *                          pNext{};
    VkPipelineCreationFeedbackEXT *       pPipelineCreationFeedback{};
    uint32_t                              pipelineStageCreationFeedbackCount{};
    VkPipelineCreationFeedbackEXT *  pPipelineStageCreationFeedbacks{};
};
#if defined(VK_USE_PLATFORM_WIN32_KHR)
struct VkSurfaceFullScreenExclusiveInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT;
    void *                             pNext{};
    VkFullScreenExclusiveEXT           fullScreenExclusive{};
};
struct VkSurfaceFullScreenExclusiveWin32InfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT;
    const  void *       pNext{};
    HMONITOR           hmonitor{};
};
struct VkSurfaceCapabilitiesFullScreenExclusiveEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT;
    void *             pNext{};
    VkBool32           fullScreenExclusiveSupported{};
};
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
struct VkPhysicalDevicePerformanceQueryFeaturesKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR;
    void *       pNext{};
    VkBool32                           performanceCounterQueryPools{};
    VkBool32                           performanceCounterMultipleQueryPools{};
};
struct VkPhysicalDevicePerformanceQueryPropertiesKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR;
    void *  pNext{};
    VkBool32   allowCommandBufferQueryCopies{};
};
struct VkPerformanceCounterKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR;
    const  void *                              pNext{};
    VkPerformanceCounterUnitKHR          unit{};
    VkPerformanceCounterScopeKHR         scope{};
    VkPerformanceCounterStorageKHR       storage{};
    uint8_t   uuid [ VK_UUID_SIZE ]{};
};
struct VkPerformanceCounterDescriptionKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR;
    const  void *                              pNext{};
    VkPerformanceCounterDescriptionFlagsKHR   flags{};
    char                                      name [ VK_MAX_DESCRIPTION_SIZE ]{};
    char                                      category [ VK_MAX_DESCRIPTION_SIZE ]{};
    char                                      description [ VK_MAX_DESCRIPTION_SIZE ]{};
};
struct VkQueryPoolPerformanceCreateInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR;
    const  void *                              pNext{};
    uint32_t                                  queueFamilyIndex{};
    uint32_t                                  counterIndexCount{};
    const  uint32_t *  pCounterIndices{};
};
union VkPerformanceCounterResultKHR {
    int32_t    int32;
    int64_t    int64;
    uint32_t   uint32;
    uint64_t   uint64;
    float      float32;
    double     float64;
};
struct VkAcquireProfilingLockInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR;
    const  void *             pNext{};
    VkAcquireProfilingLockFlagsKHR   flags{};
    uint64_t   timeout{};
};
struct VkPerformanceQuerySubmitInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR;
    const  void *          pNext{};
    uint32_t              counterPassIndex{};
};
struct VkHeadlessSurfaceCreateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT;
    const  void *             pNext{};
    VkHeadlessSurfaceCreateFlagsEXT     flags{};
};
struct VkPhysicalDeviceCoverageReductionModeFeaturesNV {
    VkStructureType sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV;
    void *     pNext{};
    VkBool32                         coverageReductionMode{};
};
struct VkPipelineCoverageReductionStateCreateInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV;
    const  void *                                                         pNext{};
    VkPipelineCoverageReductionStateCreateFlagsNV        flags{};
    VkCoverageReductionModeNV                                            coverageReductionMode{};
};
struct VkFramebufferMixedSamplesCombinationNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV;
    void *                       pNext{};
    VkCoverageReductionModeNV    coverageReductionMode{};
    VkSampleCountFlagBits        rasterizationSamples{};
    VkSampleCountFlags           depthStencilSamples{};
    VkSampleCountFlags           colorSamples{};
};
struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL;
    void *                             pNext{};
    VkBool32                           shaderIntegerFunctions2{};
};
union VkPerformanceValueDataINTEL {
    uint32_t                             value32;
    uint64_t                             value64;
    float                                 valueFloat;
    VkBool32                               valueBool;
    const  char *   valueString;
};
struct VkPerformanceValueINTEL {
    VkPerformanceValueTypeINTEL          type{};
    VkPerformanceValueDataINTEL          data{};
};
struct VkInitializePerformanceApiInfoINTEL {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL;
    const  void *                          pNext{};
    void *                pUserData{};
};
struct VkQueryPoolPerformanceQueryCreateInfoINTEL {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL;
    const  void *                          pNext{};
    VkQueryPoolSamplingModeINTEL          performanceCountersSampling{};
};
using VkQueryPoolCreateInfoINTEL = VkQueryPoolPerformanceQueryCreateInfoINTEL;
struct VkPerformanceMarkerInfoINTEL {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL;
    const  void *                          pNext{};
    uint64_t                              marker{};
};
struct VkPerformanceStreamMarkerInfoINTEL {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL;
    const  void *                          pNext{};
    uint32_t                              marker{};
};
struct VkPerformanceOverrideInfoINTEL {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL;
    const  void *                          pNext{};
    VkPerformanceOverrideTypeINTEL        type{};
    VkBool32                              enable{};
    uint64_t                              parameter{};
};
struct VkPerformanceConfigurationAcquireInfoINTEL {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL;
    const  void *                          pNext{};
    VkPerformanceConfigurationTypeINTEL   type{};
};
struct VkPhysicalDeviceShaderClockFeaturesKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR;
    void *                                pNext{};
    VkBool32                              shaderSubgroupClock{};
    VkBool32                              shaderDeviceClock{};
};
struct VkPhysicalDeviceIndexTypeUint8FeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT;
    void *         pNext{};
    VkBool32                             indexTypeUint8{};
};
struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV;
    void *                           pNext{};
    uint32_t                         shaderSMCount{};
    uint32_t                         shaderWarpsPerSM{};
};
struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV {
    VkStructureType sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV;
    void *     pNext{};
    VkBool32                         shaderSMBuiltins{};
};
struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT;
    void *                   pNext{};
    VkBool32                 fragmentShaderSampleInterlock{};
    VkBool32                 fragmentShaderPixelInterlock{};
    VkBool32                 fragmentShaderShadingRateInterlock{};
};
struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures {
    VkStructureType sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES;
    void *     pNext{};
    VkBool32                         separateDepthStencilLayouts{};
};
using VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR = VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;
struct VkAttachmentReferenceStencilLayout {
    VkStructureType sType = VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT;
    void *     pNext{};
    VkImageLayout                    stencilLayout{};
};
using VkAttachmentReferenceStencilLayoutKHR = VkAttachmentReferenceStencilLayout;
struct VkAttachmentDescriptionStencilLayout {
    VkStructureType sType = VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT;
    void *     pNext{};
    VkImageLayout                    stencilInitialLayout{};
    VkImageLayout                    stencilFinalLayout{};
};
using VkAttachmentDescriptionStencilLayoutKHR = VkAttachmentDescriptionStencilLayout;
struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR;
    void *               pNext{};
    VkBool32             pipelineExecutableInfo{};
};
struct VkPipelineInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR;
    const  void *         pNext{};
    VkPipeline           pipeline{};
};
struct VkPipelineExecutablePropertiesKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR;
    void *               pNext{};
    VkShaderStageFlags   stages{};
    char                 name [ VK_MAX_DESCRIPTION_SIZE ]{};
    char                 description [ VK_MAX_DESCRIPTION_SIZE ]{};
    uint32_t             subgroupSize{};
};
struct VkPipelineExecutableInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR;
    const  void *         pNext{};
    VkPipeline           pipeline{};
    uint32_t             executableIndex{};
};
union VkPipelineExecutableStatisticValueKHR {
    VkBool32             b32;
    int64_t              i64;
    uint64_t             u64;
    double               f64;
};
struct VkPipelineExecutableStatisticKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR;
    void *               pNext{};
    char                 name [ VK_MAX_DESCRIPTION_SIZE ]{};
    char                 description [ VK_MAX_DESCRIPTION_SIZE ]{};
    VkPipelineExecutableStatisticFormatKHR   format{};
    VkPipelineExecutableStatisticValueKHR    value{};
};
struct VkPipelineExecutableInternalRepresentationKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR;
    void *               pNext{};
    char                 name [ VK_MAX_DESCRIPTION_SIZE ]{};
    char                 description [ VK_MAX_DESCRIPTION_SIZE ]{};
    VkBool32             isText{};
    size_t               dataSize{};
    void *  pData{};
};
struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT;
    void *         pNext{};
    VkBool32                             shaderDemoteToHelperInvocation{};
};
struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT;
    void *         pNext{};
    VkBool32                             texelBufferAlignment{};
};
struct VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT;
    void *               pNext{};
    VkDeviceSize                         storageTexelBufferOffsetAlignmentBytes{};
    VkBool32                             storageTexelBufferOffsetSingleTexelAlignment{};
    VkDeviceSize                         uniformTexelBufferOffsetAlignmentBytes{};
    VkBool32                             uniformTexelBufferOffsetSingleTexelAlignment{};
};
struct VkPhysicalDeviceSubgroupSizeControlFeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT;
    void *                           pNext{};
    VkBool32   subgroupSizeControl{};
    VkBool32   computeFullSubgroups{};
};
struct VkPhysicalDeviceSubgroupSizeControlPropertiesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT;
    void *                           pNext{};
    uint32_t   minSubgroupSize{};
    uint32_t   maxSubgroupSize{};
    uint32_t   maxComputeWorkgroupSubgroups{};
    VkShaderStageFlags               requiredSubgroupSizeStages{};
};
struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT;
    void *                   pNext{};
    uint32_t                 requiredSubgroupSize{};
};
struct VkMemoryOpaqueCaptureAddressAllocateInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO;
    const  void *                    pNext{};
    uint64_t                        opaqueCaptureAddress{};
};
using VkMemoryOpaqueCaptureAddressAllocateInfoKHR = VkMemoryOpaqueCaptureAddressAllocateInfo;
struct VkDeviceMemoryOpaqueCaptureAddressInfo {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO;
    const  void *                       pNext{};
    VkDeviceMemory                     memory{};
};
using VkDeviceMemoryOpaqueCaptureAddressInfoKHR = VkDeviceMemoryOpaqueCaptureAddressInfo;
struct VkPhysicalDeviceLineRasterizationFeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT;
    void *         pNext{};
    VkBool32                             rectangularLines{};
    VkBool32                             bresenhamLines{};
    VkBool32                             smoothLines{};
    VkBool32                             stippledRectangularLines{};
    VkBool32                             stippledBresenhamLines{};
    VkBool32                             stippledSmoothLines{};
};
struct VkPhysicalDeviceLineRasterizationPropertiesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT;
    void *                                pNext{};
    uint32_t                              lineSubPixelPrecisionBits{};
};
struct VkPipelineRasterizationLineStateCreateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT;
    const  void *                                                       pNext{};
    VkLineRasterizationModeEXT                                         lineRasterizationMode{};
    VkBool32                                                           stippledLineEnable{};
    uint32_t                                                           lineStippleFactor{};
    uint16_t                                                           lineStipplePattern{};
};
struct VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT;
    void *  pNext{};
    VkBool32                                                           pipelineCreationCacheControl{};
};
struct VkPhysicalDeviceVulkan11Features {
    VkStructureType sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES;
    void *     pNext{};
    VkBool32                           storageBuffer16BitAccess{};
    VkBool32                           uniformAndStorageBuffer16BitAccess{};
    VkBool32                           storagePushConstant16{};
    VkBool32                           storageInputOutput16{};
    VkBool32                           multiview{};
    VkBool32                           multiviewGeometryShader{};
    VkBool32                           multiviewTessellationShader{};
    VkBool32                           variablePointersStorageBuffer{};
    VkBool32                           variablePointers{};
    VkBool32                           protectedMemory{};
    VkBool32                           samplerYcbcrConversion{};
    VkBool32                           shaderDrawParameters{};
};
struct VkPhysicalDeviceVulkan11Properties {
    VkStructureType sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES;
    void *       pNext{};
    uint8_t                            deviceUUID [ VK_UUID_SIZE ]{};
    uint8_t                            driverUUID [ VK_UUID_SIZE ]{};
    uint8_t                            deviceLUID [ VK_LUID_SIZE ]{};
    uint32_t                           deviceNodeMask{};
    VkBool32                           deviceLUIDValid{};
    uint32_t                        subgroupSize{};
    VkShaderStageFlags              subgroupSupportedStages{};
    VkSubgroupFeatureFlags          subgroupSupportedOperations{};
    VkBool32                        subgroupQuadOperationsInAllStages{};
    VkPointClippingBehavior            pointClippingBehavior{};
    uint32_t                           maxMultiviewViewCount{};
    uint32_t                           maxMultiviewInstanceIndex{};
    VkBool32                           protectedNoFault{};
    uint32_t                           maxPerSetDescriptors{};
    VkDeviceSize                       maxMemoryAllocationSize{};
};
struct VkPhysicalDeviceVulkan12Features {
    VkStructureType sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES;
    void *     pNext{};
    VkBool32                           samplerMirrorClampToEdge{};
    VkBool32                           drawIndirectCount{};
    VkBool32                           storageBuffer8BitAccess{};
    VkBool32                           uniformAndStorageBuffer8BitAccess{};
    VkBool32                           storagePushConstant8{};
    VkBool32                           shaderBufferInt64Atomics{};
    VkBool32                           shaderSharedInt64Atomics{};
    VkBool32                           shaderFloat16{};
    VkBool32                           shaderInt8{};
    VkBool32                           descriptorIndexing{};
    VkBool32                           shaderInputAttachmentArrayDynamicIndexing{};
    VkBool32                           shaderUniformTexelBufferArrayDynamicIndexing{};
    VkBool32                           shaderStorageTexelBufferArrayDynamicIndexing{};
    VkBool32                           shaderUniformBufferArrayNonUniformIndexing{};
    VkBool32                           shaderSampledImageArrayNonUniformIndexing{};
    VkBool32                           shaderStorageBufferArrayNonUniformIndexing{};
    VkBool32                           shaderStorageImageArrayNonUniformIndexing{};
    VkBool32                           shaderInputAttachmentArrayNonUniformIndexing{};
    VkBool32                           shaderUniformTexelBufferArrayNonUniformIndexing{};
    VkBool32                           shaderStorageTexelBufferArrayNonUniformIndexing{};
    VkBool32                           descriptorBindingUniformBufferUpdateAfterBind{};
    VkBool32                           descriptorBindingSampledImageUpdateAfterBind{};
    VkBool32                           descriptorBindingStorageImageUpdateAfterBind{};
    VkBool32                           descriptorBindingStorageBufferUpdateAfterBind{};
    VkBool32                           descriptorBindingUniformTexelBufferUpdateAfterBind{};
    VkBool32                           descriptorBindingStorageTexelBufferUpdateAfterBind{};
    VkBool32                           descriptorBindingUpdateUnusedWhilePending{};
    VkBool32                           descriptorBindingPartiallyBound{};
    VkBool32                           descriptorBindingVariableDescriptorCount{};
    VkBool32                           runtimeDescriptorArray{};
    VkBool32                           samplerFilterMinmax{};
    VkBool32                           scalarBlockLayout{};
    VkBool32                           imagelessFramebuffer{};
    VkBool32                           uniformBufferStandardLayout{};
    VkBool32                           shaderSubgroupExtendedTypes{};
    VkBool32                           separateDepthStencilLayouts{};
    VkBool32                           hostQueryReset{};
    VkBool32                           timelineSemaphore{};
    VkBool32                           bufferDeviceAddress{};
    VkBool32                           bufferDeviceAddressCaptureReplay{};
    VkBool32                           bufferDeviceAddressMultiDevice{};
    VkBool32                           vulkanMemoryModel{};
    VkBool32                           vulkanMemoryModelDeviceScope{};
    VkBool32                           vulkanMemoryModelAvailabilityVisibilityChains{};
    VkBool32                           shaderOutputViewportIndex{};
    VkBool32                           shaderOutputLayer{};
    VkBool32                           subgroupBroadcastDynamicId{};
};
struct VkPhysicalDeviceVulkan12Properties {
    VkStructureType sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES;
    void *     pNext{};
    VkDriverId                         driverID{};
    char                               driverName [ VK_MAX_DRIVER_NAME_SIZE ]{};
    char                               driverInfo [ VK_MAX_DRIVER_INFO_SIZE ]{};
    VkConformanceVersion               conformanceVersion{};
    VkShaderFloatControlsIndependence denormBehaviorIndependence{};
    VkShaderFloatControlsIndependence roundingModeIndependence{};
    VkBool32                           shaderSignedZeroInfNanPreserveFloat16{};
    VkBool32                           shaderSignedZeroInfNanPreserveFloat32{};
    VkBool32                           shaderSignedZeroInfNanPreserveFloat64{};
    VkBool32                           shaderDenormPreserveFloat16{};
    VkBool32                           shaderDenormPreserveFloat32{};
    VkBool32                           shaderDenormPreserveFloat64{};
    VkBool32                           shaderDenormFlushToZeroFloat16{};
    VkBool32                           shaderDenormFlushToZeroFloat32{};
    VkBool32                           shaderDenormFlushToZeroFloat64{};
    VkBool32                           shaderRoundingModeRTEFloat16{};
    VkBool32                           shaderRoundingModeRTEFloat32{};
    VkBool32                           shaderRoundingModeRTEFloat64{};
    VkBool32                           shaderRoundingModeRTZFloat16{};
    VkBool32                           shaderRoundingModeRTZFloat32{};
    VkBool32                           shaderRoundingModeRTZFloat64{};
    uint32_t                           maxUpdateAfterBindDescriptorsInAllPools{};
    VkBool32                           shaderUniformBufferArrayNonUniformIndexingNative{};
    VkBool32                           shaderSampledImageArrayNonUniformIndexingNative{};
    VkBool32                           shaderStorageBufferArrayNonUniformIndexingNative{};
    VkBool32                           shaderStorageImageArrayNonUniformIndexingNative{};
    VkBool32                           shaderInputAttachmentArrayNonUniformIndexingNative{};
    VkBool32                           robustBufferAccessUpdateAfterBind{};
    VkBool32                           quadDivergentImplicitLod{};
    uint32_t                           maxPerStageDescriptorUpdateAfterBindSamplers{};
    uint32_t                           maxPerStageDescriptorUpdateAfterBindUniformBuffers{};
    uint32_t                           maxPerStageDescriptorUpdateAfterBindStorageBuffers{};
    uint32_t                           maxPerStageDescriptorUpdateAfterBindSampledImages{};
    uint32_t                           maxPerStageDescriptorUpdateAfterBindStorageImages{};
    uint32_t                           maxPerStageDescriptorUpdateAfterBindInputAttachments{};
    uint32_t                           maxPerStageUpdateAfterBindResources{};
    uint32_t                           maxDescriptorSetUpdateAfterBindSamplers{};
    uint32_t                           maxDescriptorSetUpdateAfterBindUniformBuffers{};
    uint32_t                           maxDescriptorSetUpdateAfterBindUniformBuffersDynamic{};
    uint32_t                           maxDescriptorSetUpdateAfterBindStorageBuffers{};
    uint32_t                           maxDescriptorSetUpdateAfterBindStorageBuffersDynamic{};
    uint32_t                           maxDescriptorSetUpdateAfterBindSampledImages{};
    uint32_t                           maxDescriptorSetUpdateAfterBindStorageImages{};
    uint32_t                           maxDescriptorSetUpdateAfterBindInputAttachments{};
    VkResolveModeFlags                 supportedDepthResolveModes{};
    VkResolveModeFlags                 supportedStencilResolveModes{};
    VkBool32                           independentResolveNone{};
    VkBool32                           independentResolve{};
    VkBool32                           filterMinmaxSingleComponentFormats{};
    VkBool32                           filterMinmaxImageComponentMapping{};
    uint64_t                           maxTimelineSemaphoreValueDifference{};
    VkSampleCountFlags   framebufferIntegerColorSampleCounts{};
};
struct VkPipelineCompilerControlCreateInfoAMD {
    VkStructureType     sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD;
    const  void *                                                                             pNext{};
    VkPipelineCompilerControlFlagsAMD                                        compilerControlFlags{};
};
struct VkPhysicalDeviceCoherentMemoryFeaturesAMD {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD;
    void *         pNext{};
    VkBool32                             deviceCoherentMemory{};
};
struct VkPhysicalDeviceToolPropertiesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT;
    void *  pNext{};
    char              name [ VK_MAX_EXTENSION_NAME_SIZE ]{};
    char              version [ VK_MAX_EXTENSION_NAME_SIZE ]{};
    VkToolPurposeFlagsEXT   purposes{};
    char              description [ VK_MAX_DESCRIPTION_SIZE ]{};
    char              layer [ VK_MAX_EXTENSION_NAME_SIZE ]{};
};
struct VkSamplerCustomBorderColorCreateInfoEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT;
    const  void *                                                                             pNext{};
    VkClearColorValue                                                                        customBorderColor{};
    VkFormat                                                                                 format{};
};
struct VkPhysicalDeviceCustomBorderColorPropertiesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT;
    void *                                                                    pNext{};
    uint32_t                                                                                        maxCustomBorderColorSamplers{};
};
struct VkPhysicalDeviceCustomBorderColorFeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT;
    void *         pNext{};
    VkBool32                             customBorderColors{};
    VkBool32                             customBorderColorWithoutFormat{};
};
union VkDeviceOrHostAddressKHR {
    VkDeviceAddress              deviceAddress;
    void *                       hostAddress;
};
union VkDeviceOrHostAddressConstKHR {
    VkDeviceAddress              deviceAddress;
    const  void *                 hostAddress;
};
struct VkAccelerationStructureGeometryTrianglesDataKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR;
    const  void *                    pNext{};
    VkFormat                                        vertexFormat{};
    VkDeviceOrHostAddressConstKHR                   vertexData{};
    VkDeviceSize                                    vertexStride{};
    uint32_t                                        maxVertex{};
    VkIndexType                                     indexType{};
    VkDeviceOrHostAddressConstKHR                   indexData{};
    VkDeviceOrHostAddressConstKHR                   transformData{};
};
struct VkAccelerationStructureGeometryAabbsDataKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR;
    const  void *                            pNext{};
    VkDeviceOrHostAddressConstKHR           data{};
    VkDeviceSize                            stride{};
};
struct VkAccelerationStructureGeometryInstancesDataKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR;
    const  void *                            pNext{};
    VkBool32                                arrayOfPointers{};
    VkDeviceOrHostAddressConstKHR           data{};
};
union VkAccelerationStructureGeometryDataKHR {
    VkAccelerationStructureGeometryTrianglesDataKHR   triangles;
    VkAccelerationStructureGeometryAabbsDataKHR           aabbs;
    VkAccelerationStructureGeometryInstancesDataKHR   instances;
};
struct VkAccelerationStructureGeometryKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR;
    const  void *                             pNext{};
    VkGeometryTypeKHR                        geometryType{};
    VkAccelerationStructureGeometryDataKHR   geometry{};
    VkGeometryFlagsKHR       flags{};
};
struct VkAccelerationStructureBuildGeometryInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR;
    const  void *                                                         pNext{};
    VkAccelerationStructureTypeKHR                                       type{};
    VkBuildAccelerationStructureFlagsKHR                 flags{};
    VkBuildAccelerationStructureModeKHR            mode{};
    VkAccelerationStructureKHR                     srcAccelerationStructure{};
    VkAccelerationStructureKHR                     dstAccelerationStructure{};
    uint32_t                                             geometryCount{};
    const  VkAccelerationStructureGeometryKHR *     pGeometries{};
    const  VkAccelerationStructureGeometryKHR * const*    ppGeometries{};
    VkDeviceOrHostAddressKHR                                             scratchData{};
};
struct VkAccelerationStructureBuildRangeInfoKHR {
    uint32_t                                                  primitiveCount{};
    uint32_t                                                  primitiveOffset{};
    uint32_t                                                  firstVertex{};
    uint32_t                                                  transformOffset{};
};
struct VkAccelerationStructureCreateInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR;
    const  void *                              pNext{};
    VkAccelerationStructureCreateFlagsKHR     createFlags{};
    VkBuffer                                                  buffer{};
    VkDeviceSize                                              offset{};
    VkDeviceSize                                              size{};
    VkAccelerationStructureTypeKHR                            type{};
    VkDeviceAddress                           deviceAddress{};
};
struct VkAabbPositionsKHR {
    float                                                     minX{};
    float                                                     minY{};
    float                                                     minZ{};
    float                                                     maxX{};
    float                                                     maxY{};
    float                                                     maxZ{};
};
using VkAabbPositionsNV = VkAabbPositionsKHR;
struct VkTransformMatrixKHR {
    float                                                     matrix [3][4]{};
};
using VkTransformMatrixNV = VkTransformMatrixKHR;
struct VkAccelerationStructureInstanceKHR {
    VkTransformMatrixKHR                                      transform{};
    uint32_t                                                  instanceCustomIndex :24;
    uint32_t                                                  mask :8;
    uint32_t                                                  instanceShaderBindingTableRecordOffset :24;
    uint32_t                flags :8;
    uint64_t                                                  accelerationStructureReference{};
};
using VkAccelerationStructureInstanceNV = VkAccelerationStructureInstanceKHR;
struct VkAccelerationStructureDeviceAddressInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR;
    const  void *                                             pNext{};
    VkAccelerationStructureKHR                               accelerationStructure{};
};
struct VkAccelerationStructureVersionInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR;
    const  void *                                             pNext{};
    const  uint8_t *                     pVersionData{};
};
struct VkCopyAccelerationStructureInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR;
    const  void *                                             pNext{};
    VkAccelerationStructureKHR                               src{};
    VkAccelerationStructureKHR                               dst{};
    VkCopyAccelerationStructureModeKHR                       mode{};
};
struct VkCopyAccelerationStructureToMemoryInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR;
    const  void *                                             pNext{};
    VkAccelerationStructureKHR                               src{};
    VkDeviceOrHostAddressKHR                                 dst{};
    VkCopyAccelerationStructureModeKHR                       mode{};
};
struct VkCopyMemoryToAccelerationStructureInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR;
    const  void *                                             pNext{};
    VkDeviceOrHostAddressConstKHR                            src{};
    VkAccelerationStructureKHR                               dst{};
    VkCopyAccelerationStructureModeKHR                       mode{};
};
struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT;
    void *         pNext{};
    VkBool32                             extendedDynamicState{};
};
struct VkRenderPassTransformBeginInfoQCOM {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM;
    void *                            pNext{};
    VkSurfaceTransformFlagBitsKHR     transform{};
};
struct VkCopyCommandTransformInfoQCOM {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM;
    const  void *      pNext{};
    VkSurfaceTransformFlagBitsKHR     transform{};
};
struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM;
    void *                            pNext{};
    VkSurfaceTransformFlagBitsKHR     transform{};
    VkRect2D                          renderArea{};
};
struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV {
    VkStructureType sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV;
    void *     pNext{};
    VkBool32                         diagnosticsConfig{};
};
struct VkDeviceDiagnosticsConfigCreateInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV;
    const  void *                                          pNext{};
    VkDeviceDiagnosticsConfigFlagsNV      flags{};
};
struct VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR;
    void *           pNext{};
    VkBool32         shaderZeroInitializeWorkgroupMemory{};
};
struct VkPhysicalDeviceRobustness2FeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT;
    void *         pNext{};
    VkBool32                             robustBufferAccess2{};
    VkBool32                             robustImageAccess2{};
    VkBool32                             nullDescriptor{};
};
struct VkPhysicalDeviceRobustness2PropertiesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT;
    void *         pNext{};
    VkDeviceSize                         robustStorageBufferAccessSizeAlignment{};
    VkDeviceSize                         robustUniformBufferAccessSizeAlignment{};
};
struct VkPhysicalDeviceImageRobustnessFeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT;
    void *         pNext{};
    VkBool32                             robustImageAccess{};
};
struct VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR;
    void *         pNext{};
    VkBool32                             workgroupMemoryExplicitLayout{};
    VkBool32                             workgroupMemoryExplicitLayoutScalarBlockLayout{};
    VkBool32                             workgroupMemoryExplicitLayout8BitAccess{};
    VkBool32                             workgroupMemoryExplicitLayout16BitAccess{};
};
#if defined(VK_ENABLE_BETA_EXTENSIONS)
struct VkPhysicalDevicePortabilitySubsetFeaturesKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR;
    void *         pNext{};
    VkBool32                             constantAlphaColorBlendFactors{};
    VkBool32                             events{};
    VkBool32                             imageViewFormatReinterpretation{};
    VkBool32                             imageViewFormatSwizzle{};
    VkBool32                             imageView2DOn3DImage{};
    VkBool32                             multisampleArrayImage{};
    VkBool32                             mutableComparisonSamplers{};
    VkBool32                             pointPolygons{};
    VkBool32                             samplerMipLodBias{};
    VkBool32                             separateStencilMaskRef{};
    VkBool32                             shaderSampleRateInterpolationFunctions{};
    VkBool32                             tessellationIsolines{};
    VkBool32                             tessellationPointMode{};
    VkBool32                             triangleFans{};
    VkBool32                             vertexAttributeAccessBeyondStride{};
};
struct VkPhysicalDevicePortabilitySubsetPropertiesKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR;
    void *         pNext{};
    uint32_t                             minVertexInputBindingStrideAlignment{};
};
#endif // defined(VK_ENABLE_BETA_EXTENSIONS)
struct VkPhysicalDevice4444FormatsFeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT;
    void *         pNext{};
    VkBool32                             formatA4R4G4B4{};
    VkBool32                             formatA4B4G4R4{};
};
struct VkBufferCopy2KHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR;
    const  void *   pNext{};
    VkDeviceSize   srcOffset{};
    VkDeviceSize   dstOffset{};
    VkDeviceSize   size{};
};
struct VkImageCopy2KHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR;
    const  void *  pNext{};
    VkImageSubresourceLayers   srcSubresource{};
    VkOffset3D   srcOffset{};
    VkImageSubresourceLayers   dstSubresource{};
    VkOffset3D   dstOffset{};
    VkExtent3D   extent{};
};
struct VkImageBlit2KHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR;
    const  void *   pNext{};
    VkImageSubresourceLayers   srcSubresource{};
    VkOffset3D   srcOffsets [2]{};
    VkImageSubresourceLayers   dstSubresource{};
    VkOffset3D   dstOffsets [2]{};
};
struct VkBufferImageCopy2KHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR;
    const  void *   pNext{};
    VkDeviceSize   bufferOffset{};
    uint32_t   bufferRowLength{};
    uint32_t   bufferImageHeight{};
    VkImageSubresourceLayers   imageSubresource{};
    VkOffset3D   imageOffset{};
    VkExtent3D   imageExtent{};
};
struct VkImageResolve2KHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR;
    const  void *   pNext{};
    VkImageSubresourceLayers   srcSubresource{};
    VkOffset3D   srcOffset{};
    VkImageSubresourceLayers   dstSubresource{};
    VkOffset3D   dstOffset{};
    VkExtent3D   extent{};
};
struct VkCopyBufferInfo2KHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR;
    const  void *  pNext{};
    VkBuffer   srcBuffer{};
    VkBuffer   dstBuffer{};
    uint32_t   regionCount{};
    const  VkBufferCopy2KHR *  pRegions{};
};
struct VkCopyImageInfo2KHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR;
    const  void *  pNext{};
    VkImage   srcImage{};
    VkImageLayout   srcImageLayout{};
    VkImage   dstImage{};
    VkImageLayout   dstImageLayout{};
    uint32_t   regionCount{};
    const  VkImageCopy2KHR *  pRegions{};
};
struct VkBlitImageInfo2KHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR;
    const  void *  pNext{};
    VkImage   srcImage{};
    VkImageLayout   srcImageLayout{};
    VkImage   dstImage{};
    VkImageLayout   dstImageLayout{};
    uint32_t   regionCount{};
    const  VkImageBlit2KHR *  pRegions{};
    VkFilter   filter{};
};
struct VkCopyBufferToImageInfo2KHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR;
    const  void *  pNext{};
    VkBuffer   srcBuffer{};
    VkImage   dstImage{};
    VkImageLayout   dstImageLayout{};
    uint32_t   regionCount{};
    const  VkBufferImageCopy2KHR *  pRegions{};
};
struct VkCopyImageToBufferInfo2KHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR;
    const  void *  pNext{};
    VkImage   srcImage{};
    VkImageLayout   srcImageLayout{};
    VkBuffer   dstBuffer{};
    uint32_t   regionCount{};
    const  VkBufferImageCopy2KHR *  pRegions{};
};
struct VkResolveImageInfo2KHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR;
    const  void *  pNext{};
    VkImage   srcImage{};
    VkImageLayout   srcImageLayout{};
    VkImage   dstImage{};
    VkImageLayout   dstImageLayout{};
    uint32_t   regionCount{};
    const  VkImageResolve2KHR *  pRegions{};
};
struct VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT;
    void *                                pNext{};
    VkBool32                              shaderImageInt64Atomics{};
    VkBool32                              sparseImageInt64Atomics{};
};
struct VkFragmentShadingRateAttachmentInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR;
    const  void *                 pNext{};
    const  VkAttachmentReference2 *  pFragmentShadingRateAttachment{};
    VkExtent2D                   shadingRateAttachmentTexelSize{};
};
struct VkPipelineFragmentShadingRateStateCreateInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR;
    const  void *                                 pNext{};
    VkExtent2D                                   fragmentSize{};
    VkFragmentShadingRateCombinerOpKHR           combinerOps [2]{};
};
struct VkPhysicalDeviceFragmentShadingRateFeaturesKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR;
    void *               pNext{};
    VkBool32             pipelineFragmentShadingRate{};
    VkBool32             primitiveFragmentShadingRate{};
    VkBool32             attachmentFragmentShadingRate{};
};
struct VkPhysicalDeviceFragmentShadingRatePropertiesKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR;
    void *                   pNext{};
    VkExtent2D               minFragmentShadingRateAttachmentTexelSize{};
    VkExtent2D               maxFragmentShadingRateAttachmentTexelSize{};
    uint32_t                 maxFragmentShadingRateAttachmentTexelSizeAspectRatio{};
    VkBool32                 primitiveFragmentShadingRateWithMultipleViewports{};
    VkBool32                 layeredShadingRateAttachments{};
    VkBool32                 fragmentShadingRateNonTrivialCombinerOps{};
    VkExtent2D               maxFragmentSize{};
    uint32_t                 maxFragmentSizeAspectRatio{};
    uint32_t                 maxFragmentShadingRateCoverageSamples{};
    VkSampleCountFlagBits    maxFragmentShadingRateRasterizationSamples{};
    VkBool32                 fragmentShadingRateWithShaderDepthStencilWrites{};
    VkBool32                 fragmentShadingRateWithSampleMask{};
    VkBool32                 fragmentShadingRateWithShaderSampleMask{};
    VkBool32                 fragmentShadingRateWithConservativeRasterization{};
    VkBool32                 fragmentShadingRateWithFragmentShaderInterlock{};
    VkBool32                 fragmentShadingRateWithCustomSampleLocations{};
    VkBool32                 fragmentShadingRateStrictMultiplyCombiner{};
};
struct VkPhysicalDeviceFragmentShadingRateKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR;
    void *               pNext{};
    VkSampleCountFlags   sampleCounts{};
    VkExtent2D           fragmentSize{};
};
struct VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR {
    VkStructureType sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR;
    void *     pNext{};
    VkBool32                         shaderTerminateInvocation{};
};
struct VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV;
    void *                               pNext{};
    VkBool32                             fragmentShadingRateEnums{};
    VkBool32                             supersampleFragmentShadingRates{};
    VkBool32                             noInvocationFragmentShadingRates{};
};
struct VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV;
    void *                               pNext{};
    VkSampleCountFlagBits                maxFragmentShadingRateInvocationCount{};
};
struct VkPipelineFragmentShadingRateEnumStateCreateInfoNV {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV;
    const  void *                         pNext{};
    VkFragmentShadingRateTypeNV          shadingRateType{};
    VkFragmentShadingRateNV              shadingRate{};
    VkFragmentShadingRateCombinerOpKHR   combinerOps [2]{};
};
struct VkAccelerationStructureBuildSizesInfoKHR {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR;
    const  void *         pNext{};
    VkDeviceSize                         accelerationStructureSize{};
    VkDeviceSize                         updateScratchSize{};
    VkDeviceSize                         buildScratchSize{};
};
struct VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE;
    void *                      pNext{};
    VkBool32                                          mutableDescriptorType{};
};
struct VkMutableDescriptorTypeListVALVE {
    uint32_t                                            descriptorTypeCount{};
    const  VkDescriptorType *  pDescriptorTypes{};
};
struct VkMutableDescriptorTypeCreateInfoVALVE {
    VkStructureType   sType = VkStructureType::VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE;
    const  void *                                                                       pNext{};
    uint32_t                                                           mutableDescriptorTypeListCount{};
    const  VkMutableDescriptorTypeListVALVE *  pMutableDescriptorTypeLists{};
};
using PFN_vkCreateInstance = VkResult (*) (const  VkInstanceCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkInstance *  pInstance);
using PFN_vkDestroyInstance = void (*) (VkInstance   instance, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkEnumeratePhysicalDevices = VkResult (*) (VkInstance   instance, uint32_t *  pPhysicalDeviceCount, VkPhysicalDevice *  pPhysicalDevices);
using PFN_vkGetDeviceProcAddr = PFN_vkVoidFunction (*) (VkDevice   device, const  char *  pName);
using PFN_vkGetInstanceProcAddr = PFN_vkVoidFunction (*) (VkInstance   instance, const  char *  pName);
using PFN_vkGetPhysicalDeviceProperties = void (*) (VkPhysicalDevice   physicalDevice, VkPhysicalDeviceProperties *  pProperties);
using PFN_vkGetPhysicalDeviceQueueFamilyProperties = void (*) (VkPhysicalDevice   physicalDevice, uint32_t *  pQueueFamilyPropertyCount, VkQueueFamilyProperties *  pQueueFamilyProperties);
using PFN_vkGetPhysicalDeviceMemoryProperties = void (*) (VkPhysicalDevice   physicalDevice, VkPhysicalDeviceMemoryProperties *  pMemoryProperties);
using PFN_vkGetPhysicalDeviceFeatures = void (*) (VkPhysicalDevice   physicalDevice, VkPhysicalDeviceFeatures *  pFeatures);
using PFN_vkGetPhysicalDeviceFormatProperties = void (*) (VkPhysicalDevice   physicalDevice, VkFormat   format, VkFormatProperties *  pFormatProperties);
using PFN_vkGetPhysicalDeviceImageFormatProperties = VkResult (*) (VkPhysicalDevice   physicalDevice, VkFormat   format, VkImageType   type, VkImageTiling   tiling, VkImageUsageFlags   usage, VkImageCreateFlags   flags, VkImageFormatProperties *  pImageFormatProperties);
using PFN_vkCreateDevice = VkResult (*) (VkPhysicalDevice   physicalDevice, const  VkDeviceCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkDevice *  pDevice);
using PFN_vkDestroyDevice = void (*) (VkDevice   device, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkEnumerateInstanceVersion = VkResult (*) (uint32_t *  pApiVersion);
using PFN_vkEnumerateInstanceLayerProperties = VkResult (*) (uint32_t *  pPropertyCount, VkLayerProperties *  pProperties);
using PFN_vkEnumerateInstanceExtensionProperties = VkResult (*) (const  char *  pLayerName, uint32_t *  pPropertyCount, VkExtensionProperties *  pProperties);
using PFN_vkEnumerateDeviceExtensionProperties = VkResult (*) (VkPhysicalDevice   physicalDevice, const  char *  pLayerName, uint32_t *  pPropertyCount, VkExtensionProperties *  pProperties);
using PFN_vkGetDeviceQueue = void (*) (VkDevice   device, uint32_t   queueFamilyIndex, uint32_t   queueIndex, VkQueue *  pQueue);
using PFN_vkQueueSubmit = VkResult (*) (VkQueue   queue, uint32_t   submitCount, const  VkSubmitInfo *  pSubmits, VkFence   fence);
using PFN_vkQueueWaitIdle = VkResult (*) (VkQueue   queue);
using PFN_vkDeviceWaitIdle = VkResult (*) (VkDevice   device);
using PFN_vkAllocateMemory = VkResult (*) (VkDevice   device, const  VkMemoryAllocateInfo *  pAllocateInfo, const  VkAllocationCallbacks *  pAllocator, VkDeviceMemory *  pMemory);
using PFN_vkFreeMemory = void (*) (VkDevice   device, VkDeviceMemory   memory, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkMapMemory = VkResult (*) (VkDevice   device, VkDeviceMemory   memory, VkDeviceSize   offset, VkDeviceSize   size, VkMemoryMapFlags   flags, void **  ppData);
using PFN_vkUnmapMemory = void (*) (VkDevice   device, VkDeviceMemory   memory);
using PFN_vkFlushMappedMemoryRanges = VkResult (*) (VkDevice   device, uint32_t   memoryRangeCount, const  VkMappedMemoryRange *  pMemoryRanges);
using PFN_vkInvalidateMappedMemoryRanges = VkResult (*) (VkDevice   device, uint32_t   memoryRangeCount, const  VkMappedMemoryRange *  pMemoryRanges);
using PFN_vkGetDeviceMemoryCommitment = void (*) (VkDevice   device, VkDeviceMemory   memory, VkDeviceSize *  pCommittedMemoryInBytes);
using PFN_vkGetBufferMemoryRequirements = void (*) (VkDevice   device, VkBuffer   buffer, VkMemoryRequirements *  pMemoryRequirements);
using PFN_vkBindBufferMemory = VkResult (*) (VkDevice   device, VkBuffer   buffer, VkDeviceMemory   memory, VkDeviceSize   memoryOffset);
using PFN_vkGetImageMemoryRequirements = void (*) (VkDevice   device, VkImage   image, VkMemoryRequirements *  pMemoryRequirements);
using PFN_vkBindImageMemory = VkResult (*) (VkDevice   device, VkImage   image, VkDeviceMemory   memory, VkDeviceSize   memoryOffset);
using PFN_vkGetImageSparseMemoryRequirements = void (*) (VkDevice   device, VkImage   image, uint32_t *  pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements *  pSparseMemoryRequirements);
using PFN_vkGetPhysicalDeviceSparseImageFormatProperties = void (*) (VkPhysicalDevice   physicalDevice, VkFormat   format, VkImageType   type, VkSampleCountFlagBits   samples, VkImageUsageFlags   usage, VkImageTiling   tiling, uint32_t *  pPropertyCount, VkSparseImageFormatProperties *  pProperties);
using PFN_vkQueueBindSparse = VkResult (*) (VkQueue   queue, uint32_t   bindInfoCount, const  VkBindSparseInfo *  pBindInfo, VkFence   fence);
using PFN_vkCreateFence = VkResult (*) (VkDevice   device, const  VkFenceCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkFence *  pFence);
using PFN_vkDestroyFence = void (*) (VkDevice   device, VkFence   fence, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkResetFences = VkResult (*) (VkDevice   device, uint32_t   fenceCount, const  VkFence *  pFences);
using PFN_vkGetFenceStatus = VkResult (*) (VkDevice   device, VkFence   fence);
using PFN_vkWaitForFences = VkResult (*) (VkDevice   device, uint32_t   fenceCount, const  VkFence *  pFences, VkBool32   waitAll, uint64_t   timeout);
using PFN_vkCreateSemaphore = VkResult (*) (VkDevice   device, const  VkSemaphoreCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSemaphore *  pSemaphore);
using PFN_vkDestroySemaphore = void (*) (VkDevice   device, VkSemaphore   semaphore, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkCreateEvent = VkResult (*) (VkDevice   device, const  VkEventCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkEvent *  pEvent);
using PFN_vkDestroyEvent = void (*) (VkDevice   device, VkEvent   event, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkGetEventStatus = VkResult (*) (VkDevice   device, VkEvent   event);
using PFN_vkSetEvent = VkResult (*) (VkDevice   device, VkEvent   event);
using PFN_vkResetEvent = VkResult (*) (VkDevice   device, VkEvent   event);
using PFN_vkCreateQueryPool = VkResult (*) (VkDevice   device, const  VkQueryPoolCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkQueryPool *  pQueryPool);
using PFN_vkDestroyQueryPool = void (*) (VkDevice   device, VkQueryPool   queryPool, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkGetQueryPoolResults = VkResult (*) (VkDevice   device, VkQueryPool   queryPool, uint32_t   firstQuery, uint32_t   queryCount, size_t   dataSize, void *  pData, VkDeviceSize   stride, VkQueryResultFlags   flags);
using PFN_vkResetQueryPool = void (*) (VkDevice   device, VkQueryPool   queryPool, uint32_t   firstQuery, uint32_t   queryCount);
using PFN_vkResetQueryPoolEXT = PFN_vkResetQueryPool;
using PFN_vkCreateBuffer = VkResult (*) (VkDevice   device, const  VkBufferCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkBuffer *  pBuffer);
using PFN_vkDestroyBuffer = void (*) (VkDevice   device, VkBuffer   buffer, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkCreateBufferView = VkResult (*) (VkDevice   device, const  VkBufferViewCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkBufferView *  pView);
using PFN_vkDestroyBufferView = void (*) (VkDevice   device, VkBufferView   bufferView, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkCreateImage = VkResult (*) (VkDevice   device, const  VkImageCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkImage *  pImage);
using PFN_vkDestroyImage = void (*) (VkDevice   device, VkImage   image, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkGetImageSubresourceLayout = void (*) (VkDevice   device, VkImage   image, const  VkImageSubresource *  pSubresource, VkSubresourceLayout *  pLayout);
using PFN_vkCreateImageView = VkResult (*) (VkDevice   device, const  VkImageViewCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkImageView *  pView);
using PFN_vkDestroyImageView = void (*) (VkDevice   device, VkImageView   imageView, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkCreateShaderModule = VkResult (*) (VkDevice   device, const  VkShaderModuleCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkShaderModule *  pShaderModule);
using PFN_vkDestroyShaderModule = void (*) (VkDevice   device, VkShaderModule   shaderModule, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkCreatePipelineCache = VkResult (*) (VkDevice   device, const  VkPipelineCacheCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkPipelineCache *  pPipelineCache);
using PFN_vkDestroyPipelineCache = void (*) (VkDevice   device, VkPipelineCache   pipelineCache, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkGetPipelineCacheData = VkResult (*) (VkDevice   device, VkPipelineCache   pipelineCache, size_t *  pDataSize, void *  pData);
using PFN_vkMergePipelineCaches = VkResult (*) (VkDevice   device, VkPipelineCache   dstCache, uint32_t   srcCacheCount, const  VkPipelineCache *  pSrcCaches);
using PFN_vkCreateGraphicsPipelines = VkResult (*) (VkDevice   device, VkPipelineCache   pipelineCache, uint32_t   createInfoCount, const  VkGraphicsPipelineCreateInfo *  pCreateInfos, const  VkAllocationCallbacks *  pAllocator, VkPipeline *  pPipelines);
using PFN_vkCreateComputePipelines = VkResult (*) (VkDevice   device, VkPipelineCache   pipelineCache, uint32_t   createInfoCount, const  VkComputePipelineCreateInfo *  pCreateInfos, const  VkAllocationCallbacks *  pAllocator, VkPipeline *  pPipelines);
using PFN_vkDestroyPipeline = void (*) (VkDevice   device, VkPipeline   pipeline, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkCreatePipelineLayout = VkResult (*) (VkDevice   device, const  VkPipelineLayoutCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkPipelineLayout *  pPipelineLayout);
using PFN_vkDestroyPipelineLayout = void (*) (VkDevice   device, VkPipelineLayout   pipelineLayout, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkCreateSampler = VkResult (*) (VkDevice   device, const  VkSamplerCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSampler *  pSampler);
using PFN_vkDestroySampler = void (*) (VkDevice   device, VkSampler   sampler, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkCreateDescriptorSetLayout = VkResult (*) (VkDevice   device, const  VkDescriptorSetLayoutCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkDescriptorSetLayout *  pSetLayout);
using PFN_vkDestroyDescriptorSetLayout = void (*) (VkDevice   device, VkDescriptorSetLayout   descriptorSetLayout, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkCreateDescriptorPool = VkResult (*) (VkDevice   device, const  VkDescriptorPoolCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkDescriptorPool *  pDescriptorPool);
using PFN_vkDestroyDescriptorPool = void (*) (VkDevice   device, VkDescriptorPool   descriptorPool, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkResetDescriptorPool = VkResult (*) (VkDevice   device, VkDescriptorPool   descriptorPool, VkDescriptorPoolResetFlags   flags);
using PFN_vkAllocateDescriptorSets = VkResult (*) (VkDevice   device, const  VkDescriptorSetAllocateInfo *  pAllocateInfo, VkDescriptorSet *  pDescriptorSets);
using PFN_vkFreeDescriptorSets = VkResult (*) (VkDevice   device, VkDescriptorPool   descriptorPool, uint32_t   descriptorSetCount, const  VkDescriptorSet *  pDescriptorSets);
using PFN_vkUpdateDescriptorSets = void (*) (VkDevice   device, uint32_t   descriptorWriteCount, const  VkWriteDescriptorSet *  pDescriptorWrites, uint32_t   descriptorCopyCount, const  VkCopyDescriptorSet *  pDescriptorCopies);
using PFN_vkCreateFramebuffer = VkResult (*) (VkDevice   device, const  VkFramebufferCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkFramebuffer *  pFramebuffer);
using PFN_vkDestroyFramebuffer = void (*) (VkDevice   device, VkFramebuffer   framebuffer, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkCreateRenderPass = VkResult (*) (VkDevice   device, const  VkRenderPassCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkRenderPass *  pRenderPass);
using PFN_vkDestroyRenderPass = void (*) (VkDevice   device, VkRenderPass   renderPass, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkGetRenderAreaGranularity = void (*) (VkDevice   device, VkRenderPass   renderPass, VkExtent2D *  pGranularity);
using PFN_vkCreateCommandPool = VkResult (*) (VkDevice   device, const  VkCommandPoolCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkCommandPool *  pCommandPool);
using PFN_vkDestroyCommandPool = void (*) (VkDevice   device, VkCommandPool   commandPool, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkResetCommandPool = VkResult (*) (VkDevice   device, VkCommandPool   commandPool, VkCommandPoolResetFlags   flags);
using PFN_vkAllocateCommandBuffers = VkResult (*) (VkDevice   device, const  VkCommandBufferAllocateInfo *  pAllocateInfo, VkCommandBuffer *  pCommandBuffers);
using PFN_vkFreeCommandBuffers = void (*) (VkDevice   device, VkCommandPool   commandPool, uint32_t   commandBufferCount, const  VkCommandBuffer *  pCommandBuffers);
using PFN_vkBeginCommandBuffer = VkResult (*) (VkCommandBuffer   commandBuffer, const  VkCommandBufferBeginInfo *  pBeginInfo);
using PFN_vkEndCommandBuffer = VkResult (*) (VkCommandBuffer   commandBuffer);
using PFN_vkResetCommandBuffer = VkResult (*) (VkCommandBuffer   commandBuffer, VkCommandBufferResetFlags   flags);
using PFN_vkCmdBindPipeline = void (*) (VkCommandBuffer   commandBuffer, VkPipelineBindPoint   pipelineBindPoint, VkPipeline   pipeline);
using PFN_vkCmdSetViewport = void (*) (VkCommandBuffer   commandBuffer, uint32_t   firstViewport, uint32_t   viewportCount, const  VkViewport *  pViewports);
using PFN_vkCmdSetScissor = void (*) (VkCommandBuffer   commandBuffer, uint32_t   firstScissor, uint32_t   scissorCount, const  VkRect2D *  pScissors);
using PFN_vkCmdSetLineWidth = void (*) (VkCommandBuffer   commandBuffer, float   lineWidth);
using PFN_vkCmdSetDepthBias = void (*) (VkCommandBuffer   commandBuffer, float   depthBiasConstantFactor, float   depthBiasClamp, float   depthBiasSlopeFactor);
using PFN_vkCmdSetBlendConstants = void (*) (VkCommandBuffer   commandBuffer, const  float   blendConstants [4]);
using PFN_vkCmdSetDepthBounds = void (*) (VkCommandBuffer   commandBuffer, float   minDepthBounds, float   maxDepthBounds);
using PFN_vkCmdSetStencilCompareMask = void (*) (VkCommandBuffer   commandBuffer, VkStencilFaceFlags   faceMask, uint32_t   compareMask);
using PFN_vkCmdSetStencilWriteMask = void (*) (VkCommandBuffer   commandBuffer, VkStencilFaceFlags   faceMask, uint32_t   writeMask);
using PFN_vkCmdSetStencilReference = void (*) (VkCommandBuffer   commandBuffer, VkStencilFaceFlags   faceMask, uint32_t   reference);
using PFN_vkCmdBindDescriptorSets = void (*) (VkCommandBuffer   commandBuffer, VkPipelineBindPoint   pipelineBindPoint, VkPipelineLayout   layout, uint32_t   firstSet, uint32_t   descriptorSetCount, const  VkDescriptorSet *  pDescriptorSets, uint32_t   dynamicOffsetCount, const  uint32_t *  pDynamicOffsets);
using PFN_vkCmdBindIndexBuffer = void (*) (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, VkIndexType   indexType);
using PFN_vkCmdBindVertexBuffers = void (*) (VkCommandBuffer   commandBuffer, uint32_t   firstBinding, uint32_t   bindingCount, const  VkBuffer *  pBuffers, const  VkDeviceSize *  pOffsets);
using PFN_vkCmdDraw = void (*) (VkCommandBuffer   commandBuffer, uint32_t   vertexCount, uint32_t   instanceCount, uint32_t   firstVertex, uint32_t   firstInstance);
using PFN_vkCmdDrawIndexed = void (*) (VkCommandBuffer   commandBuffer, uint32_t   indexCount, uint32_t   instanceCount, uint32_t   firstIndex, int32_t   vertexOffset, uint32_t   firstInstance);
using PFN_vkCmdDrawIndirect = void (*) (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, uint32_t   drawCount, uint32_t   stride);
using PFN_vkCmdDrawIndexedIndirect = void (*) (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, uint32_t   drawCount, uint32_t   stride);
using PFN_vkCmdDispatch = void (*) (VkCommandBuffer   commandBuffer, uint32_t   groupCountX, uint32_t   groupCountY, uint32_t   groupCountZ);
using PFN_vkCmdDispatchIndirect = void (*) (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset);
using PFN_vkCmdCopyBuffer = void (*) (VkCommandBuffer   commandBuffer, VkBuffer   srcBuffer, VkBuffer   dstBuffer, uint32_t   regionCount, const  VkBufferCopy *  pRegions);
using PFN_vkCmdCopyImage = void (*) (VkCommandBuffer   commandBuffer, VkImage   srcImage, VkImageLayout   srcImageLayout, VkImage   dstImage, VkImageLayout   dstImageLayout, uint32_t   regionCount, const  VkImageCopy *  pRegions);
using PFN_vkCmdBlitImage = void (*) (VkCommandBuffer   commandBuffer, VkImage   srcImage, VkImageLayout   srcImageLayout, VkImage   dstImage, VkImageLayout   dstImageLayout, uint32_t   regionCount, const  VkImageBlit *  pRegions, VkFilter   filter);
using PFN_vkCmdCopyBufferToImage = void (*) (VkCommandBuffer   commandBuffer, VkBuffer   srcBuffer, VkImage   dstImage, VkImageLayout   dstImageLayout, uint32_t   regionCount, const  VkBufferImageCopy *  pRegions);
using PFN_vkCmdCopyImageToBuffer = void (*) (VkCommandBuffer   commandBuffer, VkImage   srcImage, VkImageLayout   srcImageLayout, VkBuffer   dstBuffer, uint32_t   regionCount, const  VkBufferImageCopy *  pRegions);
using PFN_vkCmdUpdateBuffer = void (*) (VkCommandBuffer   commandBuffer, VkBuffer   dstBuffer, VkDeviceSize   dstOffset, VkDeviceSize   dataSize, const  void *  pData);
using PFN_vkCmdFillBuffer = void (*) (VkCommandBuffer   commandBuffer, VkBuffer   dstBuffer, VkDeviceSize   dstOffset, VkDeviceSize   size, uint32_t   data);
using PFN_vkCmdClearColorImage = void (*) (VkCommandBuffer   commandBuffer, VkImage   image, VkImageLayout   imageLayout, const  VkClearColorValue *  pColor, uint32_t   rangeCount, const  VkImageSubresourceRange *  pRanges);
using PFN_vkCmdClearDepthStencilImage = void (*) (VkCommandBuffer   commandBuffer, VkImage   image, VkImageLayout   imageLayout, const  VkClearDepthStencilValue *  pDepthStencil, uint32_t   rangeCount, const  VkImageSubresourceRange *  pRanges);
using PFN_vkCmdClearAttachments = void (*) (VkCommandBuffer   commandBuffer, uint32_t   attachmentCount, const  VkClearAttachment *  pAttachments, uint32_t   rectCount, const  VkClearRect *  pRects);
using PFN_vkCmdResolveImage = void (*) (VkCommandBuffer   commandBuffer, VkImage   srcImage, VkImageLayout   srcImageLayout, VkImage   dstImage, VkImageLayout   dstImageLayout, uint32_t   regionCount, const  VkImageResolve *  pRegions);
using PFN_vkCmdSetEvent = void (*) (VkCommandBuffer   commandBuffer, VkEvent   event, VkPipelineStageFlags   stageMask);
using PFN_vkCmdResetEvent = void (*) (VkCommandBuffer   commandBuffer, VkEvent   event, VkPipelineStageFlags   stageMask);
using PFN_vkCmdWaitEvents = void (*) (VkCommandBuffer   commandBuffer, uint32_t   eventCount, const  VkEvent *  pEvents, VkPipelineStageFlags   srcStageMask, VkPipelineStageFlags   dstStageMask, uint32_t   memoryBarrierCount, const  VkMemoryBarrier *  pMemoryBarriers, uint32_t   bufferMemoryBarrierCount, const  VkBufferMemoryBarrier *  pBufferMemoryBarriers, uint32_t   imageMemoryBarrierCount, const  VkImageMemoryBarrier *  pImageMemoryBarriers);
using PFN_vkCmdPipelineBarrier = void (*) (VkCommandBuffer   commandBuffer, VkPipelineStageFlags   srcStageMask, VkPipelineStageFlags   dstStageMask, VkDependencyFlags   dependencyFlags, uint32_t   memoryBarrierCount, const  VkMemoryBarrier *  pMemoryBarriers, uint32_t   bufferMemoryBarrierCount, const  VkBufferMemoryBarrier *  pBufferMemoryBarriers, uint32_t   imageMemoryBarrierCount, const  VkImageMemoryBarrier *  pImageMemoryBarriers);
using PFN_vkCmdBeginQuery = void (*) (VkCommandBuffer   commandBuffer, VkQueryPool   queryPool, uint32_t   query, VkQueryControlFlags   flags);
using PFN_vkCmdEndQuery = void (*) (VkCommandBuffer   commandBuffer, VkQueryPool   queryPool, uint32_t   query);
using PFN_vkCmdBeginConditionalRenderingEXT = void (*) (VkCommandBuffer   commandBuffer, const  VkConditionalRenderingBeginInfoEXT *  pConditionalRenderingBegin);
using PFN_vkCmdEndConditionalRenderingEXT = void (*) (VkCommandBuffer   commandBuffer);
using PFN_vkCmdResetQueryPool = void (*) (VkCommandBuffer   commandBuffer, VkQueryPool   queryPool, uint32_t   firstQuery, uint32_t   queryCount);
using PFN_vkCmdWriteTimestamp = void (*) (VkCommandBuffer   commandBuffer, VkPipelineStageFlagBits   pipelineStage, VkQueryPool   queryPool, uint32_t   query);
using PFN_vkCmdCopyQueryPoolResults = void (*) (VkCommandBuffer   commandBuffer, VkQueryPool   queryPool, uint32_t   firstQuery, uint32_t   queryCount, VkBuffer   dstBuffer, VkDeviceSize   dstOffset, VkDeviceSize   stride, VkQueryResultFlags   flags);
using PFN_vkCmdPushConstants = void (*) (VkCommandBuffer   commandBuffer, VkPipelineLayout   layout, VkShaderStageFlags   stageFlags, uint32_t   offset, uint32_t   size, const  void *  pValues);
using PFN_vkCmdBeginRenderPass = void (*) (VkCommandBuffer   commandBuffer, const  VkRenderPassBeginInfo *  pRenderPassBegin, VkSubpassContents   contents);
using PFN_vkCmdNextSubpass = void (*) (VkCommandBuffer   commandBuffer, VkSubpassContents   contents);
using PFN_vkCmdEndRenderPass = void (*) (VkCommandBuffer   commandBuffer);
using PFN_vkCmdExecuteCommands = void (*) (VkCommandBuffer   commandBuffer, uint32_t   commandBufferCount, const  VkCommandBuffer *  pCommandBuffers);
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
using PFN_vkCreateAndroidSurfaceKHR = VkResult (*) (VkInstance   instance, const  VkAndroidSurfaceCreateInfoKHR *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
#endif // defined(VK_USE_PLATFORM_ANDROID_KHR)
using PFN_vkGetPhysicalDeviceDisplayPropertiesKHR = VkResult (*) (VkPhysicalDevice   physicalDevice, uint32_t *  pPropertyCount, VkDisplayPropertiesKHR *  pProperties);
using PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = VkResult (*) (VkPhysicalDevice   physicalDevice, uint32_t *  pPropertyCount, VkDisplayPlanePropertiesKHR *  pProperties);
using PFN_vkGetDisplayPlaneSupportedDisplaysKHR = VkResult (*) (VkPhysicalDevice   physicalDevice, uint32_t   planeIndex, uint32_t *  pDisplayCount, VkDisplayKHR *  pDisplays);
using PFN_vkGetDisplayModePropertiesKHR = VkResult (*) (VkPhysicalDevice   physicalDevice, VkDisplayKHR   display, uint32_t *  pPropertyCount, VkDisplayModePropertiesKHR *  pProperties);
using PFN_vkCreateDisplayModeKHR = VkResult (*) (VkPhysicalDevice   physicalDevice, VkDisplayKHR   display, const  VkDisplayModeCreateInfoKHR *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkDisplayModeKHR *  pMode);
using PFN_vkGetDisplayPlaneCapabilitiesKHR = VkResult (*) (VkPhysicalDevice   physicalDevice, VkDisplayModeKHR   mode, uint32_t   planeIndex, VkDisplayPlaneCapabilitiesKHR *  pCapabilities);
using PFN_vkCreateDisplayPlaneSurfaceKHR = VkResult (*) (VkInstance   instance, const  VkDisplaySurfaceCreateInfoKHR *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
using PFN_vkCreateSharedSwapchainsKHR = VkResult (*) (VkDevice   device, uint32_t   swapchainCount, const  VkSwapchainCreateInfoKHR *  pCreateInfos, const  VkAllocationCallbacks *  pAllocator, VkSwapchainKHR *  pSwapchains);
using PFN_vkDestroySurfaceKHR = void (*) (VkInstance   instance, VkSurfaceKHR   surface, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkGetPhysicalDeviceSurfaceSupportKHR = VkResult (*) (VkPhysicalDevice   physicalDevice, uint32_t   queueFamilyIndex, VkSurfaceKHR   surface, VkBool32 *  pSupported);
using PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = VkResult (*) (VkPhysicalDevice   physicalDevice, VkSurfaceKHR   surface, VkSurfaceCapabilitiesKHR *  pSurfaceCapabilities);
using PFN_vkGetPhysicalDeviceSurfaceFormatsKHR = VkResult (*) (VkPhysicalDevice   physicalDevice, VkSurfaceKHR   surface, uint32_t *  pSurfaceFormatCount, VkSurfaceFormatKHR *  pSurfaceFormats);
using PFN_vkGetPhysicalDeviceSurfacePresentModesKHR = VkResult (*) (VkPhysicalDevice   physicalDevice, VkSurfaceKHR   surface, uint32_t *  pPresentModeCount, VkPresentModeKHR *  pPresentModes);
using PFN_vkCreateSwapchainKHR = VkResult (*) (VkDevice   device, const  VkSwapchainCreateInfoKHR *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSwapchainKHR *  pSwapchain);
using PFN_vkDestroySwapchainKHR = void (*) (VkDevice   device, VkSwapchainKHR   swapchain, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkGetSwapchainImagesKHR = VkResult (*) (VkDevice   device, VkSwapchainKHR   swapchain, uint32_t *  pSwapchainImageCount, VkImage *  pSwapchainImages);
using PFN_vkAcquireNextImageKHR = VkResult (*) (VkDevice   device, VkSwapchainKHR   swapchain, uint64_t   timeout, VkSemaphore   semaphore, VkFence   fence, uint32_t *  pImageIndex);
using PFN_vkQueuePresentKHR = VkResult (*) (VkQueue   queue, const  VkPresentInfoKHR *  pPresentInfo);
#if defined(VK_USE_PLATFORM_VI_NN)
using PFN_vkCreateViSurfaceNN = VkResult (*) (VkInstance   instance, const  VkViSurfaceCreateInfoNN *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
#endif // defined(VK_USE_PLATFORM_VI_NN)
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
using PFN_vkCreateWaylandSurfaceKHR = VkResult (*) (VkInstance   instance, const  VkWaylandSurfaceCreateInfoKHR *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
using PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR = VkBool32 (*) (VkPhysicalDevice   physicalDevice, uint32_t   queueFamilyIndex, struct  wl_display *  display);
#endif // defined(VK_USE_PLATFORM_WAYLAND_KHR)
#if defined(VK_USE_PLATFORM_WIN32_KHR)
using PFN_vkCreateWin32SurfaceKHR = VkResult (*) (VkInstance   instance, const  VkWin32SurfaceCreateInfoKHR *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
using PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR = VkBool32 (*) (VkPhysicalDevice   physicalDevice, uint32_t   queueFamilyIndex);
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
#if defined(VK_USE_PLATFORM_XLIB_KHR)
using PFN_vkCreateXlibSurfaceKHR = VkResult (*) (VkInstance   instance, const  VkXlibSurfaceCreateInfoKHR *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
using PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR = VkBool32 (*) (VkPhysicalDevice   physicalDevice, uint32_t   queueFamilyIndex, Display *  dpy, VisualID   visualID);
#endif // defined(VK_USE_PLATFORM_XLIB_KHR)
#if defined(VK_USE_PLATFORM_XCB_KHR)
using PFN_vkCreateXcbSurfaceKHR = VkResult (*) (VkInstance   instance, const  VkXcbSurfaceCreateInfoKHR *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
using PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR = VkBool32 (*) (VkPhysicalDevice   physicalDevice, uint32_t   queueFamilyIndex, xcb_connection_t *  connection, xcb_visualid_t   visual_id);
#endif // defined(VK_USE_PLATFORM_XCB_KHR)
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
using PFN_vkCreateDirectFBSurfaceEXT = VkResult (*) (VkInstance   instance, const  VkDirectFBSurfaceCreateInfoEXT *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
using PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT = VkBool32 (*) (VkPhysicalDevice   physicalDevice, uint32_t   queueFamilyIndex, IDirectFB *  dfb);
#endif // defined(VK_USE_PLATFORM_DIRECTFB_EXT)
#if defined(VK_USE_PLATFORM_FUCHSIA)
using PFN_vkCreateImagePipeSurfaceFUCHSIA = VkResult (*) (VkInstance   instance, const  VkImagePipeSurfaceCreateInfoFUCHSIA *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
#endif // defined(VK_USE_PLATFORM_FUCHSIA)
#if defined(VK_USE_PLATFORM_GGP)
using PFN_vkCreateStreamDescriptorSurfaceGGP = VkResult (*) (VkInstance   instance, const  VkStreamDescriptorSurfaceCreateInfoGGP *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
#endif // defined(VK_USE_PLATFORM_GGP)
using PFN_vkCreateDebugReportCallbackEXT = VkResult (*) (VkInstance   instance, const  VkDebugReportCallbackCreateInfoEXT *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkDebugReportCallbackEXT *  pCallback);
using PFN_vkDestroyDebugReportCallbackEXT = void (*) (VkInstance   instance, VkDebugReportCallbackEXT   callback, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkDebugReportMessageEXT = void (*) (VkInstance   instance, VkDebugReportFlagsEXT   flags, VkDebugReportObjectTypeEXT   objectType, uint64_t   object, size_t   location, int32_t   messageCode, const  char *  pLayerPrefix, const  char *  pMessage);
using PFN_vkDebugMarkerSetObjectNameEXT = VkResult (*) (VkDevice   device, const  VkDebugMarkerObjectNameInfoEXT *  pNameInfo);
using PFN_vkDebugMarkerSetObjectTagEXT = VkResult (*) (VkDevice   device, const  VkDebugMarkerObjectTagInfoEXT *  pTagInfo);
using PFN_vkCmdDebugMarkerBeginEXT = void (*) (VkCommandBuffer   commandBuffer, const  VkDebugMarkerMarkerInfoEXT *  pMarkerInfo);
using PFN_vkCmdDebugMarkerEndEXT = void (*) (VkCommandBuffer   commandBuffer);
using PFN_vkCmdDebugMarkerInsertEXT = void (*) (VkCommandBuffer   commandBuffer, const  VkDebugMarkerMarkerInfoEXT *  pMarkerInfo);
using PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = VkResult (*) (VkPhysicalDevice   physicalDevice, VkFormat   format, VkImageType   type, VkImageTiling   tiling, VkImageUsageFlags   usage, VkImageCreateFlags   flags, VkExternalMemoryHandleTypeFlagsNV   externalHandleType, VkExternalImageFormatPropertiesNV *  pExternalImageFormatProperties);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
using PFN_vkGetMemoryWin32HandleNV = VkResult (*) (VkDevice   device, VkDeviceMemory   memory, VkExternalMemoryHandleTypeFlagsNV   handleType, HANDLE *  pHandle);
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
using PFN_vkCmdExecuteGeneratedCommandsNV = void (*) (VkCommandBuffer   commandBuffer, VkBool32   isPreprocessed, const  VkGeneratedCommandsInfoNV *  pGeneratedCommandsInfo);
using PFN_vkCmdPreprocessGeneratedCommandsNV = void (*) (VkCommandBuffer   commandBuffer, const  VkGeneratedCommandsInfoNV *  pGeneratedCommandsInfo);
using PFN_vkCmdBindPipelineShaderGroupNV = void (*) (VkCommandBuffer   commandBuffer, VkPipelineBindPoint   pipelineBindPoint, VkPipeline   pipeline, uint32_t   groupIndex);
using PFN_vkGetGeneratedCommandsMemoryRequirementsNV = void (*) (VkDevice   device, const  VkGeneratedCommandsMemoryRequirementsInfoNV *  pInfo, VkMemoryRequirements2 *  pMemoryRequirements);
using PFN_vkCreateIndirectCommandsLayoutNV = VkResult (*) (VkDevice   device, const  VkIndirectCommandsLayoutCreateInfoNV *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkIndirectCommandsLayoutNV *  pIndirectCommandsLayout);
using PFN_vkDestroyIndirectCommandsLayoutNV = void (*) (VkDevice   device, VkIndirectCommandsLayoutNV   indirectCommandsLayout, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkGetPhysicalDeviceFeatures2 = void (*) (VkPhysicalDevice   physicalDevice, VkPhysicalDeviceFeatures2 *  pFeatures);
using PFN_vkGetPhysicalDeviceFeatures2KHR = PFN_vkGetPhysicalDeviceFeatures2;
using PFN_vkGetPhysicalDeviceProperties2 = void (*) (VkPhysicalDevice   physicalDevice, VkPhysicalDeviceProperties2 *  pProperties);
using PFN_vkGetPhysicalDeviceProperties2KHR = PFN_vkGetPhysicalDeviceProperties2;
using PFN_vkGetPhysicalDeviceFormatProperties2 = void (*) (VkPhysicalDevice   physicalDevice, VkFormat   format, VkFormatProperties2 *  pFormatProperties);
using PFN_vkGetPhysicalDeviceFormatProperties2KHR = PFN_vkGetPhysicalDeviceFormatProperties2;
using PFN_vkGetPhysicalDeviceImageFormatProperties2 = VkResult (*) (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceImageFormatInfo2 *  pImageFormatInfo, VkImageFormatProperties2 *  pImageFormatProperties);
using PFN_vkGetPhysicalDeviceImageFormatProperties2KHR = PFN_vkGetPhysicalDeviceImageFormatProperties2;
using PFN_vkGetPhysicalDeviceQueueFamilyProperties2 = void (*) (VkPhysicalDevice   physicalDevice, uint32_t *  pQueueFamilyPropertyCount, VkQueueFamilyProperties2 *  pQueueFamilyProperties);
using PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR = PFN_vkGetPhysicalDeviceQueueFamilyProperties2;
using PFN_vkGetPhysicalDeviceMemoryProperties2 = void (*) (VkPhysicalDevice   physicalDevice, VkPhysicalDeviceMemoryProperties2 *  pMemoryProperties);
using PFN_vkGetPhysicalDeviceMemoryProperties2KHR = PFN_vkGetPhysicalDeviceMemoryProperties2;
using PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 = void (*) (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceSparseImageFormatInfo2 *  pFormatInfo, uint32_t *  pPropertyCount, VkSparseImageFormatProperties2 *  pProperties);
using PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = PFN_vkGetPhysicalDeviceSparseImageFormatProperties2;
using PFN_vkCmdPushDescriptorSetKHR = void (*) (VkCommandBuffer   commandBuffer, VkPipelineBindPoint   pipelineBindPoint, VkPipelineLayout   layout, uint32_t   set, uint32_t   descriptorWriteCount, const  VkWriteDescriptorSet *  pDescriptorWrites);
using PFN_vkTrimCommandPool = void (*) (VkDevice   device, VkCommandPool   commandPool, VkCommandPoolTrimFlags   flags);
using PFN_vkTrimCommandPoolKHR = PFN_vkTrimCommandPool;
using PFN_vkGetPhysicalDeviceExternalBufferProperties = void (*) (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceExternalBufferInfo *  pExternalBufferInfo, VkExternalBufferProperties *  pExternalBufferProperties);
using PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR = PFN_vkGetPhysicalDeviceExternalBufferProperties;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
using PFN_vkGetMemoryWin32HandleKHR = VkResult (*) (VkDevice   device, const  VkMemoryGetWin32HandleInfoKHR *  pGetWin32HandleInfo, HANDLE *  pHandle);
using PFN_vkGetMemoryWin32HandlePropertiesKHR = VkResult (*) (VkDevice   device, VkExternalMemoryHandleTypeFlagBits   handleType, HANDLE   handle, VkMemoryWin32HandlePropertiesKHR *  pMemoryWin32HandleProperties);
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
using PFN_vkGetMemoryFdKHR = VkResult (*) (VkDevice   device, const  VkMemoryGetFdInfoKHR *  pGetFdInfo, int *  pFd);
using PFN_vkGetMemoryFdPropertiesKHR = VkResult (*) (VkDevice   device, VkExternalMemoryHandleTypeFlagBits   handleType, int   fd, VkMemoryFdPropertiesKHR *  pMemoryFdProperties);
using PFN_vkGetPhysicalDeviceExternalSemaphoreProperties = void (*) (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceExternalSemaphoreInfo *  pExternalSemaphoreInfo, VkExternalSemaphoreProperties *  pExternalSemaphoreProperties);
using PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = PFN_vkGetPhysicalDeviceExternalSemaphoreProperties;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
using PFN_vkGetSemaphoreWin32HandleKHR = VkResult (*) (VkDevice   device, const  VkSemaphoreGetWin32HandleInfoKHR *  pGetWin32HandleInfo, HANDLE *  pHandle);
using PFN_vkImportSemaphoreWin32HandleKHR = VkResult (*) (VkDevice   device, const  VkImportSemaphoreWin32HandleInfoKHR *  pImportSemaphoreWin32HandleInfo);
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
using PFN_vkGetSemaphoreFdKHR = VkResult (*) (VkDevice   device, const  VkSemaphoreGetFdInfoKHR *  pGetFdInfo, int *  pFd);
using PFN_vkImportSemaphoreFdKHR = VkResult (*) (VkDevice   device, const  VkImportSemaphoreFdInfoKHR *  pImportSemaphoreFdInfo);
using PFN_vkGetPhysicalDeviceExternalFenceProperties = void (*) (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceExternalFenceInfo *  pExternalFenceInfo, VkExternalFenceProperties *  pExternalFenceProperties);
using PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR = PFN_vkGetPhysicalDeviceExternalFenceProperties;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
using PFN_vkGetFenceWin32HandleKHR = VkResult (*) (VkDevice   device, const  VkFenceGetWin32HandleInfoKHR *  pGetWin32HandleInfo, HANDLE *  pHandle);
using PFN_vkImportFenceWin32HandleKHR = VkResult (*) (VkDevice   device, const  VkImportFenceWin32HandleInfoKHR *  pImportFenceWin32HandleInfo);
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
using PFN_vkGetFenceFdKHR = VkResult (*) (VkDevice   device, const  VkFenceGetFdInfoKHR *  pGetFdInfo, int *  pFd);
using PFN_vkImportFenceFdKHR = VkResult (*) (VkDevice   device, const  VkImportFenceFdInfoKHR *  pImportFenceFdInfo);
using PFN_vkReleaseDisplayEXT = VkResult (*) (VkPhysicalDevice   physicalDevice, VkDisplayKHR   display);
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
using PFN_vkAcquireXlibDisplayEXT = VkResult (*) (VkPhysicalDevice   physicalDevice, Display *  dpy, VkDisplayKHR   display);
using PFN_vkGetRandROutputDisplayEXT = VkResult (*) (VkPhysicalDevice   physicalDevice, Display *  dpy, RROutput   rrOutput, VkDisplayKHR *  pDisplay);
#endif // defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
#if defined(VK_USE_PLATFORM_WIN32_KHR)
using PFN_vkAcquireWinrtDisplayNV = VkResult (*) (VkPhysicalDevice   physicalDevice, VkDisplayKHR   display);
using PFN_vkGetWinrtDisplayNV = VkResult (*) (VkPhysicalDevice   physicalDevice, uint32_t   deviceRelativeId, VkDisplayKHR *  pDisplay);
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
using PFN_vkDisplayPowerControlEXT = VkResult (*) (VkDevice   device, VkDisplayKHR   display, const  VkDisplayPowerInfoEXT *  pDisplayPowerInfo);
using PFN_vkRegisterDeviceEventEXT = VkResult (*) (VkDevice   device, const  VkDeviceEventInfoEXT *  pDeviceEventInfo, const  VkAllocationCallbacks *  pAllocator, VkFence *  pFence);
using PFN_vkRegisterDisplayEventEXT = VkResult (*) (VkDevice   device, VkDisplayKHR   display, const  VkDisplayEventInfoEXT *  pDisplayEventInfo, const  VkAllocationCallbacks *  pAllocator, VkFence *  pFence);
using PFN_vkGetSwapchainCounterEXT = VkResult (*) (VkDevice   device, VkSwapchainKHR   swapchain, VkSurfaceCounterFlagBitsEXT   counter, uint64_t *  pCounterValue);
using PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT = VkResult (*) (VkPhysicalDevice   physicalDevice, VkSurfaceKHR   surface, VkSurfaceCapabilities2EXT *  pSurfaceCapabilities);
using PFN_vkEnumeratePhysicalDeviceGroups = VkResult (*) (VkInstance   instance, uint32_t *  pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties *  pPhysicalDeviceGroupProperties);
using PFN_vkEnumeratePhysicalDeviceGroupsKHR = PFN_vkEnumeratePhysicalDeviceGroups;
using PFN_vkGetDeviceGroupPeerMemoryFeatures = void (*) (VkDevice   device, uint32_t   heapIndex, uint32_t   localDeviceIndex, uint32_t   remoteDeviceIndex, VkPeerMemoryFeatureFlags *  pPeerMemoryFeatures);
using PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR = PFN_vkGetDeviceGroupPeerMemoryFeatures;
using PFN_vkBindBufferMemory2 = VkResult (*) (VkDevice   device, uint32_t   bindInfoCount, const  VkBindBufferMemoryInfo *  pBindInfos);
using PFN_vkBindBufferMemory2KHR = PFN_vkBindBufferMemory2;
using PFN_vkBindImageMemory2 = VkResult (*) (VkDevice   device, uint32_t   bindInfoCount, const  VkBindImageMemoryInfo *  pBindInfos);
using PFN_vkBindImageMemory2KHR = PFN_vkBindImageMemory2;
using PFN_vkCmdSetDeviceMask = void (*) (VkCommandBuffer   commandBuffer, uint32_t   deviceMask);
using PFN_vkCmdSetDeviceMaskKHR = PFN_vkCmdSetDeviceMask;
using PFN_vkGetDeviceGroupPresentCapabilitiesKHR = VkResult (*) (VkDevice   device, VkDeviceGroupPresentCapabilitiesKHR *  pDeviceGroupPresentCapabilities);
using PFN_vkGetDeviceGroupSurfacePresentModesKHR = VkResult (*) (VkDevice   device, VkSurfaceKHR   surface, VkDeviceGroupPresentModeFlagsKHR *  pModes);
using PFN_vkAcquireNextImage2KHR = VkResult (*) (VkDevice   device, const  VkAcquireNextImageInfoKHR *  pAcquireInfo, uint32_t *  pImageIndex);
using PFN_vkCmdDispatchBase = void (*) (VkCommandBuffer   commandBuffer, uint32_t   baseGroupX, uint32_t   baseGroupY, uint32_t   baseGroupZ, uint32_t   groupCountX, uint32_t   groupCountY, uint32_t   groupCountZ);
using PFN_vkCmdDispatchBaseKHR = PFN_vkCmdDispatchBase;
using PFN_vkGetPhysicalDevicePresentRectanglesKHR = VkResult (*) (VkPhysicalDevice   physicalDevice, VkSurfaceKHR   surface, uint32_t *  pRectCount, VkRect2D *  pRects);
using PFN_vkCreateDescriptorUpdateTemplate = VkResult (*) (VkDevice   device, const  VkDescriptorUpdateTemplateCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkDescriptorUpdateTemplate *  pDescriptorUpdateTemplate);
using PFN_vkCreateDescriptorUpdateTemplateKHR = PFN_vkCreateDescriptorUpdateTemplate;
using PFN_vkDestroyDescriptorUpdateTemplate = void (*) (VkDevice   device, VkDescriptorUpdateTemplate   descriptorUpdateTemplate, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkDestroyDescriptorUpdateTemplateKHR = PFN_vkDestroyDescriptorUpdateTemplate;
using PFN_vkUpdateDescriptorSetWithTemplate = void (*) (VkDevice   device, VkDescriptorSet   descriptorSet, VkDescriptorUpdateTemplate   descriptorUpdateTemplate, const  void *  pData);
using PFN_vkUpdateDescriptorSetWithTemplateKHR = PFN_vkUpdateDescriptorSetWithTemplate;
using PFN_vkCmdPushDescriptorSetWithTemplateKHR = void (*) (VkCommandBuffer   commandBuffer, VkDescriptorUpdateTemplate   descriptorUpdateTemplate, VkPipelineLayout   layout, uint32_t   set, const  void *  pData);
using PFN_vkSetHdrMetadataEXT = void (*) (VkDevice   device, uint32_t   swapchainCount, const  VkSwapchainKHR *  pSwapchains, const  VkHdrMetadataEXT *  pMetadata);
using PFN_vkGetSwapchainStatusKHR = VkResult (*) (VkDevice   device, VkSwapchainKHR   swapchain);
using PFN_vkGetRefreshCycleDurationGOOGLE = VkResult (*) (VkDevice   device, VkSwapchainKHR   swapchain, VkRefreshCycleDurationGOOGLE *  pDisplayTimingProperties);
using PFN_vkGetPastPresentationTimingGOOGLE = VkResult (*) (VkDevice   device, VkSwapchainKHR   swapchain, uint32_t *  pPresentationTimingCount, VkPastPresentationTimingGOOGLE *  pPresentationTimings);
#if defined(VK_USE_PLATFORM_IOS_MVK)
using PFN_vkCreateIOSSurfaceMVK = VkResult (*) (VkInstance   instance, const  VkIOSSurfaceCreateInfoMVK *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
#endif // defined(VK_USE_PLATFORM_IOS_MVK)
#if defined(VK_USE_PLATFORM_MACOS_MVK)
using PFN_vkCreateMacOSSurfaceMVK = VkResult (*) (VkInstance   instance, const  VkMacOSSurfaceCreateInfoMVK *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
#endif // defined(VK_USE_PLATFORM_MACOS_MVK)
#if defined(VK_USE_PLATFORM_METAL_EXT)
using PFN_vkCreateMetalSurfaceEXT = VkResult (*) (VkInstance   instance, const  VkMetalSurfaceCreateInfoEXT *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
#endif // defined(VK_USE_PLATFORM_METAL_EXT)
using PFN_vkCmdSetViewportWScalingNV = void (*) (VkCommandBuffer   commandBuffer, uint32_t   firstViewport, uint32_t   viewportCount, const  VkViewportWScalingNV *  pViewportWScalings);
using PFN_vkCmdSetDiscardRectangleEXT = void (*) (VkCommandBuffer   commandBuffer, uint32_t   firstDiscardRectangle, uint32_t   discardRectangleCount, const  VkRect2D *  pDiscardRectangles);
using PFN_vkCmdSetSampleLocationsEXT = void (*) (VkCommandBuffer   commandBuffer, const  VkSampleLocationsInfoEXT *  pSampleLocationsInfo);
using PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT = void (*) (VkPhysicalDevice   physicalDevice, VkSampleCountFlagBits   samples, VkMultisamplePropertiesEXT *  pMultisampleProperties);
using PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR = VkResult (*) (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceSurfaceInfo2KHR *  pSurfaceInfo, VkSurfaceCapabilities2KHR *  pSurfaceCapabilities);
using PFN_vkGetPhysicalDeviceSurfaceFormats2KHR = VkResult (*) (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceSurfaceInfo2KHR *  pSurfaceInfo, uint32_t *  pSurfaceFormatCount, VkSurfaceFormat2KHR *  pSurfaceFormats);
using PFN_vkGetPhysicalDeviceDisplayProperties2KHR = VkResult (*) (VkPhysicalDevice   physicalDevice, uint32_t *  pPropertyCount, VkDisplayProperties2KHR *  pProperties);
using PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = VkResult (*) (VkPhysicalDevice   physicalDevice, uint32_t *  pPropertyCount, VkDisplayPlaneProperties2KHR *  pProperties);
using PFN_vkGetDisplayModeProperties2KHR = VkResult (*) (VkPhysicalDevice   physicalDevice, VkDisplayKHR   display, uint32_t *  pPropertyCount, VkDisplayModeProperties2KHR *  pProperties);
using PFN_vkGetDisplayPlaneCapabilities2KHR = VkResult (*) (VkPhysicalDevice   physicalDevice, const  VkDisplayPlaneInfo2KHR *  pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR *  pCapabilities);
using PFN_vkGetBufferMemoryRequirements2 = void (*) (VkDevice   device, const  VkBufferMemoryRequirementsInfo2 *  pInfo, VkMemoryRequirements2 *  pMemoryRequirements);
using PFN_vkGetBufferMemoryRequirements2KHR = PFN_vkGetBufferMemoryRequirements2;
using PFN_vkGetImageMemoryRequirements2 = void (*) (VkDevice   device, const  VkImageMemoryRequirementsInfo2 *  pInfo, VkMemoryRequirements2 *  pMemoryRequirements);
using PFN_vkGetImageMemoryRequirements2KHR = PFN_vkGetImageMemoryRequirements2;
using PFN_vkGetImageSparseMemoryRequirements2 = void (*) (VkDevice   device, const  VkImageSparseMemoryRequirementsInfo2 *  pInfo, uint32_t *  pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 *  pSparseMemoryRequirements);
using PFN_vkGetImageSparseMemoryRequirements2KHR = PFN_vkGetImageSparseMemoryRequirements2;
using PFN_vkCreateSamplerYcbcrConversion = VkResult (*) (VkDevice   device, const  VkSamplerYcbcrConversionCreateInfo *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSamplerYcbcrConversion *  pYcbcrConversion);
using PFN_vkCreateSamplerYcbcrConversionKHR = PFN_vkCreateSamplerYcbcrConversion;
using PFN_vkDestroySamplerYcbcrConversion = void (*) (VkDevice   device, VkSamplerYcbcrConversion   ycbcrConversion, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkDestroySamplerYcbcrConversionKHR = PFN_vkDestroySamplerYcbcrConversion;
using PFN_vkGetDeviceQueue2 = void (*) (VkDevice   device, const  VkDeviceQueueInfo2 *  pQueueInfo, VkQueue *  pQueue);
using PFN_vkCreateValidationCacheEXT = VkResult (*) (VkDevice   device, const  VkValidationCacheCreateInfoEXT *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkValidationCacheEXT *  pValidationCache);
using PFN_vkDestroyValidationCacheEXT = void (*) (VkDevice   device, VkValidationCacheEXT   validationCache, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkGetValidationCacheDataEXT = VkResult (*) (VkDevice   device, VkValidationCacheEXT   validationCache, size_t *  pDataSize, void *  pData);
using PFN_vkMergeValidationCachesEXT = VkResult (*) (VkDevice   device, VkValidationCacheEXT   dstCache, uint32_t   srcCacheCount, const  VkValidationCacheEXT *  pSrcCaches);
using PFN_vkGetDescriptorSetLayoutSupport = void (*) (VkDevice   device, const  VkDescriptorSetLayoutCreateInfo *  pCreateInfo, VkDescriptorSetLayoutSupport *  pSupport);
using PFN_vkGetDescriptorSetLayoutSupportKHR = PFN_vkGetDescriptorSetLayoutSupport;
using PFN_vkGetShaderInfoAMD = VkResult (*) (VkDevice   device, VkPipeline   pipeline, VkShaderStageFlagBits   shaderStage, VkShaderInfoTypeAMD   infoType, size_t *  pInfoSize, void *  pInfo);
using PFN_vkSetLocalDimmingAMD = void (*) (VkDevice   device, VkSwapchainKHR   swapChain, VkBool32   localDimmingEnable);
using PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = VkResult (*) (VkPhysicalDevice   physicalDevice, uint32_t *  pTimeDomainCount, VkTimeDomainEXT *  pTimeDomains);
using PFN_vkGetCalibratedTimestampsEXT = VkResult (*) (VkDevice   device, uint32_t   timestampCount, const  VkCalibratedTimestampInfoEXT *  pTimestampInfos, uint64_t *  pTimestamps, uint64_t *  pMaxDeviation);
using PFN_vkSetDebugUtilsObjectNameEXT = VkResult (*) (VkDevice   device, const  VkDebugUtilsObjectNameInfoEXT *  pNameInfo);
using PFN_vkSetDebugUtilsObjectTagEXT = VkResult (*) (VkDevice   device, const  VkDebugUtilsObjectTagInfoEXT *  pTagInfo);
using PFN_vkQueueBeginDebugUtilsLabelEXT = void (*) (VkQueue   queue, const  VkDebugUtilsLabelEXT *  pLabelInfo);
using PFN_vkQueueEndDebugUtilsLabelEXT = void (*) (VkQueue   queue);
using PFN_vkQueueInsertDebugUtilsLabelEXT = void (*) (VkQueue   queue, const  VkDebugUtilsLabelEXT *  pLabelInfo);
using PFN_vkCmdBeginDebugUtilsLabelEXT = void (*) (VkCommandBuffer   commandBuffer, const  VkDebugUtilsLabelEXT *  pLabelInfo);
using PFN_vkCmdEndDebugUtilsLabelEXT = void (*) (VkCommandBuffer   commandBuffer);
using PFN_vkCmdInsertDebugUtilsLabelEXT = void (*) (VkCommandBuffer   commandBuffer, const  VkDebugUtilsLabelEXT *  pLabelInfo);
using PFN_vkCreateDebugUtilsMessengerEXT = VkResult (*) (VkInstance   instance, const  VkDebugUtilsMessengerCreateInfoEXT *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkDebugUtilsMessengerEXT *  pMessenger);
using PFN_vkDestroyDebugUtilsMessengerEXT = void (*) (VkInstance   instance, VkDebugUtilsMessengerEXT   messenger, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkSubmitDebugUtilsMessageEXT = void (*) (VkInstance   instance, VkDebugUtilsMessageSeverityFlagBitsEXT   messageSeverity, VkDebugUtilsMessageTypeFlagsEXT   messageTypes, const  VkDebugUtilsMessengerCallbackDataEXT *  pCallbackData);
using PFN_vkGetMemoryHostPointerPropertiesEXT = VkResult (*) (VkDevice   device, VkExternalMemoryHandleTypeFlagBits   handleType, const  void *  pHostPointer, VkMemoryHostPointerPropertiesEXT *  pMemoryHostPointerProperties);
using PFN_vkCmdWriteBufferMarkerAMD = void (*) (VkCommandBuffer   commandBuffer, VkPipelineStageFlagBits   pipelineStage, VkBuffer   dstBuffer, VkDeviceSize   dstOffset, uint32_t   marker);
using PFN_vkCreateRenderPass2 = VkResult (*) (VkDevice   device, const  VkRenderPassCreateInfo2 *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkRenderPass *  pRenderPass);
using PFN_vkCreateRenderPass2KHR = PFN_vkCreateRenderPass2;
using PFN_vkCmdBeginRenderPass2 = void (*) (VkCommandBuffer   commandBuffer, const  VkRenderPassBeginInfo *       pRenderPassBegin, const  VkSubpassBeginInfo *       pSubpassBeginInfo);
using PFN_vkCmdBeginRenderPass2KHR = PFN_vkCmdBeginRenderPass2;
using PFN_vkCmdNextSubpass2 = void (*) (VkCommandBuffer   commandBuffer, const  VkSubpassBeginInfo *       pSubpassBeginInfo, const  VkSubpassEndInfo *         pSubpassEndInfo);
using PFN_vkCmdNextSubpass2KHR = PFN_vkCmdNextSubpass2;
using PFN_vkCmdEndRenderPass2 = void (*) (VkCommandBuffer   commandBuffer, const  VkSubpassEndInfo *         pSubpassEndInfo);
using PFN_vkCmdEndRenderPass2KHR = PFN_vkCmdEndRenderPass2;
using PFN_vkGetSemaphoreCounterValue = VkResult (*) (VkDevice   device, VkSemaphore   semaphore, uint64_t *  pValue);
using PFN_vkGetSemaphoreCounterValueKHR = PFN_vkGetSemaphoreCounterValue;
using PFN_vkWaitSemaphores = VkResult (*) (VkDevice   device, const  VkSemaphoreWaitInfo *  pWaitInfo, uint64_t   timeout);
using PFN_vkWaitSemaphoresKHR = PFN_vkWaitSemaphores;
using PFN_vkSignalSemaphore = VkResult (*) (VkDevice   device, const  VkSemaphoreSignalInfo *  pSignalInfo);
using PFN_vkSignalSemaphoreKHR = PFN_vkSignalSemaphore;
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
using PFN_vkGetAndroidHardwareBufferPropertiesANDROID = VkResult (*) (VkDevice   device, const struct  AHardwareBuffer *  buffer, VkAndroidHardwareBufferPropertiesANDROID *  pProperties);
using PFN_vkGetMemoryAndroidHardwareBufferANDROID = VkResult (*) (VkDevice   device, const  VkMemoryGetAndroidHardwareBufferInfoANDROID *  pInfo, struct  AHardwareBuffer **  pBuffer);
#endif // defined(VK_USE_PLATFORM_ANDROID_KHR)
using PFN_vkCmdDrawIndirectCount = void (*) (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, VkBuffer   countBuffer, VkDeviceSize   countBufferOffset, uint32_t   maxDrawCount, uint32_t   stride);
using PFN_vkCmdDrawIndirectCountKHR = PFN_vkCmdDrawIndirectCount;
using PFN_vkCmdDrawIndirectCountAMD = PFN_vkCmdDrawIndirectCount;
using PFN_vkCmdDrawIndexedIndirectCount = void (*) (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, VkBuffer   countBuffer, VkDeviceSize   countBufferOffset, uint32_t   maxDrawCount, uint32_t   stride);
using PFN_vkCmdDrawIndexedIndirectCountKHR = PFN_vkCmdDrawIndexedIndirectCount;
using PFN_vkCmdDrawIndexedIndirectCountAMD = PFN_vkCmdDrawIndexedIndirectCount;
using PFN_vkCmdSetCheckpointNV = void (*) (VkCommandBuffer   commandBuffer, const  void *  pCheckpointMarker);
using PFN_vkGetQueueCheckpointDataNV = void (*) (VkQueue   queue, uint32_t *  pCheckpointDataCount, VkCheckpointDataNV *  pCheckpointData);
using PFN_vkCmdBindTransformFeedbackBuffersEXT = void (*) (VkCommandBuffer   commandBuffer, uint32_t   firstBinding, uint32_t   bindingCount, const  VkBuffer *  pBuffers, const  VkDeviceSize *  pOffsets, const  VkDeviceSize *  pSizes);
using PFN_vkCmdBeginTransformFeedbackEXT = void (*) (VkCommandBuffer   commandBuffer, uint32_t   firstCounterBuffer, uint32_t   counterBufferCount, const  VkBuffer *  pCounterBuffers, const  VkDeviceSize *  pCounterBufferOffsets);
using PFN_vkCmdEndTransformFeedbackEXT = void (*) (VkCommandBuffer   commandBuffer, uint32_t   firstCounterBuffer, uint32_t   counterBufferCount, const  VkBuffer *  pCounterBuffers, const  VkDeviceSize *  pCounterBufferOffsets);
using PFN_vkCmdBeginQueryIndexedEXT = void (*) (VkCommandBuffer   commandBuffer, VkQueryPool   queryPool, uint32_t   query, VkQueryControlFlags   flags, uint32_t   index);
using PFN_vkCmdEndQueryIndexedEXT = void (*) (VkCommandBuffer   commandBuffer, VkQueryPool   queryPool, uint32_t   query, uint32_t   index);
using PFN_vkCmdDrawIndirectByteCountEXT = void (*) (VkCommandBuffer   commandBuffer, uint32_t   instanceCount, uint32_t   firstInstance, VkBuffer   counterBuffer, VkDeviceSize   counterBufferOffset, uint32_t   counterOffset, uint32_t   vertexStride);
using PFN_vkCmdSetExclusiveScissorNV = void (*) (VkCommandBuffer   commandBuffer, uint32_t   firstExclusiveScissor, uint32_t   exclusiveScissorCount, const  VkRect2D *  pExclusiveScissors);
using PFN_vkCmdBindShadingRateImageNV = void (*) (VkCommandBuffer   commandBuffer, VkImageView   imageView, VkImageLayout   imageLayout);
using PFN_vkCmdSetViewportShadingRatePaletteNV = void (*) (VkCommandBuffer   commandBuffer, uint32_t   firstViewport, uint32_t   viewportCount, const  VkShadingRatePaletteNV *  pShadingRatePalettes);
using PFN_vkCmdSetCoarseSampleOrderNV = void (*) (VkCommandBuffer   commandBuffer, VkCoarseSampleOrderTypeNV   sampleOrderType, uint32_t   customSampleOrderCount, const  VkCoarseSampleOrderCustomNV *  pCustomSampleOrders);
using PFN_vkCmdDrawMeshTasksNV = void (*) (VkCommandBuffer   commandBuffer, uint32_t   taskCount, uint32_t   firstTask);
using PFN_vkCmdDrawMeshTasksIndirectNV = void (*) (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, uint32_t   drawCount, uint32_t   stride);
using PFN_vkCmdDrawMeshTasksIndirectCountNV = void (*) (VkCommandBuffer   commandBuffer, VkBuffer   buffer, VkDeviceSize   offset, VkBuffer   countBuffer, VkDeviceSize   countBufferOffset, uint32_t   maxDrawCount, uint32_t   stride);
using PFN_vkCompileDeferredNV = VkResult (*) (VkDevice   device, VkPipeline   pipeline, uint32_t   shader);
using PFN_vkCreateAccelerationStructureNV = VkResult (*) (VkDevice   device, const  VkAccelerationStructureCreateInfoNV *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkAccelerationStructureNV *  pAccelerationStructure);
using PFN_vkDestroyAccelerationStructureKHR = void (*) (VkDevice   device, VkAccelerationStructureKHR   accelerationStructure, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkDestroyAccelerationStructureNV = void (*) (VkDevice   device, VkAccelerationStructureNV   accelerationStructure, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkGetAccelerationStructureMemoryRequirementsNV = void (*) (VkDevice   device, const  VkAccelerationStructureMemoryRequirementsInfoNV *  pInfo, VkMemoryRequirements2KHR *  pMemoryRequirements);
using PFN_vkBindAccelerationStructureMemoryNV = VkResult (*) (VkDevice   device, uint32_t   bindInfoCount, const  VkBindAccelerationStructureMemoryInfoNV *  pBindInfos);
using PFN_vkCmdCopyAccelerationStructureNV = void (*) (VkCommandBuffer   commandBuffer, VkAccelerationStructureNV   dst, VkAccelerationStructureNV   src, VkCopyAccelerationStructureModeKHR   mode);
using PFN_vkCmdCopyAccelerationStructureKHR = void (*) (VkCommandBuffer   commandBuffer, const  VkCopyAccelerationStructureInfoKHR *  pInfo);
using PFN_vkCopyAccelerationStructureKHR = VkResult (*) (VkDevice   device, VkDeferredOperationKHR   deferredOperation, const  VkCopyAccelerationStructureInfoKHR *  pInfo);
using PFN_vkCmdCopyAccelerationStructureToMemoryKHR = void (*) (VkCommandBuffer   commandBuffer, const  VkCopyAccelerationStructureToMemoryInfoKHR *  pInfo);
using PFN_vkCopyAccelerationStructureToMemoryKHR = VkResult (*) (VkDevice   device, VkDeferredOperationKHR   deferredOperation, const  VkCopyAccelerationStructureToMemoryInfoKHR *  pInfo);
using PFN_vkCmdCopyMemoryToAccelerationStructureKHR = void (*) (VkCommandBuffer   commandBuffer, const  VkCopyMemoryToAccelerationStructureInfoKHR *  pInfo);
using PFN_vkCopyMemoryToAccelerationStructureKHR = VkResult (*) (VkDevice   device, VkDeferredOperationKHR   deferredOperation, const  VkCopyMemoryToAccelerationStructureInfoKHR *  pInfo);
using PFN_vkCmdWriteAccelerationStructuresPropertiesKHR = void (*) (VkCommandBuffer   commandBuffer, uint32_t   accelerationStructureCount, const  VkAccelerationStructureKHR *  pAccelerationStructures, VkQueryType   queryType, VkQueryPool   queryPool, uint32_t   firstQuery);
using PFN_vkCmdWriteAccelerationStructuresPropertiesNV = void (*) (VkCommandBuffer   commandBuffer, uint32_t   accelerationStructureCount, const  VkAccelerationStructureNV *  pAccelerationStructures, VkQueryType   queryType, VkQueryPool   queryPool, uint32_t   firstQuery);
using PFN_vkCmdBuildAccelerationStructureNV = void (*) (VkCommandBuffer   commandBuffer, const  VkAccelerationStructureInfoNV *  pInfo, VkBuffer   instanceData, VkDeviceSize   instanceOffset, VkBool32   update, VkAccelerationStructureNV   dst, VkAccelerationStructureNV   src, VkBuffer   scratch, VkDeviceSize   scratchOffset);
using PFN_vkWriteAccelerationStructuresPropertiesKHR = VkResult (*) (VkDevice   device, uint32_t   accelerationStructureCount, const  VkAccelerationStructureKHR *  pAccelerationStructures, VkQueryType    queryType, size_t         dataSize, void *  pData, size_t   stride);
using PFN_vkCmdTraceRaysKHR = void (*) (VkCommandBuffer   commandBuffer, const  VkStridedDeviceAddressRegionKHR *  pRaygenShaderBindingTable, const  VkStridedDeviceAddressRegionKHR *  pMissShaderBindingTable, const  VkStridedDeviceAddressRegionKHR *  pHitShaderBindingTable, const  VkStridedDeviceAddressRegionKHR *  pCallableShaderBindingTable, uint32_t   width, uint32_t   height, uint32_t   depth);
using PFN_vkCmdTraceRaysNV = void (*) (VkCommandBuffer   commandBuffer, VkBuffer   raygenShaderBindingTableBuffer, VkDeviceSize   raygenShaderBindingOffset, VkBuffer   missShaderBindingTableBuffer, VkDeviceSize   missShaderBindingOffset, VkDeviceSize   missShaderBindingStride, VkBuffer   hitShaderBindingTableBuffer, VkDeviceSize   hitShaderBindingOffset, VkDeviceSize   hitShaderBindingStride, VkBuffer   callableShaderBindingTableBuffer, VkDeviceSize   callableShaderBindingOffset, VkDeviceSize   callableShaderBindingStride, uint32_t   width, uint32_t   height, uint32_t   depth);
using PFN_vkGetRayTracingShaderGroupHandlesKHR = VkResult (*) (VkDevice   device, VkPipeline   pipeline, uint32_t   firstGroup, uint32_t   groupCount, size_t   dataSize, void *  pData);
using PFN_vkGetRayTracingShaderGroupHandlesNV = PFN_vkGetRayTracingShaderGroupHandlesKHR;
using PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = VkResult (*) (VkDevice   device, VkPipeline   pipeline, uint32_t   firstGroup, uint32_t   groupCount, size_t   dataSize, void *  pData);
using PFN_vkGetAccelerationStructureHandleNV = VkResult (*) (VkDevice   device, VkAccelerationStructureNV   accelerationStructure, size_t   dataSize, void *  pData);
using PFN_vkCreateRayTracingPipelinesNV = VkResult (*) (VkDevice   device, VkPipelineCache   pipelineCache, uint32_t   createInfoCount, const  VkRayTracingPipelineCreateInfoNV *  pCreateInfos, const  VkAllocationCallbacks *  pAllocator, VkPipeline *  pPipelines);
using PFN_vkCreateRayTracingPipelinesKHR = VkResult (*) (VkDevice   device, VkDeferredOperationKHR   deferredOperation, VkPipelineCache   pipelineCache, uint32_t   createInfoCount, const  VkRayTracingPipelineCreateInfoKHR *  pCreateInfos, const  VkAllocationCallbacks *  pAllocator, VkPipeline *  pPipelines);
using PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = VkResult (*) (VkPhysicalDevice   physicalDevice, uint32_t *  pPropertyCount, VkCooperativeMatrixPropertiesNV *  pProperties);
using PFN_vkCmdTraceRaysIndirectKHR = void (*) (VkCommandBuffer   commandBuffer, const  VkStridedDeviceAddressRegionKHR *  pRaygenShaderBindingTable, const  VkStridedDeviceAddressRegionKHR *  pMissShaderBindingTable, const  VkStridedDeviceAddressRegionKHR *  pHitShaderBindingTable, const  VkStridedDeviceAddressRegionKHR *  pCallableShaderBindingTable, VkDeviceAddress   indirectDeviceAddress);
using PFN_vkGetDeviceAccelerationStructureCompatibilityKHR = void (*) (VkDevice   device, const  VkAccelerationStructureVersionInfoKHR *  pVersionInfo, VkAccelerationStructureCompatibilityKHR *  pCompatibility);
using PFN_vkGetRayTracingShaderGroupStackSizeKHR = VkDeviceSize (*) (VkDevice   device, VkPipeline   pipeline, uint32_t   group, VkShaderGroupShaderKHR   groupShader);
using PFN_vkCmdSetRayTracingPipelineStackSizeKHR = void (*) (VkCommandBuffer   commandBuffer, uint32_t   pipelineStackSize);
using PFN_vkGetImageViewHandleNVX = uint32_t (*) (VkDevice   device, const  VkImageViewHandleInfoNVX *  pInfo);
using PFN_vkGetImageViewAddressNVX = VkResult (*) (VkDevice   device, VkImageView   imageView, VkImageViewAddressPropertiesNVX *  pProperties);
#if defined(VK_USE_PLATFORM_WIN32_KHR)
using PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT = VkResult (*) (VkPhysicalDevice   physicalDevice, const  VkPhysicalDeviceSurfaceInfo2KHR *  pSurfaceInfo, uint32_t *  pPresentModeCount, VkPresentModeKHR *  pPresentModes);
using PFN_vkGetDeviceGroupSurfacePresentModes2EXT = VkResult (*) (VkDevice   device, const  VkPhysicalDeviceSurfaceInfo2KHR *  pSurfaceInfo, VkDeviceGroupPresentModeFlagsKHR *  pModes);
using PFN_vkAcquireFullScreenExclusiveModeEXT = VkResult (*) (VkDevice   device, VkSwapchainKHR   swapchain);
using PFN_vkReleaseFullScreenExclusiveModeEXT = VkResult (*) (VkDevice   device, VkSwapchainKHR   swapchain);
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
using PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = VkResult (*) (VkPhysicalDevice   physicalDevice, uint32_t   queueFamilyIndex, uint32_t *  pCounterCount, VkPerformanceCounterKHR *  pCounters, VkPerformanceCounterDescriptionKHR *  pCounterDescriptions);
using PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = void (*) (VkPhysicalDevice   physicalDevice, const  VkQueryPoolPerformanceCreateInfoKHR *  pPerformanceQueryCreateInfo, uint32_t *  pNumPasses);
using PFN_vkAcquireProfilingLockKHR = VkResult (*) (VkDevice   device, const  VkAcquireProfilingLockInfoKHR *  pInfo);
using PFN_vkReleaseProfilingLockKHR = void (*) (VkDevice   device);
using PFN_vkGetImageDrmFormatModifierPropertiesEXT = VkResult (*) (VkDevice   device, VkImage   image, VkImageDrmFormatModifierPropertiesEXT *  pProperties);
using PFN_vkGetBufferOpaqueCaptureAddress = uint64_t (*) (VkDevice   device, const  VkBufferDeviceAddressInfo *  pInfo);
using PFN_vkGetBufferOpaqueCaptureAddressKHR = PFN_vkGetBufferOpaqueCaptureAddress;
using PFN_vkGetBufferDeviceAddress = VkDeviceAddress (*) (VkDevice   device, const  VkBufferDeviceAddressInfo *  pInfo);
using PFN_vkGetBufferDeviceAddressKHR = PFN_vkGetBufferDeviceAddress;
using PFN_vkGetBufferDeviceAddressEXT = PFN_vkGetBufferDeviceAddress;
using PFN_vkCreateHeadlessSurfaceEXT = VkResult (*) (VkInstance   instance, const  VkHeadlessSurfaceCreateInfoEXT *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkSurfaceKHR *  pSurface);
using PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = VkResult (*) (VkPhysicalDevice   physicalDevice, uint32_t *  pCombinationCount, VkFramebufferMixedSamplesCombinationNV *  pCombinations);
using PFN_vkInitializePerformanceApiINTEL = VkResult (*) (VkDevice   device, const  VkInitializePerformanceApiInfoINTEL *  pInitializeInfo);
using PFN_vkUninitializePerformanceApiINTEL = void (*) (VkDevice   device);
using PFN_vkCmdSetPerformanceMarkerINTEL = VkResult (*) (VkCommandBuffer   commandBuffer, const  VkPerformanceMarkerInfoINTEL *  pMarkerInfo);
using PFN_vkCmdSetPerformanceStreamMarkerINTEL = VkResult (*) (VkCommandBuffer   commandBuffer, const  VkPerformanceStreamMarkerInfoINTEL *  pMarkerInfo);
using PFN_vkCmdSetPerformanceOverrideINTEL = VkResult (*) (VkCommandBuffer   commandBuffer, const  VkPerformanceOverrideInfoINTEL *  pOverrideInfo);
using PFN_vkAcquirePerformanceConfigurationINTEL = VkResult (*) (VkDevice   device, const  VkPerformanceConfigurationAcquireInfoINTEL *  pAcquireInfo, VkPerformanceConfigurationINTEL *  pConfiguration);
using PFN_vkReleasePerformanceConfigurationINTEL = VkResult (*) (VkDevice   device, VkPerformanceConfigurationINTEL   configuration);
using PFN_vkQueueSetPerformanceConfigurationINTEL = VkResult (*) (VkQueue   queue, VkPerformanceConfigurationINTEL   configuration);
using PFN_vkGetPerformanceParameterINTEL = VkResult (*) (VkDevice   device, VkPerformanceParameterTypeINTEL   parameter, VkPerformanceValueINTEL *  pValue);
using PFN_vkGetDeviceMemoryOpaqueCaptureAddress = uint64_t (*) (VkDevice   device, const  VkDeviceMemoryOpaqueCaptureAddressInfo *  pInfo);
using PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR = PFN_vkGetDeviceMemoryOpaqueCaptureAddress;
using PFN_vkGetPipelineExecutablePropertiesKHR = VkResult (*) (VkDevice                          device, const  VkPipelineInfoKHR *         pPipelineInfo, uint32_t *  pExecutableCount, VkPipelineExecutablePropertiesKHR *  pProperties);
using PFN_vkGetPipelineExecutableStatisticsKHR = VkResult (*) (VkDevice                          device, const  VkPipelineExecutableInfoKHR *   pExecutableInfo, uint32_t *  pStatisticCount, VkPipelineExecutableStatisticKHR *  pStatistics);
using PFN_vkGetPipelineExecutableInternalRepresentationsKHR = VkResult (*) (VkDevice                          device, const  VkPipelineExecutableInfoKHR *   pExecutableInfo, uint32_t *  pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR *  pInternalRepresentations);
using PFN_vkCmdSetLineStippleEXT = void (*) (VkCommandBuffer   commandBuffer, uint32_t   lineStippleFactor, uint16_t   lineStipplePattern);
using PFN_vkGetPhysicalDeviceToolPropertiesEXT = VkResult (*) (VkPhysicalDevice   physicalDevice, uint32_t *  pToolCount, VkPhysicalDeviceToolPropertiesEXT *  pToolProperties);
using PFN_vkCreateAccelerationStructureKHR = VkResult (*) (VkDevice                                             device, const  VkAccelerationStructureCreateInfoKHR *         pCreateInfo, const  VkAllocationCallbacks *        pAllocator, VkAccelerationStructureKHR *                         pAccelerationStructure);
using PFN_vkCmdBuildAccelerationStructuresKHR = void (*) (VkCommandBuffer                                      commandBuffer, uint32_t   infoCount, const  VkAccelerationStructureBuildGeometryInfoKHR *  pInfos, const  VkAccelerationStructureBuildRangeInfoKHR * const*  ppBuildRangeInfos);
using PFN_vkCmdBuildAccelerationStructuresIndirectKHR = void (*) (VkCommandBuffer                    commandBuffer, uint32_t                                             infoCount, const  VkAccelerationStructureBuildGeometryInfoKHR *  pInfos, const  VkDeviceAddress *              pIndirectDeviceAddresses, const  uint32_t *                     pIndirectStrides, const  uint32_t * const*              ppMaxPrimitiveCounts);
using PFN_vkBuildAccelerationStructuresKHR = VkResult (*) (VkDevice                                             device, VkDeferredOperationKHR   deferredOperation, uint32_t   infoCount, const  VkAccelerationStructureBuildGeometryInfoKHR *  pInfos, const  VkAccelerationStructureBuildRangeInfoKHR * const*  ppBuildRangeInfos);
using PFN_vkGetAccelerationStructureDeviceAddressKHR = VkDeviceAddress (*) (VkDevice   device, const  VkAccelerationStructureDeviceAddressInfoKHR *  pInfo);
using PFN_vkCreateDeferredOperationKHR = VkResult (*) (VkDevice   device, const  VkAllocationCallbacks *  pAllocator, VkDeferredOperationKHR *  pDeferredOperation);
using PFN_vkDestroyDeferredOperationKHR = void (*) (VkDevice   device, VkDeferredOperationKHR   operation, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkGetDeferredOperationMaxConcurrencyKHR = uint32_t (*) (VkDevice   device, VkDeferredOperationKHR   operation);
using PFN_vkGetDeferredOperationResultKHR = VkResult (*) (VkDevice   device, VkDeferredOperationKHR   operation);
using PFN_vkDeferredOperationJoinKHR = VkResult (*) (VkDevice   device, VkDeferredOperationKHR   operation);
using PFN_vkCmdSetCullModeEXT = void (*) (VkCommandBuffer   commandBuffer, VkCullModeFlags   cullMode);
using PFN_vkCmdSetFrontFaceEXT = void (*) (VkCommandBuffer   commandBuffer, VkFrontFace   frontFace);
using PFN_vkCmdSetPrimitiveTopologyEXT = void (*) (VkCommandBuffer   commandBuffer, VkPrimitiveTopology   primitiveTopology);
using PFN_vkCmdSetViewportWithCountEXT = void (*) (VkCommandBuffer   commandBuffer, uint32_t   viewportCount, const  VkViewport *  pViewports);
using PFN_vkCmdSetScissorWithCountEXT = void (*) (VkCommandBuffer   commandBuffer, uint32_t   scissorCount, const  VkRect2D *  pScissors);
using PFN_vkCmdBindVertexBuffers2EXT = void (*) (VkCommandBuffer   commandBuffer, uint32_t   firstBinding, uint32_t   bindingCount, const  VkBuffer *  pBuffers, const  VkDeviceSize *  pOffsets, const  VkDeviceSize *  pSizes, const  VkDeviceSize *  pStrides);
using PFN_vkCmdSetDepthTestEnableEXT = void (*) (VkCommandBuffer   commandBuffer, VkBool32   depthTestEnable);
using PFN_vkCmdSetDepthWriteEnableEXT = void (*) (VkCommandBuffer   commandBuffer, VkBool32   depthWriteEnable);
using PFN_vkCmdSetDepthCompareOpEXT = void (*) (VkCommandBuffer   commandBuffer, VkCompareOp   depthCompareOp);
using PFN_vkCmdSetDepthBoundsTestEnableEXT = void (*) (VkCommandBuffer   commandBuffer, VkBool32   depthBoundsTestEnable);
using PFN_vkCmdSetStencilTestEnableEXT = void (*) (VkCommandBuffer   commandBuffer, VkBool32   stencilTestEnable);
using PFN_vkCmdSetStencilOpEXT = void (*) (VkCommandBuffer   commandBuffer, VkStencilFaceFlags   faceMask, VkStencilOp   failOp, VkStencilOp   passOp, VkStencilOp   depthFailOp, VkCompareOp   compareOp);
using PFN_vkCreatePrivateDataSlotEXT = VkResult (*) (VkDevice   device, const  VkPrivateDataSlotCreateInfoEXT *  pCreateInfo, const  VkAllocationCallbacks *  pAllocator, VkPrivateDataSlotEXT *  pPrivateDataSlot);
using PFN_vkDestroyPrivateDataSlotEXT = void (*) (VkDevice   device, VkPrivateDataSlotEXT   privateDataSlot, const  VkAllocationCallbacks *  pAllocator);
using PFN_vkSetPrivateDataEXT = VkResult (*) (VkDevice   device, VkObjectType   objectType, uint64_t   objectHandle, VkPrivateDataSlotEXT   privateDataSlot, uint64_t   data);
using PFN_vkGetPrivateDataEXT = void (*) (VkDevice   device, VkObjectType   objectType, uint64_t   objectHandle, VkPrivateDataSlotEXT   privateDataSlot, uint64_t *  pData);
using PFN_vkCmdCopyBuffer2KHR = void (*) (VkCommandBuffer   commandBuffer, const  VkCopyBufferInfo2KHR *  pCopyBufferInfo);
using PFN_vkCmdCopyImage2KHR = void (*) (VkCommandBuffer   commandBuffer, const  VkCopyImageInfo2KHR *  pCopyImageInfo);
using PFN_vkCmdBlitImage2KHR = void (*) (VkCommandBuffer   commandBuffer, const  VkBlitImageInfo2KHR *  pBlitImageInfo);
using PFN_vkCmdCopyBufferToImage2KHR = void (*) (VkCommandBuffer   commandBuffer, const  VkCopyBufferToImageInfo2KHR *  pCopyBufferToImageInfo);
using PFN_vkCmdCopyImageToBuffer2KHR = void (*) (VkCommandBuffer   commandBuffer, const  VkCopyImageToBufferInfo2KHR *  pCopyImageToBufferInfo);
using PFN_vkCmdResolveImage2KHR = void (*) (VkCommandBuffer   commandBuffer, const  VkResolveImageInfo2KHR *  pResolveImageInfo);
using PFN_vkCmdSetFragmentShadingRateKHR = void (*) (VkCommandBuffer             commandBuffer, const  VkExtent2D *                            pFragmentSize, const  VkFragmentShadingRateCombinerOpKHR      combinerOps [2]);
using PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR = VkResult (*) (VkPhysicalDevice   physicalDevice, uint32_t *  pFragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR *  pFragmentShadingRates);
using PFN_vkCmdSetFragmentShadingRateEnumNV = void (*) (VkCommandBuffer             commandBuffer, VkFragmentShadingRateNV                       shadingRate, const  VkFragmentShadingRateCombinerOpKHR      combinerOps [2]);
using PFN_vkGetAccelerationStructureBuildSizesKHR = void (*) (VkDevice                                              device, VkAccelerationStructureBuildTypeKHR                   buildType, const  VkAccelerationStructureBuildGeometryInfoKHR *   pBuildInfo, const  uint32_t *   pMaxPrimitiveCounts, VkAccelerationStructureBuildSizesInfoKHR *            pSizeInfo);
extern PFN_vkCreateInstance vkCreateInstance;
extern PFN_vkGetInstanceProcAddr vkGetInstanceProcAddr;
extern PFN_vkEnumerateInstanceExtensionProperties vkEnumerateInstanceExtensionProperties;
extern PFN_vkEnumerateInstanceLayerProperties vkEnumerateInstanceLayerProperties;
extern PFN_vkEnumerateInstanceVersion vkEnumerateInstanceVersion;
extern PFN_vkDestroyInstance vkDestroyInstance;
extern PFN_vkEnumeratePhysicalDevices vkEnumeratePhysicalDevices;
extern PFN_vkGetDeviceProcAddr vkGetDeviceProcAddr;
extern PFN_vkGetPhysicalDeviceProperties vkGetPhysicalDeviceProperties;
extern PFN_vkGetPhysicalDeviceQueueFamilyProperties vkGetPhysicalDeviceQueueFamilyProperties;
extern PFN_vkGetPhysicalDeviceMemoryProperties vkGetPhysicalDeviceMemoryProperties;
extern PFN_vkGetPhysicalDeviceFeatures vkGetPhysicalDeviceFeatures;
extern PFN_vkGetPhysicalDeviceFormatProperties vkGetPhysicalDeviceFormatProperties;
extern PFN_vkGetPhysicalDeviceImageFormatProperties vkGetPhysicalDeviceImageFormatProperties;
extern PFN_vkCreateDevice vkCreateDevice;
extern PFN_vkEnumerateDeviceExtensionProperties vkEnumerateDeviceExtensionProperties;
extern PFN_vkGetPhysicalDeviceSparseImageFormatProperties vkGetPhysicalDeviceSparseImageFormatProperties;
extern PFN_vkEnumeratePhysicalDeviceGroups vkEnumeratePhysicalDeviceGroups;
extern PFN_vkGetPhysicalDeviceFeatures2 vkGetPhysicalDeviceFeatures2;
extern PFN_vkGetPhysicalDeviceProperties2 vkGetPhysicalDeviceProperties2;
extern PFN_vkGetPhysicalDeviceFormatProperties2 vkGetPhysicalDeviceFormatProperties2;
extern PFN_vkGetPhysicalDeviceImageFormatProperties2 vkGetPhysicalDeviceImageFormatProperties2;
extern PFN_vkGetPhysicalDeviceQueueFamilyProperties2 vkGetPhysicalDeviceQueueFamilyProperties2;
extern PFN_vkGetPhysicalDeviceMemoryProperties2 vkGetPhysicalDeviceMemoryProperties2;
extern PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 vkGetPhysicalDeviceSparseImageFormatProperties2;
extern PFN_vkGetPhysicalDeviceExternalBufferProperties vkGetPhysicalDeviceExternalBufferProperties;
extern PFN_vkGetPhysicalDeviceExternalFenceProperties vkGetPhysicalDeviceExternalFenceProperties;
extern PFN_vkGetPhysicalDeviceExternalSemaphoreProperties vkGetPhysicalDeviceExternalSemaphoreProperties;
extern PFN_vkDestroySurfaceKHR vkDestroySurfaceKHR;
extern PFN_vkGetPhysicalDeviceSurfaceSupportKHR vkGetPhysicalDeviceSurfaceSupportKHR;
extern PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR vkGetPhysicalDeviceSurfaceCapabilitiesKHR;
extern PFN_vkGetPhysicalDeviceSurfaceFormatsKHR vkGetPhysicalDeviceSurfaceFormatsKHR;
extern PFN_vkGetPhysicalDeviceSurfacePresentModesKHR vkGetPhysicalDeviceSurfacePresentModesKHR;
extern PFN_vkGetPhysicalDevicePresentRectanglesKHR vkGetPhysicalDevicePresentRectanglesKHR;
extern PFN_vkGetPhysicalDeviceDisplayPropertiesKHR vkGetPhysicalDeviceDisplayPropertiesKHR;
extern PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR vkGetPhysicalDeviceDisplayPlanePropertiesKHR;
extern PFN_vkGetDisplayPlaneSupportedDisplaysKHR vkGetDisplayPlaneSupportedDisplaysKHR;
extern PFN_vkGetDisplayModePropertiesKHR vkGetDisplayModePropertiesKHR;
extern PFN_vkCreateDisplayModeKHR vkCreateDisplayModeKHR;
extern PFN_vkGetDisplayPlaneCapabilitiesKHR vkGetDisplayPlaneCapabilitiesKHR;
extern PFN_vkCreateDisplayPlaneSurfaceKHR vkCreateDisplayPlaneSurfaceKHR;
#if defined(VK_USE_PLATFORM_XLIB_KHR)
extern PFN_vkCreateXlibSurfaceKHR vkCreateXlibSurfaceKHR;
extern PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR vkGetPhysicalDeviceXlibPresentationSupportKHR;
#endif // defined(VK_USE_PLATFORM_XLIB_KHR)
#if defined(VK_USE_PLATFORM_XCB_KHR)
extern PFN_vkCreateXcbSurfaceKHR vkCreateXcbSurfaceKHR;
extern PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR vkGetPhysicalDeviceXcbPresentationSupportKHR;
#endif // defined(VK_USE_PLATFORM_XCB_KHR)
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
extern PFN_vkCreateWaylandSurfaceKHR vkCreateWaylandSurfaceKHR;
extern PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR vkGetPhysicalDeviceWaylandPresentationSupportKHR;
#endif // defined(VK_USE_PLATFORM_WAYLAND_KHR)
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
extern PFN_vkCreateAndroidSurfaceKHR vkCreateAndroidSurfaceKHR;
#endif // defined(VK_USE_PLATFORM_ANDROID_KHR)
#if defined(VK_USE_PLATFORM_WIN32_KHR)
extern PFN_vkCreateWin32SurfaceKHR vkCreateWin32SurfaceKHR;
extern PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR vkGetPhysicalDeviceWin32PresentationSupportKHR;
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
extern PFN_vkCreateDebugReportCallbackEXT vkCreateDebugReportCallbackEXT;
extern PFN_vkDestroyDebugReportCallbackEXT vkDestroyDebugReportCallbackEXT;
extern PFN_vkDebugReportMessageEXT vkDebugReportMessageEXT;
#if defined(VK_USE_PLATFORM_GGP)
extern PFN_vkCreateStreamDescriptorSurfaceGGP vkCreateStreamDescriptorSurfaceGGP;
#endif // defined(VK_USE_PLATFORM_GGP)
extern PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV vkGetPhysicalDeviceExternalImageFormatPropertiesNV;
#if defined(VK_USE_PLATFORM_VI_NN)
extern PFN_vkCreateViSurfaceNN vkCreateViSurfaceNN;
#endif // defined(VK_USE_PLATFORM_VI_NN)
extern PFN_vkReleaseDisplayEXT vkReleaseDisplayEXT;
#if defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
extern PFN_vkAcquireXlibDisplayEXT vkAcquireXlibDisplayEXT;
extern PFN_vkGetRandROutputDisplayEXT vkGetRandROutputDisplayEXT;
#endif // defined(VK_USE_PLATFORM_XLIB_XRANDR_EXT)
extern PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT vkGetPhysicalDeviceSurfaceCapabilities2EXT;
extern PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR;
extern PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR;
extern PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR vkGetPhysicalDeviceSurfaceCapabilities2KHR;
extern PFN_vkGetPhysicalDeviceSurfaceFormats2KHR vkGetPhysicalDeviceSurfaceFormats2KHR;
extern PFN_vkGetPhysicalDeviceDisplayProperties2KHR vkGetPhysicalDeviceDisplayProperties2KHR;
extern PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR vkGetPhysicalDeviceDisplayPlaneProperties2KHR;
extern PFN_vkGetDisplayModeProperties2KHR vkGetDisplayModeProperties2KHR;
extern PFN_vkGetDisplayPlaneCapabilities2KHR vkGetDisplayPlaneCapabilities2KHR;
#if defined(VK_USE_PLATFORM_IOS_MVK)
extern PFN_vkCreateIOSSurfaceMVK vkCreateIOSSurfaceMVK;
#endif // defined(VK_USE_PLATFORM_IOS_MVK)
#if defined(VK_USE_PLATFORM_MACOS_MVK)
extern PFN_vkCreateMacOSSurfaceMVK vkCreateMacOSSurfaceMVK;
#endif // defined(VK_USE_PLATFORM_MACOS_MVK)
extern PFN_vkCreateDebugUtilsMessengerEXT vkCreateDebugUtilsMessengerEXT;
extern PFN_vkDestroyDebugUtilsMessengerEXT vkDestroyDebugUtilsMessengerEXT;
extern PFN_vkSubmitDebugUtilsMessageEXT vkSubmitDebugUtilsMessageEXT;
extern PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT vkGetPhysicalDeviceMultisamplePropertiesEXT;
extern PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT vkGetPhysicalDeviceCalibrateableTimeDomainsEXT;
#if defined(VK_USE_PLATFORM_FUCHSIA)
extern PFN_vkCreateImagePipeSurfaceFUCHSIA vkCreateImagePipeSurfaceFUCHSIA;
#endif // defined(VK_USE_PLATFORM_FUCHSIA)
#if defined(VK_USE_PLATFORM_METAL_EXT)
extern PFN_vkCreateMetalSurfaceEXT vkCreateMetalSurfaceEXT;
#endif // defined(VK_USE_PLATFORM_METAL_EXT)
extern PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR vkGetPhysicalDeviceFragmentShadingRatesKHR;
extern PFN_vkGetPhysicalDeviceToolPropertiesEXT vkGetPhysicalDeviceToolPropertiesEXT;
extern PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV vkGetPhysicalDeviceCooperativeMatrixPropertiesNV;
extern PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
extern PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT vkGetPhysicalDeviceSurfacePresentModes2EXT;
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
extern PFN_vkCreateHeadlessSurfaceEXT vkCreateHeadlessSurfaceEXT;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
extern PFN_vkAcquireWinrtDisplayNV vkAcquireWinrtDisplayNV;
extern PFN_vkGetWinrtDisplayNV vkGetWinrtDisplayNV;
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
extern PFN_vkCreateDirectFBSurfaceEXT vkCreateDirectFBSurfaceEXT;
extern PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT vkGetPhysicalDeviceDirectFBPresentationSupportEXT;
#endif // defined(VK_USE_PLATFORM_DIRECTFB_EXT)
extern PFN_vkDestroyDevice vkDestroyDevice;
extern PFN_vkGetDeviceQueue vkGetDeviceQueue;
extern PFN_vkQueueSubmit vkQueueSubmit;
extern PFN_vkQueueWaitIdle vkQueueWaitIdle;
extern PFN_vkDeviceWaitIdle vkDeviceWaitIdle;
extern PFN_vkAllocateMemory vkAllocateMemory;
extern PFN_vkFreeMemory vkFreeMemory;
extern PFN_vkMapMemory vkMapMemory;
extern PFN_vkUnmapMemory vkUnmapMemory;
extern PFN_vkFlushMappedMemoryRanges vkFlushMappedMemoryRanges;
extern PFN_vkInvalidateMappedMemoryRanges vkInvalidateMappedMemoryRanges;
extern PFN_vkGetDeviceMemoryCommitment vkGetDeviceMemoryCommitment;
extern PFN_vkGetBufferMemoryRequirements vkGetBufferMemoryRequirements;
extern PFN_vkBindBufferMemory vkBindBufferMemory;
extern PFN_vkGetImageMemoryRequirements vkGetImageMemoryRequirements;
extern PFN_vkBindImageMemory vkBindImageMemory;
extern PFN_vkGetImageSparseMemoryRequirements vkGetImageSparseMemoryRequirements;
extern PFN_vkQueueBindSparse vkQueueBindSparse;
extern PFN_vkCreateFence vkCreateFence;
extern PFN_vkDestroyFence vkDestroyFence;
extern PFN_vkResetFences vkResetFences;
extern PFN_vkGetFenceStatus vkGetFenceStatus;
extern PFN_vkWaitForFences vkWaitForFences;
extern PFN_vkCreateSemaphore vkCreateSemaphore;
extern PFN_vkDestroySemaphore vkDestroySemaphore;
extern PFN_vkCreateEvent vkCreateEvent;
extern PFN_vkDestroyEvent vkDestroyEvent;
extern PFN_vkGetEventStatus vkGetEventStatus;
extern PFN_vkSetEvent vkSetEvent;
extern PFN_vkResetEvent vkResetEvent;
extern PFN_vkCreateQueryPool vkCreateQueryPool;
extern PFN_vkDestroyQueryPool vkDestroyQueryPool;
extern PFN_vkGetQueryPoolResults vkGetQueryPoolResults;
extern PFN_vkCreateBuffer vkCreateBuffer;
extern PFN_vkDestroyBuffer vkDestroyBuffer;
extern PFN_vkCreateBufferView vkCreateBufferView;
extern PFN_vkDestroyBufferView vkDestroyBufferView;
extern PFN_vkCreateImage vkCreateImage;
extern PFN_vkDestroyImage vkDestroyImage;
extern PFN_vkGetImageSubresourceLayout vkGetImageSubresourceLayout;
extern PFN_vkCreateImageView vkCreateImageView;
extern PFN_vkDestroyImageView vkDestroyImageView;
extern PFN_vkCreateShaderModule vkCreateShaderModule;
extern PFN_vkDestroyShaderModule vkDestroyShaderModule;
extern PFN_vkCreatePipelineCache vkCreatePipelineCache;
extern PFN_vkDestroyPipelineCache vkDestroyPipelineCache;
extern PFN_vkGetPipelineCacheData vkGetPipelineCacheData;
extern PFN_vkMergePipelineCaches vkMergePipelineCaches;
extern PFN_vkCreateGraphicsPipelines vkCreateGraphicsPipelines;
extern PFN_vkCreateComputePipelines vkCreateComputePipelines;
extern PFN_vkDestroyPipeline vkDestroyPipeline;
extern PFN_vkCreatePipelineLayout vkCreatePipelineLayout;
extern PFN_vkDestroyPipelineLayout vkDestroyPipelineLayout;
extern PFN_vkCreateSampler vkCreateSampler;
extern PFN_vkDestroySampler vkDestroySampler;
extern PFN_vkCreateDescriptorSetLayout vkCreateDescriptorSetLayout;
extern PFN_vkDestroyDescriptorSetLayout vkDestroyDescriptorSetLayout;
extern PFN_vkCreateDescriptorPool vkCreateDescriptorPool;
extern PFN_vkDestroyDescriptorPool vkDestroyDescriptorPool;
extern PFN_vkResetDescriptorPool vkResetDescriptorPool;
extern PFN_vkAllocateDescriptorSets vkAllocateDescriptorSets;
extern PFN_vkFreeDescriptorSets vkFreeDescriptorSets;
extern PFN_vkUpdateDescriptorSets vkUpdateDescriptorSets;
extern PFN_vkCreateFramebuffer vkCreateFramebuffer;
extern PFN_vkDestroyFramebuffer vkDestroyFramebuffer;
extern PFN_vkCreateRenderPass vkCreateRenderPass;
extern PFN_vkDestroyRenderPass vkDestroyRenderPass;
extern PFN_vkGetRenderAreaGranularity vkGetRenderAreaGranularity;
extern PFN_vkCreateCommandPool vkCreateCommandPool;
extern PFN_vkDestroyCommandPool vkDestroyCommandPool;
extern PFN_vkResetCommandPool vkResetCommandPool;
extern PFN_vkAllocateCommandBuffers vkAllocateCommandBuffers;
extern PFN_vkFreeCommandBuffers vkFreeCommandBuffers;
extern PFN_vkBeginCommandBuffer vkBeginCommandBuffer;
extern PFN_vkEndCommandBuffer vkEndCommandBuffer;
extern PFN_vkResetCommandBuffer vkResetCommandBuffer;
extern PFN_vkCmdBindPipeline vkCmdBindPipeline;
extern PFN_vkCmdSetViewport vkCmdSetViewport;
extern PFN_vkCmdSetScissor vkCmdSetScissor;
extern PFN_vkCmdSetLineWidth vkCmdSetLineWidth;
extern PFN_vkCmdSetDepthBias vkCmdSetDepthBias;
extern PFN_vkCmdSetBlendConstants vkCmdSetBlendConstants;
extern PFN_vkCmdSetDepthBounds vkCmdSetDepthBounds;
extern PFN_vkCmdSetStencilCompareMask vkCmdSetStencilCompareMask;
extern PFN_vkCmdSetStencilWriteMask vkCmdSetStencilWriteMask;
extern PFN_vkCmdSetStencilReference vkCmdSetStencilReference;
extern PFN_vkCmdBindDescriptorSets vkCmdBindDescriptorSets;
extern PFN_vkCmdBindIndexBuffer vkCmdBindIndexBuffer;
extern PFN_vkCmdBindVertexBuffers vkCmdBindVertexBuffers;
extern PFN_vkCmdDraw vkCmdDraw;
extern PFN_vkCmdDrawIndexed vkCmdDrawIndexed;
extern PFN_vkCmdDrawIndirect vkCmdDrawIndirect;
extern PFN_vkCmdDrawIndexedIndirect vkCmdDrawIndexedIndirect;
extern PFN_vkCmdDispatch vkCmdDispatch;
extern PFN_vkCmdDispatchIndirect vkCmdDispatchIndirect;
extern PFN_vkCmdCopyBuffer vkCmdCopyBuffer;
extern PFN_vkCmdCopyImage vkCmdCopyImage;
extern PFN_vkCmdBlitImage vkCmdBlitImage;
extern PFN_vkCmdCopyBufferToImage vkCmdCopyBufferToImage;
extern PFN_vkCmdCopyImageToBuffer vkCmdCopyImageToBuffer;
extern PFN_vkCmdUpdateBuffer vkCmdUpdateBuffer;
extern PFN_vkCmdFillBuffer vkCmdFillBuffer;
extern PFN_vkCmdClearColorImage vkCmdClearColorImage;
extern PFN_vkCmdClearDepthStencilImage vkCmdClearDepthStencilImage;
extern PFN_vkCmdClearAttachments vkCmdClearAttachments;
extern PFN_vkCmdResolveImage vkCmdResolveImage;
extern PFN_vkCmdSetEvent vkCmdSetEvent;
extern PFN_vkCmdResetEvent vkCmdResetEvent;
extern PFN_vkCmdWaitEvents vkCmdWaitEvents;
extern PFN_vkCmdPipelineBarrier vkCmdPipelineBarrier;
extern PFN_vkCmdBeginQuery vkCmdBeginQuery;
extern PFN_vkCmdEndQuery vkCmdEndQuery;
extern PFN_vkCmdResetQueryPool vkCmdResetQueryPool;
extern PFN_vkCmdWriteTimestamp vkCmdWriteTimestamp;
extern PFN_vkCmdCopyQueryPoolResults vkCmdCopyQueryPoolResults;
extern PFN_vkCmdPushConstants vkCmdPushConstants;
extern PFN_vkCmdBeginRenderPass vkCmdBeginRenderPass;
extern PFN_vkCmdNextSubpass vkCmdNextSubpass;
extern PFN_vkCmdEndRenderPass vkCmdEndRenderPass;
extern PFN_vkCmdExecuteCommands vkCmdExecuteCommands;
extern PFN_vkBindBufferMemory2 vkBindBufferMemory2;
extern PFN_vkBindImageMemory2 vkBindImageMemory2;
extern PFN_vkGetDeviceGroupPeerMemoryFeatures vkGetDeviceGroupPeerMemoryFeatures;
extern PFN_vkCmdSetDeviceMask vkCmdSetDeviceMask;
extern PFN_vkCmdDispatchBase vkCmdDispatchBase;
extern PFN_vkGetBufferMemoryRequirements2 vkGetBufferMemoryRequirements2;
extern PFN_vkGetImageMemoryRequirements2 vkGetImageMemoryRequirements2;
extern PFN_vkGetImageSparseMemoryRequirements2 vkGetImageSparseMemoryRequirements2;
extern PFN_vkTrimCommandPool vkTrimCommandPool;
extern PFN_vkGetDeviceQueue2 vkGetDeviceQueue2;
extern PFN_vkCreateSamplerYcbcrConversion vkCreateSamplerYcbcrConversion;
extern PFN_vkDestroySamplerYcbcrConversion vkDestroySamplerYcbcrConversion;
extern PFN_vkCreateDescriptorUpdateTemplate vkCreateDescriptorUpdateTemplate;
extern PFN_vkDestroyDescriptorUpdateTemplate vkDestroyDescriptorUpdateTemplate;
extern PFN_vkUpdateDescriptorSetWithTemplate vkUpdateDescriptorSetWithTemplate;
extern PFN_vkGetDescriptorSetLayoutSupport vkGetDescriptorSetLayoutSupport;
extern PFN_vkCmdDrawIndirectCount vkCmdDrawIndirectCount;
extern PFN_vkCmdDrawIndexedIndirectCount vkCmdDrawIndexedIndirectCount;
extern PFN_vkCreateRenderPass2 vkCreateRenderPass2;
extern PFN_vkCmdBeginRenderPass2 vkCmdBeginRenderPass2;
extern PFN_vkCmdNextSubpass2 vkCmdNextSubpass2;
extern PFN_vkCmdEndRenderPass2 vkCmdEndRenderPass2;
extern PFN_vkResetQueryPool vkResetQueryPool;
extern PFN_vkGetSemaphoreCounterValue vkGetSemaphoreCounterValue;
extern PFN_vkWaitSemaphores vkWaitSemaphores;
extern PFN_vkSignalSemaphore vkSignalSemaphore;
extern PFN_vkGetBufferOpaqueCaptureAddress vkGetBufferOpaqueCaptureAddress;
extern PFN_vkGetBufferDeviceAddress vkGetBufferDeviceAddress;
extern PFN_vkGetDeviceMemoryOpaqueCaptureAddress vkGetDeviceMemoryOpaqueCaptureAddress;
extern PFN_vkCreateSwapchainKHR vkCreateSwapchainKHR;
extern PFN_vkDestroySwapchainKHR vkDestroySwapchainKHR;
extern PFN_vkGetSwapchainImagesKHR vkGetSwapchainImagesKHR;
extern PFN_vkAcquireNextImageKHR vkAcquireNextImageKHR;
extern PFN_vkQueuePresentKHR vkQueuePresentKHR;
extern PFN_vkGetDeviceGroupPresentCapabilitiesKHR vkGetDeviceGroupPresentCapabilitiesKHR;
extern PFN_vkGetDeviceGroupSurfacePresentModesKHR vkGetDeviceGroupSurfacePresentModesKHR;
extern PFN_vkAcquireNextImage2KHR vkAcquireNextImage2KHR;
extern PFN_vkCreateSharedSwapchainsKHR vkCreateSharedSwapchainsKHR;
extern PFN_vkDebugMarkerSetObjectNameEXT vkDebugMarkerSetObjectNameEXT;
extern PFN_vkDebugMarkerSetObjectTagEXT vkDebugMarkerSetObjectTagEXT;
extern PFN_vkCmdDebugMarkerBeginEXT vkCmdDebugMarkerBeginEXT;
extern PFN_vkCmdDebugMarkerEndEXT vkCmdDebugMarkerEndEXT;
extern PFN_vkCmdDebugMarkerInsertEXT vkCmdDebugMarkerInsertEXT;
extern PFN_vkCmdBindTransformFeedbackBuffersEXT vkCmdBindTransformFeedbackBuffersEXT;
extern PFN_vkCmdBeginTransformFeedbackEXT vkCmdBeginTransformFeedbackEXT;
extern PFN_vkCmdEndTransformFeedbackEXT vkCmdEndTransformFeedbackEXT;
extern PFN_vkCmdBeginQueryIndexedEXT vkCmdBeginQueryIndexedEXT;
extern PFN_vkCmdEndQueryIndexedEXT vkCmdEndQueryIndexedEXT;
extern PFN_vkCmdDrawIndirectByteCountEXT vkCmdDrawIndirectByteCountEXT;
extern PFN_vkGetImageViewHandleNVX vkGetImageViewHandleNVX;
extern PFN_vkGetImageViewAddressNVX vkGetImageViewAddressNVX;
extern PFN_vkGetShaderInfoAMD vkGetShaderInfoAMD;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
extern PFN_vkGetMemoryWin32HandleNV vkGetMemoryWin32HandleNV;
extern PFN_vkGetMemoryWin32HandleKHR vkGetMemoryWin32HandleKHR;
extern PFN_vkGetMemoryWin32HandlePropertiesKHR vkGetMemoryWin32HandlePropertiesKHR;
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
extern PFN_vkGetMemoryFdKHR vkGetMemoryFdKHR;
extern PFN_vkGetMemoryFdPropertiesKHR vkGetMemoryFdPropertiesKHR;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
extern PFN_vkGetSemaphoreWin32HandleKHR vkGetSemaphoreWin32HandleKHR;
extern PFN_vkImportSemaphoreWin32HandleKHR vkImportSemaphoreWin32HandleKHR;
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
extern PFN_vkGetSemaphoreFdKHR vkGetSemaphoreFdKHR;
extern PFN_vkImportSemaphoreFdKHR vkImportSemaphoreFdKHR;
extern PFN_vkCmdPushDescriptorSetKHR vkCmdPushDescriptorSetKHR;
extern PFN_vkCmdPushDescriptorSetWithTemplateKHR vkCmdPushDescriptorSetWithTemplateKHR;
extern PFN_vkCmdBeginConditionalRenderingEXT vkCmdBeginConditionalRenderingEXT;
extern PFN_vkCmdEndConditionalRenderingEXT vkCmdEndConditionalRenderingEXT;
extern PFN_vkCmdSetViewportWScalingNV vkCmdSetViewportWScalingNV;
extern PFN_vkDisplayPowerControlEXT vkDisplayPowerControlEXT;
extern PFN_vkRegisterDeviceEventEXT vkRegisterDeviceEventEXT;
extern PFN_vkRegisterDisplayEventEXT vkRegisterDisplayEventEXT;
extern PFN_vkGetSwapchainCounterEXT vkGetSwapchainCounterEXT;
extern PFN_vkGetRefreshCycleDurationGOOGLE vkGetRefreshCycleDurationGOOGLE;
extern PFN_vkGetPastPresentationTimingGOOGLE vkGetPastPresentationTimingGOOGLE;
extern PFN_vkCmdSetDiscardRectangleEXT vkCmdSetDiscardRectangleEXT;
extern PFN_vkSetHdrMetadataEXT vkSetHdrMetadataEXT;
extern PFN_vkGetSwapchainStatusKHR vkGetSwapchainStatusKHR;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
extern PFN_vkGetFenceWin32HandleKHR vkGetFenceWin32HandleKHR;
extern PFN_vkImportFenceWin32HandleKHR vkImportFenceWin32HandleKHR;
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
extern PFN_vkGetFenceFdKHR vkGetFenceFdKHR;
extern PFN_vkImportFenceFdKHR vkImportFenceFdKHR;
extern PFN_vkAcquireProfilingLockKHR vkAcquireProfilingLockKHR;
extern PFN_vkReleaseProfilingLockKHR vkReleaseProfilingLockKHR;
extern PFN_vkSetDebugUtilsObjectNameEXT vkSetDebugUtilsObjectNameEXT;
extern PFN_vkSetDebugUtilsObjectTagEXT vkSetDebugUtilsObjectTagEXT;
extern PFN_vkQueueBeginDebugUtilsLabelEXT vkQueueBeginDebugUtilsLabelEXT;
extern PFN_vkQueueEndDebugUtilsLabelEXT vkQueueEndDebugUtilsLabelEXT;
extern PFN_vkQueueInsertDebugUtilsLabelEXT vkQueueInsertDebugUtilsLabelEXT;
extern PFN_vkCmdBeginDebugUtilsLabelEXT vkCmdBeginDebugUtilsLabelEXT;
extern PFN_vkCmdEndDebugUtilsLabelEXT vkCmdEndDebugUtilsLabelEXT;
extern PFN_vkCmdInsertDebugUtilsLabelEXT vkCmdInsertDebugUtilsLabelEXT;
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
extern PFN_vkGetAndroidHardwareBufferPropertiesANDROID vkGetAndroidHardwareBufferPropertiesANDROID;
extern PFN_vkGetMemoryAndroidHardwareBufferANDROID vkGetMemoryAndroidHardwareBufferANDROID;
#endif // defined(VK_USE_PLATFORM_ANDROID_KHR)
extern PFN_vkCmdSetSampleLocationsEXT vkCmdSetSampleLocationsEXT;
extern PFN_vkDestroyAccelerationStructureKHR vkDestroyAccelerationStructureKHR;
extern PFN_vkCmdCopyAccelerationStructureKHR vkCmdCopyAccelerationStructureKHR;
extern PFN_vkCopyAccelerationStructureKHR vkCopyAccelerationStructureKHR;
extern PFN_vkCmdCopyAccelerationStructureToMemoryKHR vkCmdCopyAccelerationStructureToMemoryKHR;
extern PFN_vkCopyAccelerationStructureToMemoryKHR vkCopyAccelerationStructureToMemoryKHR;
extern PFN_vkCmdCopyMemoryToAccelerationStructureKHR vkCmdCopyMemoryToAccelerationStructureKHR;
extern PFN_vkCopyMemoryToAccelerationStructureKHR vkCopyMemoryToAccelerationStructureKHR;
extern PFN_vkCmdWriteAccelerationStructuresPropertiesKHR vkCmdWriteAccelerationStructuresPropertiesKHR;
extern PFN_vkWriteAccelerationStructuresPropertiesKHR vkWriteAccelerationStructuresPropertiesKHR;
extern PFN_vkGetDeviceAccelerationStructureCompatibilityKHR vkGetDeviceAccelerationStructureCompatibilityKHR;
extern PFN_vkCreateAccelerationStructureKHR vkCreateAccelerationStructureKHR;
extern PFN_vkCmdBuildAccelerationStructuresKHR vkCmdBuildAccelerationStructuresKHR;
extern PFN_vkCmdBuildAccelerationStructuresIndirectKHR vkCmdBuildAccelerationStructuresIndirectKHR;
extern PFN_vkBuildAccelerationStructuresKHR vkBuildAccelerationStructuresKHR;
extern PFN_vkGetAccelerationStructureDeviceAddressKHR vkGetAccelerationStructureDeviceAddressKHR;
extern PFN_vkGetAccelerationStructureBuildSizesKHR vkGetAccelerationStructureBuildSizesKHR;
extern PFN_vkCmdTraceRaysKHR vkCmdTraceRaysKHR;
extern PFN_vkGetRayTracingShaderGroupHandlesKHR vkGetRayTracingShaderGroupHandlesKHR;
extern PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR vkGetRayTracingCaptureReplayShaderGroupHandlesKHR;
extern PFN_vkCreateRayTracingPipelinesKHR vkCreateRayTracingPipelinesKHR;
extern PFN_vkCmdTraceRaysIndirectKHR vkCmdTraceRaysIndirectKHR;
extern PFN_vkGetRayTracingShaderGroupStackSizeKHR vkGetRayTracingShaderGroupStackSizeKHR;
extern PFN_vkCmdSetRayTracingPipelineStackSizeKHR vkCmdSetRayTracingPipelineStackSizeKHR;
extern PFN_vkGetImageDrmFormatModifierPropertiesEXT vkGetImageDrmFormatModifierPropertiesEXT;
extern PFN_vkCreateValidationCacheEXT vkCreateValidationCacheEXT;
extern PFN_vkDestroyValidationCacheEXT vkDestroyValidationCacheEXT;
extern PFN_vkGetValidationCacheDataEXT vkGetValidationCacheDataEXT;
extern PFN_vkMergeValidationCachesEXT vkMergeValidationCachesEXT;
extern PFN_vkCmdBindShadingRateImageNV vkCmdBindShadingRateImageNV;
extern PFN_vkCmdSetViewportShadingRatePaletteNV vkCmdSetViewportShadingRatePaletteNV;
extern PFN_vkCmdSetCoarseSampleOrderNV vkCmdSetCoarseSampleOrderNV;
extern PFN_vkCompileDeferredNV vkCompileDeferredNV;
extern PFN_vkCreateAccelerationStructureNV vkCreateAccelerationStructureNV;
extern PFN_vkDestroyAccelerationStructureNV vkDestroyAccelerationStructureNV;
extern PFN_vkGetAccelerationStructureMemoryRequirementsNV vkGetAccelerationStructureMemoryRequirementsNV;
extern PFN_vkBindAccelerationStructureMemoryNV vkBindAccelerationStructureMemoryNV;
extern PFN_vkCmdCopyAccelerationStructureNV vkCmdCopyAccelerationStructureNV;
extern PFN_vkCmdWriteAccelerationStructuresPropertiesNV vkCmdWriteAccelerationStructuresPropertiesNV;
extern PFN_vkCmdBuildAccelerationStructureNV vkCmdBuildAccelerationStructureNV;
extern PFN_vkCmdTraceRaysNV vkCmdTraceRaysNV;
extern PFN_vkGetAccelerationStructureHandleNV vkGetAccelerationStructureHandleNV;
extern PFN_vkCreateRayTracingPipelinesNV vkCreateRayTracingPipelinesNV;
extern PFN_vkGetMemoryHostPointerPropertiesEXT vkGetMemoryHostPointerPropertiesEXT;
extern PFN_vkCmdWriteBufferMarkerAMD vkCmdWriteBufferMarkerAMD;
extern PFN_vkGetCalibratedTimestampsEXT vkGetCalibratedTimestampsEXT;
extern PFN_vkCmdDrawMeshTasksNV vkCmdDrawMeshTasksNV;
extern PFN_vkCmdDrawMeshTasksIndirectNV vkCmdDrawMeshTasksIndirectNV;
extern PFN_vkCmdDrawMeshTasksIndirectCountNV vkCmdDrawMeshTasksIndirectCountNV;
extern PFN_vkCmdSetExclusiveScissorNV vkCmdSetExclusiveScissorNV;
extern PFN_vkCmdSetCheckpointNV vkCmdSetCheckpointNV;
extern PFN_vkGetQueueCheckpointDataNV vkGetQueueCheckpointDataNV;
extern PFN_vkInitializePerformanceApiINTEL vkInitializePerformanceApiINTEL;
extern PFN_vkUninitializePerformanceApiINTEL vkUninitializePerformanceApiINTEL;
extern PFN_vkCmdSetPerformanceMarkerINTEL vkCmdSetPerformanceMarkerINTEL;
extern PFN_vkCmdSetPerformanceStreamMarkerINTEL vkCmdSetPerformanceStreamMarkerINTEL;
extern PFN_vkCmdSetPerformanceOverrideINTEL vkCmdSetPerformanceOverrideINTEL;
extern PFN_vkAcquirePerformanceConfigurationINTEL vkAcquirePerformanceConfigurationINTEL;
extern PFN_vkReleasePerformanceConfigurationINTEL vkReleasePerformanceConfigurationINTEL;
extern PFN_vkQueueSetPerformanceConfigurationINTEL vkQueueSetPerformanceConfigurationINTEL;
extern PFN_vkGetPerformanceParameterINTEL vkGetPerformanceParameterINTEL;
extern PFN_vkSetLocalDimmingAMD vkSetLocalDimmingAMD;
extern PFN_vkCmdSetFragmentShadingRateKHR vkCmdSetFragmentShadingRateKHR;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
extern PFN_vkAcquireFullScreenExclusiveModeEXT vkAcquireFullScreenExclusiveModeEXT;
extern PFN_vkReleaseFullScreenExclusiveModeEXT vkReleaseFullScreenExclusiveModeEXT;
extern PFN_vkGetDeviceGroupSurfacePresentModes2EXT vkGetDeviceGroupSurfacePresentModes2EXT;
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
extern PFN_vkCmdSetLineStippleEXT vkCmdSetLineStippleEXT;
extern PFN_vkCmdSetCullModeEXT vkCmdSetCullModeEXT;
extern PFN_vkCmdSetFrontFaceEXT vkCmdSetFrontFaceEXT;
extern PFN_vkCmdSetPrimitiveTopologyEXT vkCmdSetPrimitiveTopologyEXT;
extern PFN_vkCmdSetViewportWithCountEXT vkCmdSetViewportWithCountEXT;
extern PFN_vkCmdSetScissorWithCountEXT vkCmdSetScissorWithCountEXT;
extern PFN_vkCmdBindVertexBuffers2EXT vkCmdBindVertexBuffers2EXT;
extern PFN_vkCmdSetDepthTestEnableEXT vkCmdSetDepthTestEnableEXT;
extern PFN_vkCmdSetDepthWriteEnableEXT vkCmdSetDepthWriteEnableEXT;
extern PFN_vkCmdSetDepthCompareOpEXT vkCmdSetDepthCompareOpEXT;
extern PFN_vkCmdSetDepthBoundsTestEnableEXT vkCmdSetDepthBoundsTestEnableEXT;
extern PFN_vkCmdSetStencilTestEnableEXT vkCmdSetStencilTestEnableEXT;
extern PFN_vkCmdSetStencilOpEXT vkCmdSetStencilOpEXT;
extern PFN_vkCreateDeferredOperationKHR vkCreateDeferredOperationKHR;
extern PFN_vkDestroyDeferredOperationKHR vkDestroyDeferredOperationKHR;
extern PFN_vkGetDeferredOperationMaxConcurrencyKHR vkGetDeferredOperationMaxConcurrencyKHR;
extern PFN_vkGetDeferredOperationResultKHR vkGetDeferredOperationResultKHR;
extern PFN_vkDeferredOperationJoinKHR vkDeferredOperationJoinKHR;
extern PFN_vkGetPipelineExecutablePropertiesKHR vkGetPipelineExecutablePropertiesKHR;
extern PFN_vkGetPipelineExecutableStatisticsKHR vkGetPipelineExecutableStatisticsKHR;
extern PFN_vkGetPipelineExecutableInternalRepresentationsKHR vkGetPipelineExecutableInternalRepresentationsKHR;
extern PFN_vkCmdExecuteGeneratedCommandsNV vkCmdExecuteGeneratedCommandsNV;
extern PFN_vkCmdPreprocessGeneratedCommandsNV vkCmdPreprocessGeneratedCommandsNV;
extern PFN_vkCmdBindPipelineShaderGroupNV vkCmdBindPipelineShaderGroupNV;
extern PFN_vkGetGeneratedCommandsMemoryRequirementsNV vkGetGeneratedCommandsMemoryRequirementsNV;
extern PFN_vkCreateIndirectCommandsLayoutNV vkCreateIndirectCommandsLayoutNV;
extern PFN_vkDestroyIndirectCommandsLayoutNV vkDestroyIndirectCommandsLayoutNV;
extern PFN_vkCreatePrivateDataSlotEXT vkCreatePrivateDataSlotEXT;
extern PFN_vkDestroyPrivateDataSlotEXT vkDestroyPrivateDataSlotEXT;
extern PFN_vkSetPrivateDataEXT vkSetPrivateDataEXT;
extern PFN_vkGetPrivateDataEXT vkGetPrivateDataEXT;
extern PFN_vkCmdSetFragmentShadingRateEnumNV vkCmdSetFragmentShadingRateEnumNV;
extern PFN_vkCmdCopyBuffer2KHR vkCmdCopyBuffer2KHR;
extern PFN_vkCmdCopyImage2KHR vkCmdCopyImage2KHR;
extern PFN_vkCmdBlitImage2KHR vkCmdBlitImage2KHR;
extern PFN_vkCmdCopyBufferToImage2KHR vkCmdCopyBufferToImage2KHR;
extern PFN_vkCmdCopyImageToBuffer2KHR vkCmdCopyImageToBuffer2KHR;
extern PFN_vkCmdResolveImage2KHR vkCmdResolveImage2KHR;
struct VkDeviceDispatchTable {
    PFN_vkDestroyDevice vkDestroyDevice = nullptr;
    PFN_vkGetDeviceQueue vkGetDeviceQueue = nullptr;
    PFN_vkQueueSubmit vkQueueSubmit = nullptr;
    PFN_vkQueueWaitIdle vkQueueWaitIdle = nullptr;
    PFN_vkDeviceWaitIdle vkDeviceWaitIdle = nullptr;
    PFN_vkAllocateMemory vkAllocateMemory = nullptr;
    PFN_vkFreeMemory vkFreeMemory = nullptr;
    PFN_vkMapMemory vkMapMemory = nullptr;
    PFN_vkUnmapMemory vkUnmapMemory = nullptr;
    PFN_vkFlushMappedMemoryRanges vkFlushMappedMemoryRanges = nullptr;
    PFN_vkInvalidateMappedMemoryRanges vkInvalidateMappedMemoryRanges = nullptr;
    PFN_vkGetDeviceMemoryCommitment vkGetDeviceMemoryCommitment = nullptr;
    PFN_vkGetBufferMemoryRequirements vkGetBufferMemoryRequirements = nullptr;
    PFN_vkBindBufferMemory vkBindBufferMemory = nullptr;
    PFN_vkGetImageMemoryRequirements vkGetImageMemoryRequirements = nullptr;
    PFN_vkBindImageMemory vkBindImageMemory = nullptr;
    PFN_vkGetImageSparseMemoryRequirements vkGetImageSparseMemoryRequirements = nullptr;
    PFN_vkQueueBindSparse vkQueueBindSparse = nullptr;
    PFN_vkCreateFence vkCreateFence = nullptr;
    PFN_vkDestroyFence vkDestroyFence = nullptr;
    PFN_vkResetFences vkResetFences = nullptr;
    PFN_vkGetFenceStatus vkGetFenceStatus = nullptr;
    PFN_vkWaitForFences vkWaitForFences = nullptr;
    PFN_vkCreateSemaphore vkCreateSemaphore = nullptr;
    PFN_vkDestroySemaphore vkDestroySemaphore = nullptr;
    PFN_vkCreateEvent vkCreateEvent = nullptr;
    PFN_vkDestroyEvent vkDestroyEvent = nullptr;
    PFN_vkGetEventStatus vkGetEventStatus = nullptr;
    PFN_vkSetEvent vkSetEvent = nullptr;
    PFN_vkResetEvent vkResetEvent = nullptr;
    PFN_vkCreateQueryPool vkCreateQueryPool = nullptr;
    PFN_vkDestroyQueryPool vkDestroyQueryPool = nullptr;
    PFN_vkGetQueryPoolResults vkGetQueryPoolResults = nullptr;
    PFN_vkCreateBuffer vkCreateBuffer = nullptr;
    PFN_vkDestroyBuffer vkDestroyBuffer = nullptr;
    PFN_vkCreateBufferView vkCreateBufferView = nullptr;
    PFN_vkDestroyBufferView vkDestroyBufferView = nullptr;
    PFN_vkCreateImage vkCreateImage = nullptr;
    PFN_vkDestroyImage vkDestroyImage = nullptr;
    PFN_vkGetImageSubresourceLayout vkGetImageSubresourceLayout = nullptr;
    PFN_vkCreateImageView vkCreateImageView = nullptr;
    PFN_vkDestroyImageView vkDestroyImageView = nullptr;
    PFN_vkCreateShaderModule vkCreateShaderModule = nullptr;
    PFN_vkDestroyShaderModule vkDestroyShaderModule = nullptr;
    PFN_vkCreatePipelineCache vkCreatePipelineCache = nullptr;
    PFN_vkDestroyPipelineCache vkDestroyPipelineCache = nullptr;
    PFN_vkGetPipelineCacheData vkGetPipelineCacheData = nullptr;
    PFN_vkMergePipelineCaches vkMergePipelineCaches = nullptr;
    PFN_vkCreateGraphicsPipelines vkCreateGraphicsPipelines = nullptr;
    PFN_vkCreateComputePipelines vkCreateComputePipelines = nullptr;
    PFN_vkDestroyPipeline vkDestroyPipeline = nullptr;
    PFN_vkCreatePipelineLayout vkCreatePipelineLayout = nullptr;
    PFN_vkDestroyPipelineLayout vkDestroyPipelineLayout = nullptr;
    PFN_vkCreateSampler vkCreateSampler = nullptr;
    PFN_vkDestroySampler vkDestroySampler = nullptr;
    PFN_vkCreateDescriptorSetLayout vkCreateDescriptorSetLayout = nullptr;
    PFN_vkDestroyDescriptorSetLayout vkDestroyDescriptorSetLayout = nullptr;
    PFN_vkCreateDescriptorPool vkCreateDescriptorPool = nullptr;
    PFN_vkDestroyDescriptorPool vkDestroyDescriptorPool = nullptr;
    PFN_vkResetDescriptorPool vkResetDescriptorPool = nullptr;
    PFN_vkAllocateDescriptorSets vkAllocateDescriptorSets = nullptr;
    PFN_vkFreeDescriptorSets vkFreeDescriptorSets = nullptr;
    PFN_vkUpdateDescriptorSets vkUpdateDescriptorSets = nullptr;
    PFN_vkCreateFramebuffer vkCreateFramebuffer = nullptr;
    PFN_vkDestroyFramebuffer vkDestroyFramebuffer = nullptr;
    PFN_vkCreateRenderPass vkCreateRenderPass = nullptr;
    PFN_vkDestroyRenderPass vkDestroyRenderPass = nullptr;
    PFN_vkGetRenderAreaGranularity vkGetRenderAreaGranularity = nullptr;
    PFN_vkCreateCommandPool vkCreateCommandPool = nullptr;
    PFN_vkDestroyCommandPool vkDestroyCommandPool = nullptr;
    PFN_vkResetCommandPool vkResetCommandPool = nullptr;
    PFN_vkAllocateCommandBuffers vkAllocateCommandBuffers = nullptr;
    PFN_vkFreeCommandBuffers vkFreeCommandBuffers = nullptr;
    PFN_vkBeginCommandBuffer vkBeginCommandBuffer = nullptr;
    PFN_vkEndCommandBuffer vkEndCommandBuffer = nullptr;
    PFN_vkResetCommandBuffer vkResetCommandBuffer = nullptr;
    PFN_vkCmdBindPipeline vkCmdBindPipeline = nullptr;
    PFN_vkCmdSetViewport vkCmdSetViewport = nullptr;
    PFN_vkCmdSetScissor vkCmdSetScissor = nullptr;
    PFN_vkCmdSetLineWidth vkCmdSetLineWidth = nullptr;
    PFN_vkCmdSetDepthBias vkCmdSetDepthBias = nullptr;
    PFN_vkCmdSetBlendConstants vkCmdSetBlendConstants = nullptr;
    PFN_vkCmdSetDepthBounds vkCmdSetDepthBounds = nullptr;
    PFN_vkCmdSetStencilCompareMask vkCmdSetStencilCompareMask = nullptr;
    PFN_vkCmdSetStencilWriteMask vkCmdSetStencilWriteMask = nullptr;
    PFN_vkCmdSetStencilReference vkCmdSetStencilReference = nullptr;
    PFN_vkCmdBindDescriptorSets vkCmdBindDescriptorSets = nullptr;
    PFN_vkCmdBindIndexBuffer vkCmdBindIndexBuffer = nullptr;
    PFN_vkCmdBindVertexBuffers vkCmdBindVertexBuffers = nullptr;
    PFN_vkCmdDraw vkCmdDraw = nullptr;
    PFN_vkCmdDrawIndexed vkCmdDrawIndexed = nullptr;
    PFN_vkCmdDrawIndirect vkCmdDrawIndirect = nullptr;
    PFN_vkCmdDrawIndexedIndirect vkCmdDrawIndexedIndirect = nullptr;
    PFN_vkCmdDispatch vkCmdDispatch = nullptr;
    PFN_vkCmdDispatchIndirect vkCmdDispatchIndirect = nullptr;
    PFN_vkCmdCopyBuffer vkCmdCopyBuffer = nullptr;
    PFN_vkCmdCopyImage vkCmdCopyImage = nullptr;
    PFN_vkCmdBlitImage vkCmdBlitImage = nullptr;
    PFN_vkCmdCopyBufferToImage vkCmdCopyBufferToImage = nullptr;
    PFN_vkCmdCopyImageToBuffer vkCmdCopyImageToBuffer = nullptr;
    PFN_vkCmdUpdateBuffer vkCmdUpdateBuffer = nullptr;
    PFN_vkCmdFillBuffer vkCmdFillBuffer = nullptr;
    PFN_vkCmdClearColorImage vkCmdClearColorImage = nullptr;
    PFN_vkCmdClearDepthStencilImage vkCmdClearDepthStencilImage = nullptr;
    PFN_vkCmdClearAttachments vkCmdClearAttachments = nullptr;
    PFN_vkCmdResolveImage vkCmdResolveImage = nullptr;
    PFN_vkCmdSetEvent vkCmdSetEvent = nullptr;
    PFN_vkCmdResetEvent vkCmdResetEvent = nullptr;
    PFN_vkCmdWaitEvents vkCmdWaitEvents = nullptr;
    PFN_vkCmdPipelineBarrier vkCmdPipelineBarrier = nullptr;
    PFN_vkCmdBeginQuery vkCmdBeginQuery = nullptr;
    PFN_vkCmdEndQuery vkCmdEndQuery = nullptr;
    PFN_vkCmdResetQueryPool vkCmdResetQueryPool = nullptr;
    PFN_vkCmdWriteTimestamp vkCmdWriteTimestamp = nullptr;
    PFN_vkCmdCopyQueryPoolResults vkCmdCopyQueryPoolResults = nullptr;
    PFN_vkCmdPushConstants vkCmdPushConstants = nullptr;
    PFN_vkCmdBeginRenderPass vkCmdBeginRenderPass = nullptr;
    PFN_vkCmdNextSubpass vkCmdNextSubpass = nullptr;
    PFN_vkCmdEndRenderPass vkCmdEndRenderPass = nullptr;
    PFN_vkCmdExecuteCommands vkCmdExecuteCommands = nullptr;
    PFN_vkBindBufferMemory2 vkBindBufferMemory2 = nullptr;
    PFN_vkBindImageMemory2 vkBindImageMemory2 = nullptr;
    PFN_vkGetDeviceGroupPeerMemoryFeatures vkGetDeviceGroupPeerMemoryFeatures = nullptr;
    PFN_vkCmdSetDeviceMask vkCmdSetDeviceMask = nullptr;
    PFN_vkCmdDispatchBase vkCmdDispatchBase = nullptr;
    PFN_vkGetBufferMemoryRequirements2 vkGetBufferMemoryRequirements2 = nullptr;
    PFN_vkGetImageMemoryRequirements2 vkGetImageMemoryRequirements2 = nullptr;
    PFN_vkGetImageSparseMemoryRequirements2 vkGetImageSparseMemoryRequirements2 = nullptr;
    PFN_vkTrimCommandPool vkTrimCommandPool = nullptr;
    PFN_vkGetDeviceQueue2 vkGetDeviceQueue2 = nullptr;
    PFN_vkCreateSamplerYcbcrConversion vkCreateSamplerYcbcrConversion = nullptr;
    PFN_vkDestroySamplerYcbcrConversion vkDestroySamplerYcbcrConversion = nullptr;
    PFN_vkCreateDescriptorUpdateTemplate vkCreateDescriptorUpdateTemplate = nullptr;
    PFN_vkDestroyDescriptorUpdateTemplate vkDestroyDescriptorUpdateTemplate = nullptr;
    PFN_vkUpdateDescriptorSetWithTemplate vkUpdateDescriptorSetWithTemplate = nullptr;
    PFN_vkGetDescriptorSetLayoutSupport vkGetDescriptorSetLayoutSupport = nullptr;
    PFN_vkCmdDrawIndirectCount vkCmdDrawIndirectCount = nullptr;
    PFN_vkCmdDrawIndexedIndirectCount vkCmdDrawIndexedIndirectCount = nullptr;
    PFN_vkCreateRenderPass2 vkCreateRenderPass2 = nullptr;
    PFN_vkCmdBeginRenderPass2 vkCmdBeginRenderPass2 = nullptr;
    PFN_vkCmdNextSubpass2 vkCmdNextSubpass2 = nullptr;
    PFN_vkCmdEndRenderPass2 vkCmdEndRenderPass2 = nullptr;
    PFN_vkResetQueryPool vkResetQueryPool = nullptr;
    PFN_vkGetSemaphoreCounterValue vkGetSemaphoreCounterValue = nullptr;
    PFN_vkWaitSemaphores vkWaitSemaphores = nullptr;
    PFN_vkSignalSemaphore vkSignalSemaphore = nullptr;
    PFN_vkGetBufferOpaqueCaptureAddress vkGetBufferOpaqueCaptureAddress = nullptr;
    PFN_vkGetBufferDeviceAddress vkGetBufferDeviceAddress = nullptr;
    PFN_vkGetDeviceMemoryOpaqueCaptureAddress vkGetDeviceMemoryOpaqueCaptureAddress = nullptr;
    PFN_vkCreateSwapchainKHR vkCreateSwapchainKHR = nullptr;
    PFN_vkDestroySwapchainKHR vkDestroySwapchainKHR = nullptr;
    PFN_vkGetSwapchainImagesKHR vkGetSwapchainImagesKHR = nullptr;
    PFN_vkAcquireNextImageKHR vkAcquireNextImageKHR = nullptr;
    PFN_vkQueuePresentKHR vkQueuePresentKHR = nullptr;
    PFN_vkGetDeviceGroupPresentCapabilitiesKHR vkGetDeviceGroupPresentCapabilitiesKHR = nullptr;
    PFN_vkGetDeviceGroupSurfacePresentModesKHR vkGetDeviceGroupSurfacePresentModesKHR = nullptr;
    PFN_vkAcquireNextImage2KHR vkAcquireNextImage2KHR = nullptr;
    PFN_vkCreateSharedSwapchainsKHR vkCreateSharedSwapchainsKHR = nullptr;
    PFN_vkDebugMarkerSetObjectNameEXT vkDebugMarkerSetObjectNameEXT = nullptr;
    PFN_vkDebugMarkerSetObjectTagEXT vkDebugMarkerSetObjectTagEXT = nullptr;
    PFN_vkCmdDebugMarkerBeginEXT vkCmdDebugMarkerBeginEXT = nullptr;
    PFN_vkCmdDebugMarkerEndEXT vkCmdDebugMarkerEndEXT = nullptr;
    PFN_vkCmdDebugMarkerInsertEXT vkCmdDebugMarkerInsertEXT = nullptr;
    PFN_vkCmdBindTransformFeedbackBuffersEXT vkCmdBindTransformFeedbackBuffersEXT = nullptr;
    PFN_vkCmdBeginTransformFeedbackEXT vkCmdBeginTransformFeedbackEXT = nullptr;
    PFN_vkCmdEndTransformFeedbackEXT vkCmdEndTransformFeedbackEXT = nullptr;
    PFN_vkCmdBeginQueryIndexedEXT vkCmdBeginQueryIndexedEXT = nullptr;
    PFN_vkCmdEndQueryIndexedEXT vkCmdEndQueryIndexedEXT = nullptr;
    PFN_vkCmdDrawIndirectByteCountEXT vkCmdDrawIndirectByteCountEXT = nullptr;
    PFN_vkGetImageViewHandleNVX vkGetImageViewHandleNVX = nullptr;
    PFN_vkGetImageViewAddressNVX vkGetImageViewAddressNVX = nullptr;
    PFN_vkGetShaderInfoAMD vkGetShaderInfoAMD = nullptr;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
    PFN_vkGetMemoryWin32HandleNV vkGetMemoryWin32HandleNV = nullptr;
#else
    void* z_padding_vkGetMemoryWin32HandleNV = nullptr;
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
#if defined(VK_USE_PLATFORM_WIN32_KHR)
    PFN_vkGetMemoryWin32HandleKHR vkGetMemoryWin32HandleKHR = nullptr;
#else
    void* z_padding_vkGetMemoryWin32HandleKHR = nullptr;
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
#if defined(VK_USE_PLATFORM_WIN32_KHR)
    PFN_vkGetMemoryWin32HandlePropertiesKHR vkGetMemoryWin32HandlePropertiesKHR = nullptr;
#else
    void* z_padding_vkGetMemoryWin32HandlePropertiesKHR = nullptr;
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
    PFN_vkGetMemoryFdKHR vkGetMemoryFdKHR = nullptr;
    PFN_vkGetMemoryFdPropertiesKHR vkGetMemoryFdPropertiesKHR = nullptr;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
    PFN_vkGetSemaphoreWin32HandleKHR vkGetSemaphoreWin32HandleKHR = nullptr;
#else
    void* z_padding_vkGetSemaphoreWin32HandleKHR = nullptr;
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
#if defined(VK_USE_PLATFORM_WIN32_KHR)
    PFN_vkImportSemaphoreWin32HandleKHR vkImportSemaphoreWin32HandleKHR = nullptr;
#else
    void* z_padding_vkImportSemaphoreWin32HandleKHR = nullptr;
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
    PFN_vkGetSemaphoreFdKHR vkGetSemaphoreFdKHR = nullptr;
    PFN_vkImportSemaphoreFdKHR vkImportSemaphoreFdKHR = nullptr;
    PFN_vkCmdPushDescriptorSetKHR vkCmdPushDescriptorSetKHR = nullptr;
    PFN_vkCmdPushDescriptorSetWithTemplateKHR vkCmdPushDescriptorSetWithTemplateKHR = nullptr;
    PFN_vkCmdBeginConditionalRenderingEXT vkCmdBeginConditionalRenderingEXT = nullptr;
    PFN_vkCmdEndConditionalRenderingEXT vkCmdEndConditionalRenderingEXT = nullptr;
    PFN_vkCmdSetViewportWScalingNV vkCmdSetViewportWScalingNV = nullptr;
    PFN_vkDisplayPowerControlEXT vkDisplayPowerControlEXT = nullptr;
    PFN_vkRegisterDeviceEventEXT vkRegisterDeviceEventEXT = nullptr;
    PFN_vkRegisterDisplayEventEXT vkRegisterDisplayEventEXT = nullptr;
    PFN_vkGetSwapchainCounterEXT vkGetSwapchainCounterEXT = nullptr;
    PFN_vkGetRefreshCycleDurationGOOGLE vkGetRefreshCycleDurationGOOGLE = nullptr;
    PFN_vkGetPastPresentationTimingGOOGLE vkGetPastPresentationTimingGOOGLE = nullptr;
    PFN_vkCmdSetDiscardRectangleEXT vkCmdSetDiscardRectangleEXT = nullptr;
    PFN_vkSetHdrMetadataEXT vkSetHdrMetadataEXT = nullptr;
    PFN_vkGetSwapchainStatusKHR vkGetSwapchainStatusKHR = nullptr;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
    PFN_vkGetFenceWin32HandleKHR vkGetFenceWin32HandleKHR = nullptr;
#else
    void* z_padding_vkGetFenceWin32HandleKHR = nullptr;
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
#if defined(VK_USE_PLATFORM_WIN32_KHR)
    PFN_vkImportFenceWin32HandleKHR vkImportFenceWin32HandleKHR = nullptr;
#else
    void* z_padding_vkImportFenceWin32HandleKHR = nullptr;
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
    PFN_vkGetFenceFdKHR vkGetFenceFdKHR = nullptr;
    PFN_vkImportFenceFdKHR vkImportFenceFdKHR = nullptr;
    PFN_vkAcquireProfilingLockKHR vkAcquireProfilingLockKHR = nullptr;
    PFN_vkReleaseProfilingLockKHR vkReleaseProfilingLockKHR = nullptr;
    PFN_vkSetDebugUtilsObjectNameEXT vkSetDebugUtilsObjectNameEXT = nullptr;
    PFN_vkSetDebugUtilsObjectTagEXT vkSetDebugUtilsObjectTagEXT = nullptr;
    PFN_vkQueueBeginDebugUtilsLabelEXT vkQueueBeginDebugUtilsLabelEXT = nullptr;
    PFN_vkQueueEndDebugUtilsLabelEXT vkQueueEndDebugUtilsLabelEXT = nullptr;
    PFN_vkQueueInsertDebugUtilsLabelEXT vkQueueInsertDebugUtilsLabelEXT = nullptr;
    PFN_vkCmdBeginDebugUtilsLabelEXT vkCmdBeginDebugUtilsLabelEXT = nullptr;
    PFN_vkCmdEndDebugUtilsLabelEXT vkCmdEndDebugUtilsLabelEXT = nullptr;
    PFN_vkCmdInsertDebugUtilsLabelEXT vkCmdInsertDebugUtilsLabelEXT = nullptr;
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
    PFN_vkGetAndroidHardwareBufferPropertiesANDROID vkGetAndroidHardwareBufferPropertiesANDROID = nullptr;
#else
    void* z_padding_vkGetAndroidHardwareBufferPropertiesANDROID = nullptr;
#endif // defined(VK_USE_PLATFORM_ANDROID_KHR)
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
    PFN_vkGetMemoryAndroidHardwareBufferANDROID vkGetMemoryAndroidHardwareBufferANDROID = nullptr;
#else
    void* z_padding_vkGetMemoryAndroidHardwareBufferANDROID = nullptr;
#endif // defined(VK_USE_PLATFORM_ANDROID_KHR)
    PFN_vkCmdSetSampleLocationsEXT vkCmdSetSampleLocationsEXT = nullptr;
    PFN_vkDestroyAccelerationStructureKHR vkDestroyAccelerationStructureKHR = nullptr;
    PFN_vkCmdCopyAccelerationStructureKHR vkCmdCopyAccelerationStructureKHR = nullptr;
    PFN_vkCopyAccelerationStructureKHR vkCopyAccelerationStructureKHR = nullptr;
    PFN_vkCmdCopyAccelerationStructureToMemoryKHR vkCmdCopyAccelerationStructureToMemoryKHR = nullptr;
    PFN_vkCopyAccelerationStructureToMemoryKHR vkCopyAccelerationStructureToMemoryKHR = nullptr;
    PFN_vkCmdCopyMemoryToAccelerationStructureKHR vkCmdCopyMemoryToAccelerationStructureKHR = nullptr;
    PFN_vkCopyMemoryToAccelerationStructureKHR vkCopyMemoryToAccelerationStructureKHR = nullptr;
    PFN_vkCmdWriteAccelerationStructuresPropertiesKHR vkCmdWriteAccelerationStructuresPropertiesKHR = nullptr;
    PFN_vkWriteAccelerationStructuresPropertiesKHR vkWriteAccelerationStructuresPropertiesKHR = nullptr;
    PFN_vkGetDeviceAccelerationStructureCompatibilityKHR vkGetDeviceAccelerationStructureCompatibilityKHR = nullptr;
    PFN_vkCreateAccelerationStructureKHR vkCreateAccelerationStructureKHR = nullptr;
    PFN_vkCmdBuildAccelerationStructuresKHR vkCmdBuildAccelerationStructuresKHR = nullptr;
    PFN_vkCmdBuildAccelerationStructuresIndirectKHR vkCmdBuildAccelerationStructuresIndirectKHR = nullptr;
    PFN_vkBuildAccelerationStructuresKHR vkBuildAccelerationStructuresKHR = nullptr;
    PFN_vkGetAccelerationStructureDeviceAddressKHR vkGetAccelerationStructureDeviceAddressKHR = nullptr;
    PFN_vkGetAccelerationStructureBuildSizesKHR vkGetAccelerationStructureBuildSizesKHR = nullptr;
    PFN_vkCmdTraceRaysKHR vkCmdTraceRaysKHR = nullptr;
    PFN_vkGetRayTracingShaderGroupHandlesKHR vkGetRayTracingShaderGroupHandlesKHR = nullptr;
    PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = nullptr;
    PFN_vkCreateRayTracingPipelinesKHR vkCreateRayTracingPipelinesKHR = nullptr;
    PFN_vkCmdTraceRaysIndirectKHR vkCmdTraceRaysIndirectKHR = nullptr;
    PFN_vkGetRayTracingShaderGroupStackSizeKHR vkGetRayTracingShaderGroupStackSizeKHR = nullptr;
    PFN_vkCmdSetRayTracingPipelineStackSizeKHR vkCmdSetRayTracingPipelineStackSizeKHR = nullptr;
    PFN_vkGetImageDrmFormatModifierPropertiesEXT vkGetImageDrmFormatModifierPropertiesEXT = nullptr;
    PFN_vkCreateValidationCacheEXT vkCreateValidationCacheEXT = nullptr;
    PFN_vkDestroyValidationCacheEXT vkDestroyValidationCacheEXT = nullptr;
    PFN_vkGetValidationCacheDataEXT vkGetValidationCacheDataEXT = nullptr;
    PFN_vkMergeValidationCachesEXT vkMergeValidationCachesEXT = nullptr;
    PFN_vkCmdBindShadingRateImageNV vkCmdBindShadingRateImageNV = nullptr;
    PFN_vkCmdSetViewportShadingRatePaletteNV vkCmdSetViewportShadingRatePaletteNV = nullptr;
    PFN_vkCmdSetCoarseSampleOrderNV vkCmdSetCoarseSampleOrderNV = nullptr;
    PFN_vkCompileDeferredNV vkCompileDeferredNV = nullptr;
    PFN_vkCreateAccelerationStructureNV vkCreateAccelerationStructureNV = nullptr;
    PFN_vkDestroyAccelerationStructureNV vkDestroyAccelerationStructureNV = nullptr;
    PFN_vkGetAccelerationStructureMemoryRequirementsNV vkGetAccelerationStructureMemoryRequirementsNV = nullptr;
    PFN_vkBindAccelerationStructureMemoryNV vkBindAccelerationStructureMemoryNV = nullptr;
    PFN_vkCmdCopyAccelerationStructureNV vkCmdCopyAccelerationStructureNV = nullptr;
    PFN_vkCmdWriteAccelerationStructuresPropertiesNV vkCmdWriteAccelerationStructuresPropertiesNV = nullptr;
    PFN_vkCmdBuildAccelerationStructureNV vkCmdBuildAccelerationStructureNV = nullptr;
    PFN_vkCmdTraceRaysNV vkCmdTraceRaysNV = nullptr;
    PFN_vkGetAccelerationStructureHandleNV vkGetAccelerationStructureHandleNV = nullptr;
    PFN_vkCreateRayTracingPipelinesNV vkCreateRayTracingPipelinesNV = nullptr;
    PFN_vkGetMemoryHostPointerPropertiesEXT vkGetMemoryHostPointerPropertiesEXT = nullptr;
    PFN_vkCmdWriteBufferMarkerAMD vkCmdWriteBufferMarkerAMD = nullptr;
    PFN_vkGetCalibratedTimestampsEXT vkGetCalibratedTimestampsEXT = nullptr;
    PFN_vkCmdDrawMeshTasksNV vkCmdDrawMeshTasksNV = nullptr;
    PFN_vkCmdDrawMeshTasksIndirectNV vkCmdDrawMeshTasksIndirectNV = nullptr;
    PFN_vkCmdDrawMeshTasksIndirectCountNV vkCmdDrawMeshTasksIndirectCountNV = nullptr;
    PFN_vkCmdSetExclusiveScissorNV vkCmdSetExclusiveScissorNV = nullptr;
    PFN_vkCmdSetCheckpointNV vkCmdSetCheckpointNV = nullptr;
    PFN_vkGetQueueCheckpointDataNV vkGetQueueCheckpointDataNV = nullptr;
    PFN_vkInitializePerformanceApiINTEL vkInitializePerformanceApiINTEL = nullptr;
    PFN_vkUninitializePerformanceApiINTEL vkUninitializePerformanceApiINTEL = nullptr;
    PFN_vkCmdSetPerformanceMarkerINTEL vkCmdSetPerformanceMarkerINTEL = nullptr;
    PFN_vkCmdSetPerformanceStreamMarkerINTEL vkCmdSetPerformanceStreamMarkerINTEL = nullptr;
    PFN_vkCmdSetPerformanceOverrideINTEL vkCmdSetPerformanceOverrideINTEL = nullptr;
    PFN_vkAcquirePerformanceConfigurationINTEL vkAcquirePerformanceConfigurationINTEL = nullptr;
    PFN_vkReleasePerformanceConfigurationINTEL vkReleasePerformanceConfigurationINTEL = nullptr;
    PFN_vkQueueSetPerformanceConfigurationINTEL vkQueueSetPerformanceConfigurationINTEL = nullptr;
    PFN_vkGetPerformanceParameterINTEL vkGetPerformanceParameterINTEL = nullptr;
    PFN_vkSetLocalDimmingAMD vkSetLocalDimmingAMD = nullptr;
    PFN_vkCmdSetFragmentShadingRateKHR vkCmdSetFragmentShadingRateKHR = nullptr;
#if defined(VK_USE_PLATFORM_WIN32_KHR)
    PFN_vkAcquireFullScreenExclusiveModeEXT vkAcquireFullScreenExclusiveModeEXT = nullptr;
#else
    void* z_padding_vkAcquireFullScreenExclusiveModeEXT = nullptr;
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
#if defined(VK_USE_PLATFORM_WIN32_KHR)
    PFN_vkReleaseFullScreenExclusiveModeEXT vkReleaseFullScreenExclusiveModeEXT = nullptr;
#else
    void* z_padding_vkReleaseFullScreenExclusiveModeEXT = nullptr;
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
#if defined(VK_USE_PLATFORM_WIN32_KHR)
    PFN_vkGetDeviceGroupSurfacePresentModes2EXT vkGetDeviceGroupSurfacePresentModes2EXT = nullptr;
#else
    void* z_padding_vkGetDeviceGroupSurfacePresentModes2EXT = nullptr;
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
    PFN_vkCmdSetLineStippleEXT vkCmdSetLineStippleEXT = nullptr;
    PFN_vkCmdSetCullModeEXT vkCmdSetCullModeEXT = nullptr;
    PFN_vkCmdSetFrontFaceEXT vkCmdSetFrontFaceEXT = nullptr;
    PFN_vkCmdSetPrimitiveTopologyEXT vkCmdSetPrimitiveTopologyEXT = nullptr;
    PFN_vkCmdSetViewportWithCountEXT vkCmdSetViewportWithCountEXT = nullptr;
    PFN_vkCmdSetScissorWithCountEXT vkCmdSetScissorWithCountEXT = nullptr;
    PFN_vkCmdBindVertexBuffers2EXT vkCmdBindVertexBuffers2EXT = nullptr;
    PFN_vkCmdSetDepthTestEnableEXT vkCmdSetDepthTestEnableEXT = nullptr;
    PFN_vkCmdSetDepthWriteEnableEXT vkCmdSetDepthWriteEnableEXT = nullptr;
    PFN_vkCmdSetDepthCompareOpEXT vkCmdSetDepthCompareOpEXT = nullptr;
    PFN_vkCmdSetDepthBoundsTestEnableEXT vkCmdSetDepthBoundsTestEnableEXT = nullptr;
    PFN_vkCmdSetStencilTestEnableEXT vkCmdSetStencilTestEnableEXT = nullptr;
    PFN_vkCmdSetStencilOpEXT vkCmdSetStencilOpEXT = nullptr;
    PFN_vkCreateDeferredOperationKHR vkCreateDeferredOperationKHR = nullptr;
    PFN_vkDestroyDeferredOperationKHR vkDestroyDeferredOperationKHR = nullptr;
    PFN_vkGetDeferredOperationMaxConcurrencyKHR vkGetDeferredOperationMaxConcurrencyKHR = nullptr;
    PFN_vkGetDeferredOperationResultKHR vkGetDeferredOperationResultKHR = nullptr;
    PFN_vkDeferredOperationJoinKHR vkDeferredOperationJoinKHR = nullptr;
    PFN_vkGetPipelineExecutablePropertiesKHR vkGetPipelineExecutablePropertiesKHR = nullptr;
    PFN_vkGetPipelineExecutableStatisticsKHR vkGetPipelineExecutableStatisticsKHR = nullptr;
    PFN_vkGetPipelineExecutableInternalRepresentationsKHR vkGetPipelineExecutableInternalRepresentationsKHR = nullptr;
    PFN_vkCmdExecuteGeneratedCommandsNV vkCmdExecuteGeneratedCommandsNV = nullptr;
    PFN_vkCmdPreprocessGeneratedCommandsNV vkCmdPreprocessGeneratedCommandsNV = nullptr;
    PFN_vkCmdBindPipelineShaderGroupNV vkCmdBindPipelineShaderGroupNV = nullptr;
    PFN_vkGetGeneratedCommandsMemoryRequirementsNV vkGetGeneratedCommandsMemoryRequirementsNV = nullptr;
    PFN_vkCreateIndirectCommandsLayoutNV vkCreateIndirectCommandsLayoutNV = nullptr;
    PFN_vkDestroyIndirectCommandsLayoutNV vkDestroyIndirectCommandsLayoutNV = nullptr;
    PFN_vkCreatePrivateDataSlotEXT vkCreatePrivateDataSlotEXT = nullptr;
    PFN_vkDestroyPrivateDataSlotEXT vkDestroyPrivateDataSlotEXT = nullptr;
    PFN_vkSetPrivateDataEXT vkSetPrivateDataEXT = nullptr;
    PFN_vkGetPrivateDataEXT vkGetPrivateDataEXT = nullptr;
    PFN_vkCmdSetFragmentShadingRateEnumNV vkCmdSetFragmentShadingRateEnumNV = nullptr;
    PFN_vkCmdCopyBuffer2KHR vkCmdCopyBuffer2KHR = nullptr;
    PFN_vkCmdCopyImage2KHR vkCmdCopyImage2KHR = nullptr;
    PFN_vkCmdBlitImage2KHR vkCmdBlitImage2KHR = nullptr;
    PFN_vkCmdCopyBufferToImage2KHR vkCmdCopyBufferToImage2KHR = nullptr;
    PFN_vkCmdCopyImageToBuffer2KHR vkCmdCopyImageToBuffer2KHR = nullptr;
    PFN_vkCmdResolveImage2KHR vkCmdResolveImage2KHR = nullptr;
};

// This function finds the Vulkan-Loader (vulkan-1.dll, libvulkan.so, libvulkan.dylib, etc) on a system, loads it,
// and loads the follwing functions: 
//  * vkGetInstanceProcAddr
//  * vkCreateInstance
//  * vkEnumerateInstanceExtensionProperties
//  * vkEnumerateInstanceLayerProperties
//  * vkEnumerateInstanceVersion
// 
// Note:
// This function must be called before all other vulkan calls! 
//
// Return Codes:
// VK_SUCCESS -- Successful initialization & loading of functions
// VK_ERROR_INITIALIZATION_FAILED -- failure [unable to find Vulkan-Loader]
// 
// Optional Parameter:
// PFN_vkGetInstanceProcAddr pfn_vkGetInstanceProcAddr = VK_NULL_HANDLE
VkResult vkInitializeLoaderLibrary(PFN_vkGetInstanceProcAddr pfn_vkGetInstanceProcAddr = VK_NULL_HANDLE);

// Close the Vulkan-Loader and assigns VK_NULL_HANDLE to vkGetInstanceProcAddr
// 
// Note:
// After this function is called, no further vulkan calls can be made, except for `vkInitializeLoaderLibrary()`
void vkCloseLoaderLibrary();

// Initialize the instance and physical device functions into the global function pointers
// (all functions which take a VkInstance or VkPhysicalDevice as the first parameter)
//
// Note: This must only be called after the application has created a valid VkInstance with vkCreateInstance
// 
// Parameter:
// VkInstance instance
// The VkInstance handle which the application has created. Must not be VK_NULL_HANDLE
void vkInitializeInstanceFunctions(VkInstance instance);

// Loads device functions into the global function pointers
//
// Notes: 
//  * This function must not be used for any application which creates multiple VkDevices. 
//    Instead, the application should use a VkDeviceDispatchTable per device created.
//  * This must only be called after the application has created a valid VkDevice with vkCreateDevice
// 
// Parameter:
// VkDevice device
// The VkDevice handle which the application has created. Must not be VK_NULL_HANDLE
void vkInitializeGlobalDeviceFunctions(VkDevice device);

// Loads device functions into the provided VkDeviceDispatchTable
//
// Notes: 
//  * 
//  * This must only be called after the application has created a valid VkDevice with vkCreateDevice
// 
// Parameters:
//  * VkDevice device
// The VkDevice handle which the application has created. Must not be VK_NULL_HANDLE
//  * VkDeviceDispatchTable& table
// The table in which holds all loaded device function pointers.
void vkInitializeGlobalDeviceFunctions(VkDevice device, VkDeviceDispatchTable& table);


#if defined(VULKAN_CPP_IMPLEMENTATION)
#include "vulkan.cpp"
#endif //defined(VULKAN_CPP_IMPLEMENTATION)

// clang-format on
