#pragma once
// clang-format off
#include "vkm_core.h"
namespace vk {
static_assert( sizeof(BaseOutStructure) == sizeof(VkBaseOutStructure), "Must maintain size between types" );
static_assert( std::is_standard_layout<BaseOutStructure>::value, "Must be a standard layout type" );
static_assert( sizeof(BaseInStructure) == sizeof(VkBaseInStructure), "Must maintain size between types" );
static_assert( std::is_standard_layout<BaseInStructure>::value, "Must be a standard layout type" );
static_assert( sizeof(Offset2D) == sizeof(VkOffset2D), "Must maintain size between types" );
static_assert( std::is_standard_layout<Offset2D>::value, "Must be a standard layout type" );
static_assert( sizeof(Offset3D) == sizeof(VkOffset3D), "Must maintain size between types" );
static_assert( std::is_standard_layout<Offset3D>::value, "Must be a standard layout type" );
static_assert( sizeof(Extent2D) == sizeof(VkExtent2D), "Must maintain size between types" );
static_assert( std::is_standard_layout<Extent2D>::value, "Must be a standard layout type" );
static_assert( sizeof(Extent3D) == sizeof(VkExtent3D), "Must maintain size between types" );
static_assert( std::is_standard_layout<Extent3D>::value, "Must be a standard layout type" );
static_assert( sizeof(Viewport) == sizeof(VkViewport), "Must maintain size between types" );
static_assert( std::is_standard_layout<Viewport>::value, "Must be a standard layout type" );
static_assert( sizeof(Rect2D) == sizeof(VkRect2D), "Must maintain size between types" );
static_assert( std::is_standard_layout<Rect2D>::value, "Must be a standard layout type" );
static_assert( sizeof(ClearRect) == sizeof(VkClearRect), "Must maintain size between types" );
static_assert( std::is_standard_layout<ClearRect>::value, "Must be a standard layout type" );
static_assert( sizeof(ComponentMapping) == sizeof(VkComponentMapping), "Must maintain size between types" );
static_assert( std::is_standard_layout<ComponentMapping>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceSparseProperties) == sizeof(VkPhysicalDeviceSparseProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceSparseProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceLimits) == sizeof(VkPhysicalDeviceLimits), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceLimits>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceProperties) == sizeof(VkPhysicalDeviceProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(ExtensionProperties) == sizeof(VkExtensionProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExtensionProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(LayerProperties) == sizeof(VkLayerProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<LayerProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(ApplicationInfo) == sizeof(VkApplicationInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<ApplicationInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(AllocationCallbacks) == sizeof(VkAllocationCallbacks), "Must maintain size between types" );
static_assert( std::is_standard_layout<AllocationCallbacks>::value, "Must be a standard layout type" );
static_assert( sizeof(DeviceQueueCreateInfo) == sizeof(VkDeviceQueueCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<DeviceQueueCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceFeatures) == sizeof(VkPhysicalDeviceFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(DeviceCreateInfo) == sizeof(VkDeviceCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<DeviceCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(InstanceCreateInfo) == sizeof(VkInstanceCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<InstanceCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(QueueFamilyProperties) == sizeof(VkQueueFamilyProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<QueueFamilyProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(MemoryHeap) == sizeof(VkMemoryHeap), "Must maintain size between types" );
static_assert( std::is_standard_layout<MemoryHeap>::value, "Must be a standard layout type" );
static_assert( sizeof(MemoryType) == sizeof(VkMemoryType), "Must maintain size between types" );
static_assert( std::is_standard_layout<MemoryType>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceMemoryProperties) == sizeof(VkPhysicalDeviceMemoryProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceMemoryProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(MemoryAllocateInfo) == sizeof(VkMemoryAllocateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<MemoryAllocateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(MemoryRequirements) == sizeof(VkMemoryRequirements), "Must maintain size between types" );
static_assert( std::is_standard_layout<MemoryRequirements>::value, "Must be a standard layout type" );
static_assert( sizeof(SparseImageFormatProperties) == sizeof(VkSparseImageFormatProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<SparseImageFormatProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(SparseImageMemoryRequirements) == sizeof(VkSparseImageMemoryRequirements), "Must maintain size between types" );
static_assert( std::is_standard_layout<SparseImageMemoryRequirements>::value, "Must be a standard layout type" );
static_assert( sizeof(MappedMemoryRange) == sizeof(VkMappedMemoryRange), "Must maintain size between types" );
static_assert( std::is_standard_layout<MappedMemoryRange>::value, "Must be a standard layout type" );
static_assert( sizeof(FormatProperties) == sizeof(VkFormatProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<FormatProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageFormatProperties) == sizeof(VkImageFormatProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageFormatProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(DescriptorBufferInfo) == sizeof(VkDescriptorBufferInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<DescriptorBufferInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(DescriptorImageInfo) == sizeof(VkDescriptorImageInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<DescriptorImageInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(WriteDescriptorSet) == sizeof(VkWriteDescriptorSet), "Must maintain size between types" );
static_assert( std::is_standard_layout<WriteDescriptorSet>::value, "Must be a standard layout type" );
static_assert( sizeof(CopyDescriptorSet) == sizeof(VkCopyDescriptorSet), "Must maintain size between types" );
static_assert( std::is_standard_layout<CopyDescriptorSet>::value, "Must be a standard layout type" );
static_assert( sizeof(BufferCreateInfo) == sizeof(VkBufferCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<BufferCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(BufferViewCreateInfo) == sizeof(VkBufferViewCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<BufferViewCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageSubresource) == sizeof(VkImageSubresource), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageSubresource>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageSubresourceLayers) == sizeof(VkImageSubresourceLayers), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageSubresourceLayers>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageSubresourceRange) == sizeof(VkImageSubresourceRange), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageSubresourceRange>::value, "Must be a standard layout type" );
static_assert( sizeof(MemoryBarrier) == sizeof(VkMemoryBarrier), "Must maintain size between types" );
static_assert( std::is_standard_layout<MemoryBarrier>::value, "Must be a standard layout type" );
static_assert( sizeof(BufferMemoryBarrier) == sizeof(VkBufferMemoryBarrier), "Must maintain size between types" );
static_assert( std::is_standard_layout<BufferMemoryBarrier>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageMemoryBarrier) == sizeof(VkImageMemoryBarrier), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageMemoryBarrier>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageCreateInfo) == sizeof(VkImageCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(SubresourceLayout) == sizeof(VkSubresourceLayout), "Must maintain size between types" );
static_assert( std::is_standard_layout<SubresourceLayout>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageViewCreateInfo) == sizeof(VkImageViewCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageViewCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(BufferCopy) == sizeof(VkBufferCopy), "Must maintain size between types" );
static_assert( std::is_standard_layout<BufferCopy>::value, "Must be a standard layout type" );
static_assert( sizeof(SparseMemoryBind) == sizeof(VkSparseMemoryBind), "Must maintain size between types" );
static_assert( std::is_standard_layout<SparseMemoryBind>::value, "Must be a standard layout type" );
static_assert( sizeof(SparseImageMemoryBind) == sizeof(VkSparseImageMemoryBind), "Must maintain size between types" );
static_assert( std::is_standard_layout<SparseImageMemoryBind>::value, "Must be a standard layout type" );
static_assert( sizeof(SparseBufferMemoryBindInfo) == sizeof(VkSparseBufferMemoryBindInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<SparseBufferMemoryBindInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(SparseImageOpaqueMemoryBindInfo) == sizeof(VkSparseImageOpaqueMemoryBindInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<SparseImageOpaqueMemoryBindInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(SparseImageMemoryBindInfo) == sizeof(VkSparseImageMemoryBindInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<SparseImageMemoryBindInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(BindSparseInfo) == sizeof(VkBindSparseInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<BindSparseInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageCopy) == sizeof(VkImageCopy), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageCopy>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageBlit) == sizeof(VkImageBlit), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageBlit>::value, "Must be a standard layout type" );
static_assert( sizeof(BufferImageCopy) == sizeof(VkBufferImageCopy), "Must maintain size between types" );
static_assert( std::is_standard_layout<BufferImageCopy>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageResolve) == sizeof(VkImageResolve), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageResolve>::value, "Must be a standard layout type" );
static_assert( sizeof(ShaderModuleCreateInfo) == sizeof(VkShaderModuleCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<ShaderModuleCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(DescriptorSetLayoutBinding) == sizeof(VkDescriptorSetLayoutBinding), "Must maintain size between types" );
static_assert( std::is_standard_layout<DescriptorSetLayoutBinding>::value, "Must be a standard layout type" );
static_assert( sizeof(DescriptorSetLayoutCreateInfo) == sizeof(VkDescriptorSetLayoutCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<DescriptorSetLayoutCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(DescriptorPoolSize) == sizeof(VkDescriptorPoolSize), "Must maintain size between types" );
static_assert( std::is_standard_layout<DescriptorPoolSize>::value, "Must be a standard layout type" );
static_assert( sizeof(DescriptorPoolCreateInfo) == sizeof(VkDescriptorPoolCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<DescriptorPoolCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(DescriptorSetAllocateInfo) == sizeof(VkDescriptorSetAllocateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<DescriptorSetAllocateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(SpecializationMapEntry) == sizeof(VkSpecializationMapEntry), "Must maintain size between types" );
static_assert( std::is_standard_layout<SpecializationMapEntry>::value, "Must be a standard layout type" );
static_assert( sizeof(SpecializationInfo) == sizeof(VkSpecializationInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<SpecializationInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineShaderStageCreateInfo) == sizeof(VkPipelineShaderStageCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineShaderStageCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(ComputePipelineCreateInfo) == sizeof(VkComputePipelineCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<ComputePipelineCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(VertexInputBindingDescription) == sizeof(VkVertexInputBindingDescription), "Must maintain size between types" );
static_assert( std::is_standard_layout<VertexInputBindingDescription>::value, "Must be a standard layout type" );
static_assert( sizeof(VertexInputAttributeDescription) == sizeof(VkVertexInputAttributeDescription), "Must maintain size between types" );
static_assert( std::is_standard_layout<VertexInputAttributeDescription>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineVertexInputStateCreateInfo) == sizeof(VkPipelineVertexInputStateCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineVertexInputStateCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineInputAssemblyStateCreateInfo) == sizeof(VkPipelineInputAssemblyStateCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineInputAssemblyStateCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineTessellationStateCreateInfo) == sizeof(VkPipelineTessellationStateCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineTessellationStateCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineViewportStateCreateInfo) == sizeof(VkPipelineViewportStateCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineViewportStateCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineRasterizationStateCreateInfo) == sizeof(VkPipelineRasterizationStateCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineRasterizationStateCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineMultisampleStateCreateInfo) == sizeof(VkPipelineMultisampleStateCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineMultisampleStateCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineColorBlendAttachmentState) == sizeof(VkPipelineColorBlendAttachmentState), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineColorBlendAttachmentState>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineColorBlendStateCreateInfo) == sizeof(VkPipelineColorBlendStateCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineColorBlendStateCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineDynamicStateCreateInfo) == sizeof(VkPipelineDynamicStateCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineDynamicStateCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(StencilOpState) == sizeof(VkStencilOpState), "Must maintain size between types" );
static_assert( std::is_standard_layout<StencilOpState>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineDepthStencilStateCreateInfo) == sizeof(VkPipelineDepthStencilStateCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineDepthStencilStateCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(GraphicsPipelineCreateInfo) == sizeof(VkGraphicsPipelineCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<GraphicsPipelineCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineCacheCreateInfo) == sizeof(VkPipelineCacheCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineCacheCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(PushConstantRange) == sizeof(VkPushConstantRange), "Must maintain size between types" );
static_assert( std::is_standard_layout<PushConstantRange>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineLayoutCreateInfo) == sizeof(VkPipelineLayoutCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineLayoutCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(SamplerCreateInfo) == sizeof(VkSamplerCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<SamplerCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(CommandPoolCreateInfo) == sizeof(VkCommandPoolCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<CommandPoolCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(CommandBufferAllocateInfo) == sizeof(VkCommandBufferAllocateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<CommandBufferAllocateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(CommandBufferInheritanceInfo) == sizeof(VkCommandBufferInheritanceInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<CommandBufferInheritanceInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(CommandBufferBeginInfo) == sizeof(VkCommandBufferBeginInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<CommandBufferBeginInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(ClearDepthStencilValue) == sizeof(VkClearDepthStencilValue), "Must maintain size between types" );
static_assert( std::is_standard_layout<ClearDepthStencilValue>::value, "Must be a standard layout type" );
static_assert( sizeof(RenderPassBeginInfo) == sizeof(VkRenderPassBeginInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<RenderPassBeginInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(ClearAttachment) == sizeof(VkClearAttachment), "Must maintain size between types" );
static_assert( std::is_standard_layout<ClearAttachment>::value, "Must be a standard layout type" );
static_assert( sizeof(AttachmentDescription) == sizeof(VkAttachmentDescription), "Must maintain size between types" );
static_assert( std::is_standard_layout<AttachmentDescription>::value, "Must be a standard layout type" );
static_assert( sizeof(AttachmentReference) == sizeof(VkAttachmentReference), "Must maintain size between types" );
static_assert( std::is_standard_layout<AttachmentReference>::value, "Must be a standard layout type" );
static_assert( sizeof(SubpassDescription) == sizeof(VkSubpassDescription), "Must maintain size between types" );
static_assert( std::is_standard_layout<SubpassDescription>::value, "Must be a standard layout type" );
static_assert( sizeof(SubpassDependency) == sizeof(VkSubpassDependency), "Must maintain size between types" );
static_assert( std::is_standard_layout<SubpassDependency>::value, "Must be a standard layout type" );
static_assert( sizeof(RenderPassCreateInfo) == sizeof(VkRenderPassCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<RenderPassCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(EventCreateInfo) == sizeof(VkEventCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<EventCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(FenceCreateInfo) == sizeof(VkFenceCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<FenceCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(SemaphoreCreateInfo) == sizeof(VkSemaphoreCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<SemaphoreCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(QueryPoolCreateInfo) == sizeof(VkQueryPoolCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<QueryPoolCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(FramebufferCreateInfo) == sizeof(VkFramebufferCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<FramebufferCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(DrawIndirectCommand) == sizeof(VkDrawIndirectCommand), "Must maintain size between types" );
static_assert( std::is_standard_layout<DrawIndirectCommand>::value, "Must be a standard layout type" );
static_assert( sizeof(DrawIndexedIndirectCommand) == sizeof(VkDrawIndexedIndirectCommand), "Must maintain size between types" );
static_assert( std::is_standard_layout<DrawIndexedIndirectCommand>::value, "Must be a standard layout type" );
static_assert( sizeof(DispatchIndirectCommand) == sizeof(VkDispatchIndirectCommand), "Must maintain size between types" );
static_assert( std::is_standard_layout<DispatchIndirectCommand>::value, "Must be a standard layout type" );
static_assert( sizeof(SubmitInfo) == sizeof(VkSubmitInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<SubmitInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(DisplayPropertiesKHR) == sizeof(VkDisplayPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<DisplayPropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(DisplayPlanePropertiesKHR) == sizeof(VkDisplayPlanePropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<DisplayPlanePropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(DisplayModeParametersKHR) == sizeof(VkDisplayModeParametersKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<DisplayModeParametersKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(DisplayModePropertiesKHR) == sizeof(VkDisplayModePropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<DisplayModePropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(DisplayModeCreateInfoKHR) == sizeof(VkDisplayModeCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<DisplayModeCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(DisplayPlaneCapabilitiesKHR) == sizeof(VkDisplayPlaneCapabilitiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<DisplayPlaneCapabilitiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(DisplaySurfaceCreateInfoKHR) == sizeof(VkDisplaySurfaceCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<DisplaySurfaceCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(DisplayPresentInfoKHR) == sizeof(VkDisplayPresentInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<DisplayPresentInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(SurfaceCapabilitiesKHR) == sizeof(VkSurfaceCapabilitiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<SurfaceCapabilitiesKHR>::value, "Must be a standard layout type" );
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
static_assert( sizeof(AndroidSurfaceCreateInfoKHR) == sizeof(VkAndroidSurfaceCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<AndroidSurfaceCreateInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_ANDROID_KHR
#if defined(VK_USE_PLATFORM_VI_NN)
static_assert( sizeof(ViSurfaceCreateInfoNN) == sizeof(VkViSurfaceCreateInfoNN), "Must maintain size between types" );
static_assert( std::is_standard_layout<ViSurfaceCreateInfoNN>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_VI_NN
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
static_assert( sizeof(WaylandSurfaceCreateInfoKHR) == sizeof(VkWaylandSurfaceCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<WaylandSurfaceCreateInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_WAYLAND_KHR
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(Win32SurfaceCreateInfoKHR) == sizeof(VkWin32SurfaceCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<Win32SurfaceCreateInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_WIN32_KHR
#if defined(VK_USE_PLATFORM_XLIB_KHR)
static_assert( sizeof(XlibSurfaceCreateInfoKHR) == sizeof(VkXlibSurfaceCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<XlibSurfaceCreateInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_XLIB_KHR
#if defined(VK_USE_PLATFORM_XCB_KHR)
static_assert( sizeof(XcbSurfaceCreateInfoKHR) == sizeof(VkXcbSurfaceCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<XcbSurfaceCreateInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_XCB_KHR
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
static_assert( sizeof(DirectFBSurfaceCreateInfoEXT) == sizeof(VkDirectFBSurfaceCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<DirectFBSurfaceCreateInfoEXT>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_DIRECTFB_EXT
#if defined(VK_USE_PLATFORM_FUCHSIA)
static_assert( sizeof(ImagePipeSurfaceCreateInfoFUCHSIA) == sizeof(VkImagePipeSurfaceCreateInfoFUCHSIA), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImagePipeSurfaceCreateInfoFUCHSIA>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_FUCHSIA
#if defined(VK_USE_PLATFORM_GGP)
static_assert( sizeof(StreamDescriptorSurfaceCreateInfoGGP) == sizeof(VkStreamDescriptorSurfaceCreateInfoGGP), "Must maintain size between types" );
static_assert( std::is_standard_layout<StreamDescriptorSurfaceCreateInfoGGP>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_GGP
static_assert( sizeof(SurfaceFormatKHR) == sizeof(VkSurfaceFormatKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<SurfaceFormatKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(SwapchainCreateInfoKHR) == sizeof(VkSwapchainCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<SwapchainCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PresentInfoKHR) == sizeof(VkPresentInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PresentInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(DebugReportCallbackCreateInfoEXT) == sizeof(VkDebugReportCallbackCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<DebugReportCallbackCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(ValidationFlagsEXT) == sizeof(VkValidationFlagsEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<ValidationFlagsEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(ValidationFeaturesEXT) == sizeof(VkValidationFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<ValidationFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineRasterizationStateRasterizationOrderAMD) == sizeof(VkPipelineRasterizationStateRasterizationOrderAMD), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineRasterizationStateRasterizationOrderAMD>::value, "Must be a standard layout type" );
static_assert( sizeof(DebugMarkerObjectNameInfoEXT) == sizeof(VkDebugMarkerObjectNameInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<DebugMarkerObjectNameInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(DebugMarkerObjectTagInfoEXT) == sizeof(VkDebugMarkerObjectTagInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<DebugMarkerObjectTagInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(DebugMarkerMarkerInfoEXT) == sizeof(VkDebugMarkerMarkerInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<DebugMarkerMarkerInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(DedicatedAllocationImageCreateInfoNV) == sizeof(VkDedicatedAllocationImageCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<DedicatedAllocationImageCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(DedicatedAllocationBufferCreateInfoNV) == sizeof(VkDedicatedAllocationBufferCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<DedicatedAllocationBufferCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(DedicatedAllocationMemoryAllocateInfoNV) == sizeof(VkDedicatedAllocationMemoryAllocateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<DedicatedAllocationMemoryAllocateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(ExternalImageFormatPropertiesNV) == sizeof(VkExternalImageFormatPropertiesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExternalImageFormatPropertiesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(ExternalMemoryImageCreateInfoNV) == sizeof(VkExternalMemoryImageCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExternalMemoryImageCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(ExportMemoryAllocateInfoNV) == sizeof(VkExportMemoryAllocateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExportMemoryAllocateInfoNV>::value, "Must be a standard layout type" );
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(ImportMemoryWin32HandleInfoNV) == sizeof(VkImportMemoryWin32HandleInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImportMemoryWin32HandleInfoNV>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_WIN32_KHR
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(ExportMemoryWin32HandleInfoNV) == sizeof(VkExportMemoryWin32HandleInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExportMemoryWin32HandleInfoNV>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_WIN32_KHR
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(Win32KeyedMutexAcquireReleaseInfoNV) == sizeof(VkWin32KeyedMutexAcquireReleaseInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<Win32KeyedMutexAcquireReleaseInfoNV>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_WIN32_KHR
static_assert( sizeof(PhysicalDeviceDeviceGeneratedCommandsFeaturesNV) == sizeof(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceDeviceGeneratedCommandsFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(DevicePrivateDataCreateInfoEXT) == sizeof(VkDevicePrivateDataCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<DevicePrivateDataCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PrivateDataSlotCreateInfoEXT) == sizeof(VkPrivateDataSlotCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PrivateDataSlotCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDevicePrivateDataFeaturesEXT) == sizeof(VkPhysicalDevicePrivateDataFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDevicePrivateDataFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceDeviceGeneratedCommandsPropertiesNV) == sizeof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceDeviceGeneratedCommandsPropertiesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(GraphicsShaderGroupCreateInfoNV) == sizeof(VkGraphicsShaderGroupCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<GraphicsShaderGroupCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(GraphicsPipelineShaderGroupsCreateInfoNV) == sizeof(VkGraphicsPipelineShaderGroupsCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<GraphicsPipelineShaderGroupsCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(BindShaderGroupIndirectCommandNV) == sizeof(VkBindShaderGroupIndirectCommandNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<BindShaderGroupIndirectCommandNV>::value, "Must be a standard layout type" );
static_assert( sizeof(BindIndexBufferIndirectCommandNV) == sizeof(VkBindIndexBufferIndirectCommandNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<BindIndexBufferIndirectCommandNV>::value, "Must be a standard layout type" );
static_assert( sizeof(BindVertexBufferIndirectCommandNV) == sizeof(VkBindVertexBufferIndirectCommandNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<BindVertexBufferIndirectCommandNV>::value, "Must be a standard layout type" );
static_assert( sizeof(SetStateFlagsIndirectCommandNV) == sizeof(VkSetStateFlagsIndirectCommandNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<SetStateFlagsIndirectCommandNV>::value, "Must be a standard layout type" );
static_assert( sizeof(IndirectCommandsStreamNV) == sizeof(VkIndirectCommandsStreamNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<IndirectCommandsStreamNV>::value, "Must be a standard layout type" );
static_assert( sizeof(IndirectCommandsLayoutTokenNV) == sizeof(VkIndirectCommandsLayoutTokenNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<IndirectCommandsLayoutTokenNV>::value, "Must be a standard layout type" );
static_assert( sizeof(IndirectCommandsLayoutCreateInfoNV) == sizeof(VkIndirectCommandsLayoutCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<IndirectCommandsLayoutCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(GeneratedCommandsInfoNV) == sizeof(VkGeneratedCommandsInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<GeneratedCommandsInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(GeneratedCommandsMemoryRequirementsInfoNV) == sizeof(VkGeneratedCommandsMemoryRequirementsInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<GeneratedCommandsMemoryRequirementsInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceFeatures2) == sizeof(VkPhysicalDeviceFeatures2), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceFeatures2>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceFeatures2KHR) == sizeof(VkPhysicalDeviceFeatures2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceFeatures2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceProperties2) == sizeof(VkPhysicalDeviceProperties2), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceProperties2>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceProperties2KHR) == sizeof(VkPhysicalDeviceProperties2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceProperties2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(FormatProperties2) == sizeof(VkFormatProperties2), "Must maintain size between types" );
static_assert( std::is_standard_layout<FormatProperties2>::value, "Must be a standard layout type" );
static_assert( sizeof(FormatProperties2KHR) == sizeof(VkFormatProperties2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<FormatProperties2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageFormatProperties2) == sizeof(VkImageFormatProperties2), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageFormatProperties2>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageFormatProperties2KHR) == sizeof(VkImageFormatProperties2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageFormatProperties2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceImageFormatInfo2) == sizeof(VkPhysicalDeviceImageFormatInfo2), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceImageFormatInfo2>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceImageFormatInfo2KHR) == sizeof(VkPhysicalDeviceImageFormatInfo2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceImageFormatInfo2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(QueueFamilyProperties2) == sizeof(VkQueueFamilyProperties2), "Must maintain size between types" );
static_assert( std::is_standard_layout<QueueFamilyProperties2>::value, "Must be a standard layout type" );
static_assert( sizeof(QueueFamilyProperties2KHR) == sizeof(VkQueueFamilyProperties2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<QueueFamilyProperties2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceMemoryProperties2) == sizeof(VkPhysicalDeviceMemoryProperties2), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceMemoryProperties2>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceMemoryProperties2KHR) == sizeof(VkPhysicalDeviceMemoryProperties2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceMemoryProperties2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(SparseImageFormatProperties2) == sizeof(VkSparseImageFormatProperties2), "Must maintain size between types" );
static_assert( std::is_standard_layout<SparseImageFormatProperties2>::value, "Must be a standard layout type" );
static_assert( sizeof(SparseImageFormatProperties2KHR) == sizeof(VkSparseImageFormatProperties2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<SparseImageFormatProperties2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceSparseImageFormatInfo2) == sizeof(VkPhysicalDeviceSparseImageFormatInfo2), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceSparseImageFormatInfo2>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceSparseImageFormatInfo2KHR) == sizeof(VkPhysicalDeviceSparseImageFormatInfo2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceSparseImageFormatInfo2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDevicePushDescriptorPropertiesKHR) == sizeof(VkPhysicalDevicePushDescriptorPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDevicePushDescriptorPropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(ConformanceVersion) == sizeof(VkConformanceVersion), "Must maintain size between types" );
static_assert( std::is_standard_layout<ConformanceVersion>::value, "Must be a standard layout type" );
static_assert( sizeof(ConformanceVersionKHR) == sizeof(VkConformanceVersionKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<ConformanceVersionKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceDriverProperties) == sizeof(VkPhysicalDeviceDriverProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceDriverProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceDriverPropertiesKHR) == sizeof(VkPhysicalDeviceDriverPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceDriverPropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(RectLayerKHR) == sizeof(VkRectLayerKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<RectLayerKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PresentRegionKHR) == sizeof(VkPresentRegionKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PresentRegionKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PresentRegionsKHR) == sizeof(VkPresentRegionsKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PresentRegionsKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceVariablePointersFeatures) == sizeof(VkPhysicalDeviceVariablePointersFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceVariablePointersFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceVariablePointersFeaturesKHR) == sizeof(VkPhysicalDeviceVariablePointersFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceVariablePointersFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceVariablePointerFeaturesKHR) == sizeof(VkPhysicalDeviceVariablePointerFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceVariablePointerFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceVariablePointerFeatures) == sizeof(VkPhysicalDeviceVariablePointerFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceVariablePointerFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(ExternalMemoryProperties) == sizeof(VkExternalMemoryProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExternalMemoryProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(ExternalMemoryPropertiesKHR) == sizeof(VkExternalMemoryPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExternalMemoryPropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceExternalImageFormatInfo) == sizeof(VkPhysicalDeviceExternalImageFormatInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceExternalImageFormatInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceExternalImageFormatInfoKHR) == sizeof(VkPhysicalDeviceExternalImageFormatInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceExternalImageFormatInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(ExternalImageFormatProperties) == sizeof(VkExternalImageFormatProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExternalImageFormatProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(ExternalImageFormatPropertiesKHR) == sizeof(VkExternalImageFormatPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExternalImageFormatPropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceExternalBufferInfo) == sizeof(VkPhysicalDeviceExternalBufferInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceExternalBufferInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceExternalBufferInfoKHR) == sizeof(VkPhysicalDeviceExternalBufferInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceExternalBufferInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(ExternalBufferProperties) == sizeof(VkExternalBufferProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExternalBufferProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(ExternalBufferPropertiesKHR) == sizeof(VkExternalBufferPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExternalBufferPropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceIDProperties) == sizeof(VkPhysicalDeviceIDProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceIDProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceIDPropertiesKHR) == sizeof(VkPhysicalDeviceIDPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceIDPropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(ExternalMemoryImageCreateInfo) == sizeof(VkExternalMemoryImageCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExternalMemoryImageCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(ExternalMemoryImageCreateInfoKHR) == sizeof(VkExternalMemoryImageCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExternalMemoryImageCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(ExternalMemoryBufferCreateInfo) == sizeof(VkExternalMemoryBufferCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExternalMemoryBufferCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(ExternalMemoryBufferCreateInfoKHR) == sizeof(VkExternalMemoryBufferCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExternalMemoryBufferCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(ExportMemoryAllocateInfo) == sizeof(VkExportMemoryAllocateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExportMemoryAllocateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(ExportMemoryAllocateInfoKHR) == sizeof(VkExportMemoryAllocateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExportMemoryAllocateInfoKHR>::value, "Must be a standard layout type" );
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(ImportMemoryWin32HandleInfoKHR) == sizeof(VkImportMemoryWin32HandleInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImportMemoryWin32HandleInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_WIN32_KHR
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(ExportMemoryWin32HandleInfoKHR) == sizeof(VkExportMemoryWin32HandleInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExportMemoryWin32HandleInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_WIN32_KHR
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(MemoryWin32HandlePropertiesKHR) == sizeof(VkMemoryWin32HandlePropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<MemoryWin32HandlePropertiesKHR>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_WIN32_KHR
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(MemoryGetWin32HandleInfoKHR) == sizeof(VkMemoryGetWin32HandleInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<MemoryGetWin32HandleInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_WIN32_KHR
static_assert( sizeof(ImportMemoryFdInfoKHR) == sizeof(VkImportMemoryFdInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImportMemoryFdInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(MemoryFdPropertiesKHR) == sizeof(VkMemoryFdPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<MemoryFdPropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(MemoryGetFdInfoKHR) == sizeof(VkMemoryGetFdInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<MemoryGetFdInfoKHR>::value, "Must be a standard layout type" );
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(Win32KeyedMutexAcquireReleaseInfoKHR) == sizeof(VkWin32KeyedMutexAcquireReleaseInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<Win32KeyedMutexAcquireReleaseInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_WIN32_KHR
static_assert( sizeof(PhysicalDeviceExternalSemaphoreInfo) == sizeof(VkPhysicalDeviceExternalSemaphoreInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceExternalSemaphoreInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceExternalSemaphoreInfoKHR) == sizeof(VkPhysicalDeviceExternalSemaphoreInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceExternalSemaphoreInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(ExternalSemaphoreProperties) == sizeof(VkExternalSemaphoreProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExternalSemaphoreProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(ExternalSemaphorePropertiesKHR) == sizeof(VkExternalSemaphorePropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExternalSemaphorePropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(ExportSemaphoreCreateInfo) == sizeof(VkExportSemaphoreCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExportSemaphoreCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(ExportSemaphoreCreateInfoKHR) == sizeof(VkExportSemaphoreCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExportSemaphoreCreateInfoKHR>::value, "Must be a standard layout type" );
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(ImportSemaphoreWin32HandleInfoKHR) == sizeof(VkImportSemaphoreWin32HandleInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImportSemaphoreWin32HandleInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_WIN32_KHR
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(ExportSemaphoreWin32HandleInfoKHR) == sizeof(VkExportSemaphoreWin32HandleInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExportSemaphoreWin32HandleInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_WIN32_KHR
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(D3D12FenceSubmitInfoKHR) == sizeof(VkD3D12FenceSubmitInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<D3D12FenceSubmitInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_WIN32_KHR
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(SemaphoreGetWin32HandleInfoKHR) == sizeof(VkSemaphoreGetWin32HandleInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<SemaphoreGetWin32HandleInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_WIN32_KHR
static_assert( sizeof(ImportSemaphoreFdInfoKHR) == sizeof(VkImportSemaphoreFdInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImportSemaphoreFdInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(SemaphoreGetFdInfoKHR) == sizeof(VkSemaphoreGetFdInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<SemaphoreGetFdInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceExternalFenceInfo) == sizeof(VkPhysicalDeviceExternalFenceInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceExternalFenceInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceExternalFenceInfoKHR) == sizeof(VkPhysicalDeviceExternalFenceInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceExternalFenceInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(ExternalFenceProperties) == sizeof(VkExternalFenceProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExternalFenceProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(ExternalFencePropertiesKHR) == sizeof(VkExternalFencePropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExternalFencePropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(ExportFenceCreateInfo) == sizeof(VkExportFenceCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExportFenceCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(ExportFenceCreateInfoKHR) == sizeof(VkExportFenceCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExportFenceCreateInfoKHR>::value, "Must be a standard layout type" );
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(ImportFenceWin32HandleInfoKHR) == sizeof(VkImportFenceWin32HandleInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImportFenceWin32HandleInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_WIN32_KHR
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(ExportFenceWin32HandleInfoKHR) == sizeof(VkExportFenceWin32HandleInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExportFenceWin32HandleInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_WIN32_KHR
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(FenceGetWin32HandleInfoKHR) == sizeof(VkFenceGetWin32HandleInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<FenceGetWin32HandleInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_WIN32_KHR
static_assert( sizeof(ImportFenceFdInfoKHR) == sizeof(VkImportFenceFdInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImportFenceFdInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(FenceGetFdInfoKHR) == sizeof(VkFenceGetFdInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<FenceGetFdInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceMultiviewFeatures) == sizeof(VkPhysicalDeviceMultiviewFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceMultiviewFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceMultiviewFeaturesKHR) == sizeof(VkPhysicalDeviceMultiviewFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceMultiviewFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceMultiviewProperties) == sizeof(VkPhysicalDeviceMultiviewProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceMultiviewProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceMultiviewPropertiesKHR) == sizeof(VkPhysicalDeviceMultiviewPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceMultiviewPropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(RenderPassMultiviewCreateInfo) == sizeof(VkRenderPassMultiviewCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<RenderPassMultiviewCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(RenderPassMultiviewCreateInfoKHR) == sizeof(VkRenderPassMultiviewCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<RenderPassMultiviewCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(SurfaceCapabilities2EXT) == sizeof(VkSurfaceCapabilities2EXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<SurfaceCapabilities2EXT>::value, "Must be a standard layout type" );
static_assert( sizeof(DisplayPowerInfoEXT) == sizeof(VkDisplayPowerInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<DisplayPowerInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(DeviceEventInfoEXT) == sizeof(VkDeviceEventInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<DeviceEventInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(DisplayEventInfoEXT) == sizeof(VkDisplayEventInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<DisplayEventInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(SwapchainCounterCreateInfoEXT) == sizeof(VkSwapchainCounterCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<SwapchainCounterCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceGroupProperties) == sizeof(VkPhysicalDeviceGroupProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceGroupProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceGroupPropertiesKHR) == sizeof(VkPhysicalDeviceGroupPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceGroupPropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(MemoryAllocateFlagsInfo) == sizeof(VkMemoryAllocateFlagsInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<MemoryAllocateFlagsInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(MemoryAllocateFlagsInfoKHR) == sizeof(VkMemoryAllocateFlagsInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<MemoryAllocateFlagsInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(BindBufferMemoryInfo) == sizeof(VkBindBufferMemoryInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<BindBufferMemoryInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(BindBufferMemoryInfoKHR) == sizeof(VkBindBufferMemoryInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<BindBufferMemoryInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(BindBufferMemoryDeviceGroupInfo) == sizeof(VkBindBufferMemoryDeviceGroupInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<BindBufferMemoryDeviceGroupInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(BindBufferMemoryDeviceGroupInfoKHR) == sizeof(VkBindBufferMemoryDeviceGroupInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<BindBufferMemoryDeviceGroupInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(BindImageMemoryInfo) == sizeof(VkBindImageMemoryInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<BindImageMemoryInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(BindImageMemoryInfoKHR) == sizeof(VkBindImageMemoryInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<BindImageMemoryInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(BindImageMemoryDeviceGroupInfo) == sizeof(VkBindImageMemoryDeviceGroupInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<BindImageMemoryDeviceGroupInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(BindImageMemoryDeviceGroupInfoKHR) == sizeof(VkBindImageMemoryDeviceGroupInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<BindImageMemoryDeviceGroupInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(DeviceGroupRenderPassBeginInfo) == sizeof(VkDeviceGroupRenderPassBeginInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<DeviceGroupRenderPassBeginInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(DeviceGroupRenderPassBeginInfoKHR) == sizeof(VkDeviceGroupRenderPassBeginInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<DeviceGroupRenderPassBeginInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(DeviceGroupCommandBufferBeginInfo) == sizeof(VkDeviceGroupCommandBufferBeginInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<DeviceGroupCommandBufferBeginInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(DeviceGroupCommandBufferBeginInfoKHR) == sizeof(VkDeviceGroupCommandBufferBeginInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<DeviceGroupCommandBufferBeginInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(DeviceGroupSubmitInfo) == sizeof(VkDeviceGroupSubmitInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<DeviceGroupSubmitInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(DeviceGroupSubmitInfoKHR) == sizeof(VkDeviceGroupSubmitInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<DeviceGroupSubmitInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(DeviceGroupBindSparseInfo) == sizeof(VkDeviceGroupBindSparseInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<DeviceGroupBindSparseInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(DeviceGroupBindSparseInfoKHR) == sizeof(VkDeviceGroupBindSparseInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<DeviceGroupBindSparseInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(DeviceGroupPresentCapabilitiesKHR) == sizeof(VkDeviceGroupPresentCapabilitiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<DeviceGroupPresentCapabilitiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageSwapchainCreateInfoKHR) == sizeof(VkImageSwapchainCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageSwapchainCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(BindImageMemorySwapchainInfoKHR) == sizeof(VkBindImageMemorySwapchainInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<BindImageMemorySwapchainInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(AcquireNextImageInfoKHR) == sizeof(VkAcquireNextImageInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<AcquireNextImageInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(DeviceGroupPresentInfoKHR) == sizeof(VkDeviceGroupPresentInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<DeviceGroupPresentInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(DeviceGroupDeviceCreateInfo) == sizeof(VkDeviceGroupDeviceCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<DeviceGroupDeviceCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(DeviceGroupDeviceCreateInfoKHR) == sizeof(VkDeviceGroupDeviceCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<DeviceGroupDeviceCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(DeviceGroupSwapchainCreateInfoKHR) == sizeof(VkDeviceGroupSwapchainCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<DeviceGroupSwapchainCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(DescriptorUpdateTemplateEntry) == sizeof(VkDescriptorUpdateTemplateEntry), "Must maintain size between types" );
static_assert( std::is_standard_layout<DescriptorUpdateTemplateEntry>::value, "Must be a standard layout type" );
static_assert( sizeof(DescriptorUpdateTemplateEntryKHR) == sizeof(VkDescriptorUpdateTemplateEntryKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<DescriptorUpdateTemplateEntryKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(DescriptorUpdateTemplateCreateInfo) == sizeof(VkDescriptorUpdateTemplateCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<DescriptorUpdateTemplateCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(DescriptorUpdateTemplateCreateInfoKHR) == sizeof(VkDescriptorUpdateTemplateCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<DescriptorUpdateTemplateCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(XYColorEXT) == sizeof(VkXYColorEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<XYColorEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(HdrMetadataEXT) == sizeof(VkHdrMetadataEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<HdrMetadataEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(DisplayNativeHdrSurfaceCapabilitiesAMD) == sizeof(VkDisplayNativeHdrSurfaceCapabilitiesAMD), "Must maintain size between types" );
static_assert( std::is_standard_layout<DisplayNativeHdrSurfaceCapabilitiesAMD>::value, "Must be a standard layout type" );
static_assert( sizeof(SwapchainDisplayNativeHdrCreateInfoAMD) == sizeof(VkSwapchainDisplayNativeHdrCreateInfoAMD), "Must maintain size between types" );
static_assert( std::is_standard_layout<SwapchainDisplayNativeHdrCreateInfoAMD>::value, "Must be a standard layout type" );
static_assert( sizeof(RefreshCycleDurationGOOGLE) == sizeof(VkRefreshCycleDurationGOOGLE), "Must maintain size between types" );
static_assert( std::is_standard_layout<RefreshCycleDurationGOOGLE>::value, "Must be a standard layout type" );
static_assert( sizeof(PastPresentationTimingGOOGLE) == sizeof(VkPastPresentationTimingGOOGLE), "Must maintain size between types" );
static_assert( std::is_standard_layout<PastPresentationTimingGOOGLE>::value, "Must be a standard layout type" );
static_assert( sizeof(PresentTimeGOOGLE) == sizeof(VkPresentTimeGOOGLE), "Must maintain size between types" );
static_assert( std::is_standard_layout<PresentTimeGOOGLE>::value, "Must be a standard layout type" );
static_assert( sizeof(PresentTimesInfoGOOGLE) == sizeof(VkPresentTimesInfoGOOGLE), "Must maintain size between types" );
static_assert( std::is_standard_layout<PresentTimesInfoGOOGLE>::value, "Must be a standard layout type" );
#if defined(VK_USE_PLATFORM_IOS_MVK)
static_assert( sizeof(IOSSurfaceCreateInfoMVK) == sizeof(VkIOSSurfaceCreateInfoMVK), "Must maintain size between types" );
static_assert( std::is_standard_layout<IOSSurfaceCreateInfoMVK>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_IOS_MVK
#if defined(VK_USE_PLATFORM_MACOS_MVK)
static_assert( sizeof(MacOSSurfaceCreateInfoMVK) == sizeof(VkMacOSSurfaceCreateInfoMVK), "Must maintain size between types" );
static_assert( std::is_standard_layout<MacOSSurfaceCreateInfoMVK>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_MACOS_MVK
#if defined(VK_USE_PLATFORM_METAL_EXT)
static_assert( sizeof(MetalSurfaceCreateInfoEXT) == sizeof(VkMetalSurfaceCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<MetalSurfaceCreateInfoEXT>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_METAL_EXT
static_assert( sizeof(ViewportWScalingNV) == sizeof(VkViewportWScalingNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<ViewportWScalingNV>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineViewportWScalingStateCreateInfoNV) == sizeof(VkPipelineViewportWScalingStateCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineViewportWScalingStateCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(ViewportSwizzleNV) == sizeof(VkViewportSwizzleNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<ViewportSwizzleNV>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineViewportSwizzleStateCreateInfoNV) == sizeof(VkPipelineViewportSwizzleStateCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineViewportSwizzleStateCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceDiscardRectanglePropertiesEXT) == sizeof(VkPhysicalDeviceDiscardRectanglePropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceDiscardRectanglePropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineDiscardRectangleStateCreateInfoEXT) == sizeof(VkPipelineDiscardRectangleStateCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineDiscardRectangleStateCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX) == sizeof(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX>::value, "Must be a standard layout type" );
static_assert( sizeof(InputAttachmentAspectReference) == sizeof(VkInputAttachmentAspectReference), "Must maintain size between types" );
static_assert( std::is_standard_layout<InputAttachmentAspectReference>::value, "Must be a standard layout type" );
static_assert( sizeof(InputAttachmentAspectReferenceKHR) == sizeof(VkInputAttachmentAspectReferenceKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<InputAttachmentAspectReferenceKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(RenderPassInputAttachmentAspectCreateInfo) == sizeof(VkRenderPassInputAttachmentAspectCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<RenderPassInputAttachmentAspectCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(RenderPassInputAttachmentAspectCreateInfoKHR) == sizeof(VkRenderPassInputAttachmentAspectCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<RenderPassInputAttachmentAspectCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceSurfaceInfo2KHR) == sizeof(VkPhysicalDeviceSurfaceInfo2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceSurfaceInfo2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(SurfaceCapabilities2KHR) == sizeof(VkSurfaceCapabilities2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<SurfaceCapabilities2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(SurfaceFormat2KHR) == sizeof(VkSurfaceFormat2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<SurfaceFormat2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(DisplayProperties2KHR) == sizeof(VkDisplayProperties2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<DisplayProperties2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(DisplayPlaneProperties2KHR) == sizeof(VkDisplayPlaneProperties2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<DisplayPlaneProperties2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(DisplayModeProperties2KHR) == sizeof(VkDisplayModeProperties2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<DisplayModeProperties2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(DisplayPlaneInfo2KHR) == sizeof(VkDisplayPlaneInfo2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<DisplayPlaneInfo2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(DisplayPlaneCapabilities2KHR) == sizeof(VkDisplayPlaneCapabilities2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<DisplayPlaneCapabilities2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(SharedPresentSurfaceCapabilitiesKHR) == sizeof(VkSharedPresentSurfaceCapabilitiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<SharedPresentSurfaceCapabilitiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDevice16BitStorageFeatures) == sizeof(VkPhysicalDevice16BitStorageFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDevice16BitStorageFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDevice16BitStorageFeaturesKHR) == sizeof(VkPhysicalDevice16BitStorageFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDevice16BitStorageFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceSubgroupProperties) == sizeof(VkPhysicalDeviceSubgroupProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceSubgroupProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceShaderSubgroupExtendedTypesFeatures) == sizeof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceShaderSubgroupExtendedTypesFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR) == sizeof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(BufferMemoryRequirementsInfo2) == sizeof(VkBufferMemoryRequirementsInfo2), "Must maintain size between types" );
static_assert( std::is_standard_layout<BufferMemoryRequirementsInfo2>::value, "Must be a standard layout type" );
static_assert( sizeof(BufferMemoryRequirementsInfo2KHR) == sizeof(VkBufferMemoryRequirementsInfo2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<BufferMemoryRequirementsInfo2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageMemoryRequirementsInfo2) == sizeof(VkImageMemoryRequirementsInfo2), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageMemoryRequirementsInfo2>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageMemoryRequirementsInfo2KHR) == sizeof(VkImageMemoryRequirementsInfo2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageMemoryRequirementsInfo2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageSparseMemoryRequirementsInfo2) == sizeof(VkImageSparseMemoryRequirementsInfo2), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageSparseMemoryRequirementsInfo2>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageSparseMemoryRequirementsInfo2KHR) == sizeof(VkImageSparseMemoryRequirementsInfo2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageSparseMemoryRequirementsInfo2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(MemoryRequirements2) == sizeof(VkMemoryRequirements2), "Must maintain size between types" );
static_assert( std::is_standard_layout<MemoryRequirements2>::value, "Must be a standard layout type" );
static_assert( sizeof(MemoryRequirements2KHR) == sizeof(VkMemoryRequirements2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<MemoryRequirements2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(SparseImageMemoryRequirements2) == sizeof(VkSparseImageMemoryRequirements2), "Must maintain size between types" );
static_assert( std::is_standard_layout<SparseImageMemoryRequirements2>::value, "Must be a standard layout type" );
static_assert( sizeof(SparseImageMemoryRequirements2KHR) == sizeof(VkSparseImageMemoryRequirements2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<SparseImageMemoryRequirements2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDevicePointClippingProperties) == sizeof(VkPhysicalDevicePointClippingProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDevicePointClippingProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDevicePointClippingPropertiesKHR) == sizeof(VkPhysicalDevicePointClippingPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDevicePointClippingPropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(MemoryDedicatedRequirements) == sizeof(VkMemoryDedicatedRequirements), "Must maintain size between types" );
static_assert( std::is_standard_layout<MemoryDedicatedRequirements>::value, "Must be a standard layout type" );
static_assert( sizeof(MemoryDedicatedRequirementsKHR) == sizeof(VkMemoryDedicatedRequirementsKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<MemoryDedicatedRequirementsKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(MemoryDedicatedAllocateInfo) == sizeof(VkMemoryDedicatedAllocateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<MemoryDedicatedAllocateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(MemoryDedicatedAllocateInfoKHR) == sizeof(VkMemoryDedicatedAllocateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<MemoryDedicatedAllocateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageViewUsageCreateInfo) == sizeof(VkImageViewUsageCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageViewUsageCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageViewUsageCreateInfoKHR) == sizeof(VkImageViewUsageCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageViewUsageCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineTessellationDomainOriginStateCreateInfo) == sizeof(VkPipelineTessellationDomainOriginStateCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineTessellationDomainOriginStateCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineTessellationDomainOriginStateCreateInfoKHR) == sizeof(VkPipelineTessellationDomainOriginStateCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineTessellationDomainOriginStateCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(SamplerYcbcrConversionInfo) == sizeof(VkSamplerYcbcrConversionInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<SamplerYcbcrConversionInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(SamplerYcbcrConversionInfoKHR) == sizeof(VkSamplerYcbcrConversionInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<SamplerYcbcrConversionInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(SamplerYcbcrConversionCreateInfo) == sizeof(VkSamplerYcbcrConversionCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<SamplerYcbcrConversionCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(SamplerYcbcrConversionCreateInfoKHR) == sizeof(VkSamplerYcbcrConversionCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<SamplerYcbcrConversionCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(BindImagePlaneMemoryInfo) == sizeof(VkBindImagePlaneMemoryInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<BindImagePlaneMemoryInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(BindImagePlaneMemoryInfoKHR) == sizeof(VkBindImagePlaneMemoryInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<BindImagePlaneMemoryInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(ImagePlaneMemoryRequirementsInfo) == sizeof(VkImagePlaneMemoryRequirementsInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImagePlaneMemoryRequirementsInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(ImagePlaneMemoryRequirementsInfoKHR) == sizeof(VkImagePlaneMemoryRequirementsInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImagePlaneMemoryRequirementsInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceSamplerYcbcrConversionFeatures) == sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceSamplerYcbcrConversionFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceSamplerYcbcrConversionFeaturesKHR) == sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceSamplerYcbcrConversionFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(SamplerYcbcrConversionImageFormatProperties) == sizeof(VkSamplerYcbcrConversionImageFormatProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<SamplerYcbcrConversionImageFormatProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(SamplerYcbcrConversionImageFormatPropertiesKHR) == sizeof(VkSamplerYcbcrConversionImageFormatPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<SamplerYcbcrConversionImageFormatPropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(TextureLODGatherFormatPropertiesAMD) == sizeof(VkTextureLODGatherFormatPropertiesAMD), "Must maintain size between types" );
static_assert( std::is_standard_layout<TextureLODGatherFormatPropertiesAMD>::value, "Must be a standard layout type" );
static_assert( sizeof(ConditionalRenderingBeginInfoEXT) == sizeof(VkConditionalRenderingBeginInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<ConditionalRenderingBeginInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(ProtectedSubmitInfo) == sizeof(VkProtectedSubmitInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<ProtectedSubmitInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceProtectedMemoryFeatures) == sizeof(VkPhysicalDeviceProtectedMemoryFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceProtectedMemoryFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceProtectedMemoryProperties) == sizeof(VkPhysicalDeviceProtectedMemoryProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceProtectedMemoryProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(DeviceQueueInfo2) == sizeof(VkDeviceQueueInfo2), "Must maintain size between types" );
static_assert( std::is_standard_layout<DeviceQueueInfo2>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineCoverageToColorStateCreateInfoNV) == sizeof(VkPipelineCoverageToColorStateCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineCoverageToColorStateCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceSamplerFilterMinmaxProperties) == sizeof(VkPhysicalDeviceSamplerFilterMinmaxProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceSamplerFilterMinmaxProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceSamplerFilterMinmaxPropertiesEXT) == sizeof(VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceSamplerFilterMinmaxPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(SampleLocationEXT) == sizeof(VkSampleLocationEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<SampleLocationEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(SampleLocationsInfoEXT) == sizeof(VkSampleLocationsInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<SampleLocationsInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(AttachmentSampleLocationsEXT) == sizeof(VkAttachmentSampleLocationsEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<AttachmentSampleLocationsEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(SubpassSampleLocationsEXT) == sizeof(VkSubpassSampleLocationsEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<SubpassSampleLocationsEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(RenderPassSampleLocationsBeginInfoEXT) == sizeof(VkRenderPassSampleLocationsBeginInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<RenderPassSampleLocationsBeginInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineSampleLocationsStateCreateInfoEXT) == sizeof(VkPipelineSampleLocationsStateCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineSampleLocationsStateCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceSampleLocationsPropertiesEXT) == sizeof(VkPhysicalDeviceSampleLocationsPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceSampleLocationsPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(MultisamplePropertiesEXT) == sizeof(VkMultisamplePropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<MultisamplePropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(SamplerReductionModeCreateInfo) == sizeof(VkSamplerReductionModeCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<SamplerReductionModeCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(SamplerReductionModeCreateInfoEXT) == sizeof(VkSamplerReductionModeCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<SamplerReductionModeCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceBlendOperationAdvancedFeaturesEXT) == sizeof(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceBlendOperationAdvancedFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceBlendOperationAdvancedPropertiesEXT) == sizeof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceBlendOperationAdvancedPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineColorBlendAdvancedStateCreateInfoEXT) == sizeof(VkPipelineColorBlendAdvancedStateCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineColorBlendAdvancedStateCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceInlineUniformBlockFeaturesEXT) == sizeof(VkPhysicalDeviceInlineUniformBlockFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceInlineUniformBlockFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceInlineUniformBlockPropertiesEXT) == sizeof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceInlineUniformBlockPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(WriteDescriptorSetInlineUniformBlockEXT) == sizeof(VkWriteDescriptorSetInlineUniformBlockEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<WriteDescriptorSetInlineUniformBlockEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(DescriptorPoolInlineUniformBlockCreateInfoEXT) == sizeof(VkDescriptorPoolInlineUniformBlockCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<DescriptorPoolInlineUniformBlockCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineCoverageModulationStateCreateInfoNV) == sizeof(VkPipelineCoverageModulationStateCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineCoverageModulationStateCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageFormatListCreateInfo) == sizeof(VkImageFormatListCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageFormatListCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageFormatListCreateInfoKHR) == sizeof(VkImageFormatListCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageFormatListCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(ValidationCacheCreateInfoEXT) == sizeof(VkValidationCacheCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<ValidationCacheCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(ShaderModuleValidationCacheCreateInfoEXT) == sizeof(VkShaderModuleValidationCacheCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<ShaderModuleValidationCacheCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceMaintenance3Properties) == sizeof(VkPhysicalDeviceMaintenance3Properties), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceMaintenance3Properties>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceMaintenance3PropertiesKHR) == sizeof(VkPhysicalDeviceMaintenance3PropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceMaintenance3PropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(DescriptorSetLayoutSupport) == sizeof(VkDescriptorSetLayoutSupport), "Must maintain size between types" );
static_assert( std::is_standard_layout<DescriptorSetLayoutSupport>::value, "Must be a standard layout type" );
static_assert( sizeof(DescriptorSetLayoutSupportKHR) == sizeof(VkDescriptorSetLayoutSupportKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<DescriptorSetLayoutSupportKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceShaderDrawParametersFeatures) == sizeof(VkPhysicalDeviceShaderDrawParametersFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceShaderDrawParametersFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceShaderDrawParameterFeatures) == sizeof(VkPhysicalDeviceShaderDrawParameterFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceShaderDrawParameterFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceShaderFloat16Int8Features) == sizeof(VkPhysicalDeviceShaderFloat16Int8Features), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceShaderFloat16Int8Features>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceShaderFloat16Int8FeaturesKHR) == sizeof(VkPhysicalDeviceShaderFloat16Int8FeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceShaderFloat16Int8FeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceFloat16Int8FeaturesKHR) == sizeof(VkPhysicalDeviceFloat16Int8FeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceFloat16Int8FeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceFloatControlsProperties) == sizeof(VkPhysicalDeviceFloatControlsProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceFloatControlsProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceFloatControlsPropertiesKHR) == sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceFloatControlsPropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceHostQueryResetFeatures) == sizeof(VkPhysicalDeviceHostQueryResetFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceHostQueryResetFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceHostQueryResetFeaturesEXT) == sizeof(VkPhysicalDeviceHostQueryResetFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceHostQueryResetFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(ShaderResourceUsageAMD) == sizeof(VkShaderResourceUsageAMD), "Must maintain size between types" );
static_assert( std::is_standard_layout<ShaderResourceUsageAMD>::value, "Must be a standard layout type" );
static_assert( sizeof(ShaderStatisticsInfoAMD) == sizeof(VkShaderStatisticsInfoAMD), "Must maintain size between types" );
static_assert( std::is_standard_layout<ShaderStatisticsInfoAMD>::value, "Must be a standard layout type" );
static_assert( sizeof(DeviceQueueGlobalPriorityCreateInfoEXT) == sizeof(VkDeviceQueueGlobalPriorityCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<DeviceQueueGlobalPriorityCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(DebugUtilsObjectNameInfoEXT) == sizeof(VkDebugUtilsObjectNameInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<DebugUtilsObjectNameInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(DebugUtilsObjectTagInfoEXT) == sizeof(VkDebugUtilsObjectTagInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<DebugUtilsObjectTagInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(DebugUtilsLabelEXT) == sizeof(VkDebugUtilsLabelEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<DebugUtilsLabelEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(DebugUtilsMessengerCreateInfoEXT) == sizeof(VkDebugUtilsMessengerCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<DebugUtilsMessengerCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(DebugUtilsMessengerCallbackDataEXT) == sizeof(VkDebugUtilsMessengerCallbackDataEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<DebugUtilsMessengerCallbackDataEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(ImportMemoryHostPointerInfoEXT) == sizeof(VkImportMemoryHostPointerInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImportMemoryHostPointerInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(MemoryHostPointerPropertiesEXT) == sizeof(VkMemoryHostPointerPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<MemoryHostPointerPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceExternalMemoryHostPropertiesEXT) == sizeof(VkPhysicalDeviceExternalMemoryHostPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceExternalMemoryHostPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceConservativeRasterizationPropertiesEXT) == sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceConservativeRasterizationPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(CalibratedTimestampInfoEXT) == sizeof(VkCalibratedTimestampInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<CalibratedTimestampInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceShaderCorePropertiesAMD) == sizeof(VkPhysicalDeviceShaderCorePropertiesAMD), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceShaderCorePropertiesAMD>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceShaderCoreProperties2AMD) == sizeof(VkPhysicalDeviceShaderCoreProperties2AMD), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceShaderCoreProperties2AMD>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineRasterizationConservativeStateCreateInfoEXT) == sizeof(VkPipelineRasterizationConservativeStateCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineRasterizationConservativeStateCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceDescriptorIndexingFeatures) == sizeof(VkPhysicalDeviceDescriptorIndexingFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceDescriptorIndexingFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceDescriptorIndexingFeaturesEXT) == sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceDescriptorIndexingFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceDescriptorIndexingProperties) == sizeof(VkPhysicalDeviceDescriptorIndexingProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceDescriptorIndexingProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceDescriptorIndexingPropertiesEXT) == sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceDescriptorIndexingPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(DescriptorSetLayoutBindingFlagsCreateInfo) == sizeof(VkDescriptorSetLayoutBindingFlagsCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<DescriptorSetLayoutBindingFlagsCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(DescriptorSetLayoutBindingFlagsCreateInfoEXT) == sizeof(VkDescriptorSetLayoutBindingFlagsCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<DescriptorSetLayoutBindingFlagsCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(DescriptorSetVariableDescriptorCountAllocateInfo) == sizeof(VkDescriptorSetVariableDescriptorCountAllocateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<DescriptorSetVariableDescriptorCountAllocateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(DescriptorSetVariableDescriptorCountAllocateInfoEXT) == sizeof(VkDescriptorSetVariableDescriptorCountAllocateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<DescriptorSetVariableDescriptorCountAllocateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(DescriptorSetVariableDescriptorCountLayoutSupport) == sizeof(VkDescriptorSetVariableDescriptorCountLayoutSupport), "Must maintain size between types" );
static_assert( std::is_standard_layout<DescriptorSetVariableDescriptorCountLayoutSupport>::value, "Must be a standard layout type" );
static_assert( sizeof(DescriptorSetVariableDescriptorCountLayoutSupportEXT) == sizeof(VkDescriptorSetVariableDescriptorCountLayoutSupportEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<DescriptorSetVariableDescriptorCountLayoutSupportEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(AttachmentDescription2) == sizeof(VkAttachmentDescription2), "Must maintain size between types" );
static_assert( std::is_standard_layout<AttachmentDescription2>::value, "Must be a standard layout type" );
static_assert( sizeof(AttachmentDescription2KHR) == sizeof(VkAttachmentDescription2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<AttachmentDescription2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(AttachmentReference2) == sizeof(VkAttachmentReference2), "Must maintain size between types" );
static_assert( std::is_standard_layout<AttachmentReference2>::value, "Must be a standard layout type" );
static_assert( sizeof(AttachmentReference2KHR) == sizeof(VkAttachmentReference2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<AttachmentReference2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(SubpassDescription2) == sizeof(VkSubpassDescription2), "Must maintain size between types" );
static_assert( std::is_standard_layout<SubpassDescription2>::value, "Must be a standard layout type" );
static_assert( sizeof(SubpassDescription2KHR) == sizeof(VkSubpassDescription2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<SubpassDescription2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(SubpassDependency2) == sizeof(VkSubpassDependency2), "Must maintain size between types" );
static_assert( std::is_standard_layout<SubpassDependency2>::value, "Must be a standard layout type" );
static_assert( sizeof(SubpassDependency2KHR) == sizeof(VkSubpassDependency2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<SubpassDependency2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(RenderPassCreateInfo2) == sizeof(VkRenderPassCreateInfo2), "Must maintain size between types" );
static_assert( std::is_standard_layout<RenderPassCreateInfo2>::value, "Must be a standard layout type" );
static_assert( sizeof(RenderPassCreateInfo2KHR) == sizeof(VkRenderPassCreateInfo2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<RenderPassCreateInfo2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(SubpassBeginInfo) == sizeof(VkSubpassBeginInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<SubpassBeginInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(SubpassBeginInfoKHR) == sizeof(VkSubpassBeginInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<SubpassBeginInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(SubpassEndInfo) == sizeof(VkSubpassEndInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<SubpassEndInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(SubpassEndInfoKHR) == sizeof(VkSubpassEndInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<SubpassEndInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceTimelineSemaphoreFeatures) == sizeof(VkPhysicalDeviceTimelineSemaphoreFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceTimelineSemaphoreFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceTimelineSemaphoreFeaturesKHR) == sizeof(VkPhysicalDeviceTimelineSemaphoreFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceTimelineSemaphoreFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceTimelineSemaphoreProperties) == sizeof(VkPhysicalDeviceTimelineSemaphoreProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceTimelineSemaphoreProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceTimelineSemaphorePropertiesKHR) == sizeof(VkPhysicalDeviceTimelineSemaphorePropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceTimelineSemaphorePropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(SemaphoreTypeCreateInfo) == sizeof(VkSemaphoreTypeCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<SemaphoreTypeCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(SemaphoreTypeCreateInfoKHR) == sizeof(VkSemaphoreTypeCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<SemaphoreTypeCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(TimelineSemaphoreSubmitInfo) == sizeof(VkTimelineSemaphoreSubmitInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<TimelineSemaphoreSubmitInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(TimelineSemaphoreSubmitInfoKHR) == sizeof(VkTimelineSemaphoreSubmitInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<TimelineSemaphoreSubmitInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(SemaphoreWaitInfo) == sizeof(VkSemaphoreWaitInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<SemaphoreWaitInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(SemaphoreWaitInfoKHR) == sizeof(VkSemaphoreWaitInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<SemaphoreWaitInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(SemaphoreSignalInfo) == sizeof(VkSemaphoreSignalInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<SemaphoreSignalInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(SemaphoreSignalInfoKHR) == sizeof(VkSemaphoreSignalInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<SemaphoreSignalInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(VertexInputBindingDivisorDescriptionEXT) == sizeof(VkVertexInputBindingDivisorDescriptionEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<VertexInputBindingDivisorDescriptionEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineVertexInputDivisorStateCreateInfoEXT) == sizeof(VkPipelineVertexInputDivisorStateCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineVertexInputDivisorStateCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceVertexAttributeDivisorPropertiesEXT) == sizeof(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceVertexAttributeDivisorPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDevicePCIBusInfoPropertiesEXT) == sizeof(VkPhysicalDevicePCIBusInfoPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDevicePCIBusInfoPropertiesEXT>::value, "Must be a standard layout type" );
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
static_assert( sizeof(ImportAndroidHardwareBufferInfoANDROID) == sizeof(VkImportAndroidHardwareBufferInfoANDROID), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImportAndroidHardwareBufferInfoANDROID>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_ANDROID_KHR
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
static_assert( sizeof(AndroidHardwareBufferUsageANDROID) == sizeof(VkAndroidHardwareBufferUsageANDROID), "Must maintain size between types" );
static_assert( std::is_standard_layout<AndroidHardwareBufferUsageANDROID>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_ANDROID_KHR
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
static_assert( sizeof(AndroidHardwareBufferPropertiesANDROID) == sizeof(VkAndroidHardwareBufferPropertiesANDROID), "Must maintain size between types" );
static_assert( std::is_standard_layout<AndroidHardwareBufferPropertiesANDROID>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_ANDROID_KHR
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
static_assert( sizeof(MemoryGetAndroidHardwareBufferInfoANDROID) == sizeof(VkMemoryGetAndroidHardwareBufferInfoANDROID), "Must maintain size between types" );
static_assert( std::is_standard_layout<MemoryGetAndroidHardwareBufferInfoANDROID>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_ANDROID_KHR
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
static_assert( sizeof(AndroidHardwareBufferFormatPropertiesANDROID) == sizeof(VkAndroidHardwareBufferFormatPropertiesANDROID), "Must maintain size between types" );
static_assert( std::is_standard_layout<AndroidHardwareBufferFormatPropertiesANDROID>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_ANDROID_KHR
static_assert( sizeof(CommandBufferInheritanceConditionalRenderingInfoEXT) == sizeof(VkCommandBufferInheritanceConditionalRenderingInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<CommandBufferInheritanceConditionalRenderingInfoEXT>::value, "Must be a standard layout type" );
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
static_assert( sizeof(ExternalFormatANDROID) == sizeof(VkExternalFormatANDROID), "Must maintain size between types" );
static_assert( std::is_standard_layout<ExternalFormatANDROID>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_ANDROID_KHR
static_assert( sizeof(PhysicalDevice8BitStorageFeatures) == sizeof(VkPhysicalDevice8BitStorageFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDevice8BitStorageFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDevice8BitStorageFeaturesKHR) == sizeof(VkPhysicalDevice8BitStorageFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDevice8BitStorageFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceConditionalRenderingFeaturesEXT) == sizeof(VkPhysicalDeviceConditionalRenderingFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceConditionalRenderingFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceVulkanMemoryModelFeatures) == sizeof(VkPhysicalDeviceVulkanMemoryModelFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceVulkanMemoryModelFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceVulkanMemoryModelFeaturesKHR) == sizeof(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceVulkanMemoryModelFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceShaderAtomicInt64Features) == sizeof(VkPhysicalDeviceShaderAtomicInt64Features), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceShaderAtomicInt64Features>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceShaderAtomicInt64FeaturesKHR) == sizeof(VkPhysicalDeviceShaderAtomicInt64FeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceShaderAtomicInt64FeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceShaderAtomicFloatFeaturesEXT) == sizeof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceShaderAtomicFloatFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceVertexAttributeDivisorFeaturesEXT) == sizeof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceVertexAttributeDivisorFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(QueueFamilyCheckpointPropertiesNV) == sizeof(VkQueueFamilyCheckpointPropertiesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<QueueFamilyCheckpointPropertiesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(CheckpointDataNV) == sizeof(VkCheckpointDataNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<CheckpointDataNV>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceDepthStencilResolveProperties) == sizeof(VkPhysicalDeviceDepthStencilResolveProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceDepthStencilResolveProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceDepthStencilResolvePropertiesKHR) == sizeof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceDepthStencilResolvePropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(SubpassDescriptionDepthStencilResolve) == sizeof(VkSubpassDescriptionDepthStencilResolve), "Must maintain size between types" );
static_assert( std::is_standard_layout<SubpassDescriptionDepthStencilResolve>::value, "Must be a standard layout type" );
static_assert( sizeof(SubpassDescriptionDepthStencilResolveKHR) == sizeof(VkSubpassDescriptionDepthStencilResolveKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<SubpassDescriptionDepthStencilResolveKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageViewASTCDecodeModeEXT) == sizeof(VkImageViewASTCDecodeModeEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageViewASTCDecodeModeEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceASTCDecodeFeaturesEXT) == sizeof(VkPhysicalDeviceASTCDecodeFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceASTCDecodeFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceTransformFeedbackFeaturesEXT) == sizeof(VkPhysicalDeviceTransformFeedbackFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceTransformFeedbackFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceTransformFeedbackPropertiesEXT) == sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceTransformFeedbackPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineRasterizationStateStreamCreateInfoEXT) == sizeof(VkPipelineRasterizationStateStreamCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineRasterizationStateStreamCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceRepresentativeFragmentTestFeaturesNV) == sizeof(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceRepresentativeFragmentTestFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineRepresentativeFragmentTestStateCreateInfoNV) == sizeof(VkPipelineRepresentativeFragmentTestStateCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineRepresentativeFragmentTestStateCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceExclusiveScissorFeaturesNV) == sizeof(VkPhysicalDeviceExclusiveScissorFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceExclusiveScissorFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineViewportExclusiveScissorStateCreateInfoNV) == sizeof(VkPipelineViewportExclusiveScissorStateCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineViewportExclusiveScissorStateCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceCornerSampledImageFeaturesNV) == sizeof(VkPhysicalDeviceCornerSampledImageFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceCornerSampledImageFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceComputeShaderDerivativesFeaturesNV) == sizeof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceComputeShaderDerivativesFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceFragmentShaderBarycentricFeaturesNV) == sizeof(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceFragmentShaderBarycentricFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceShaderImageFootprintFeaturesNV) == sizeof(VkPhysicalDeviceShaderImageFootprintFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceShaderImageFootprintFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV) == sizeof(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(ShadingRatePaletteNV) == sizeof(VkShadingRatePaletteNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<ShadingRatePaletteNV>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineViewportShadingRateImageStateCreateInfoNV) == sizeof(VkPipelineViewportShadingRateImageStateCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineViewportShadingRateImageStateCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceShadingRateImageFeaturesNV) == sizeof(VkPhysicalDeviceShadingRateImageFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceShadingRateImageFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceShadingRateImagePropertiesNV) == sizeof(VkPhysicalDeviceShadingRateImagePropertiesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceShadingRateImagePropertiesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(CoarseSampleLocationNV) == sizeof(VkCoarseSampleLocationNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<CoarseSampleLocationNV>::value, "Must be a standard layout type" );
static_assert( sizeof(CoarseSampleOrderCustomNV) == sizeof(VkCoarseSampleOrderCustomNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<CoarseSampleOrderCustomNV>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineViewportCoarseSampleOrderStateCreateInfoNV) == sizeof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineViewportCoarseSampleOrderStateCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceMeshShaderFeaturesNV) == sizeof(VkPhysicalDeviceMeshShaderFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceMeshShaderFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceMeshShaderPropertiesNV) == sizeof(VkPhysicalDeviceMeshShaderPropertiesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceMeshShaderPropertiesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(DrawMeshTasksIndirectCommandNV) == sizeof(VkDrawMeshTasksIndirectCommandNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<DrawMeshTasksIndirectCommandNV>::value, "Must be a standard layout type" );
static_assert( sizeof(RayTracingShaderGroupCreateInfoNV) == sizeof(VkRayTracingShaderGroupCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<RayTracingShaderGroupCreateInfoNV>::value, "Must be a standard layout type" );
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(RayTracingShaderGroupCreateInfoKHR) == sizeof(VkRayTracingShaderGroupCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<RayTracingShaderGroupCreateInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_ENABLE_BETA_EXTENSIONS
static_assert( sizeof(RayTracingPipelineCreateInfoNV) == sizeof(VkRayTracingPipelineCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<RayTracingPipelineCreateInfoNV>::value, "Must be a standard layout type" );
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(RayTracingPipelineInterfaceCreateInfoKHR) == sizeof(VkRayTracingPipelineInterfaceCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<RayTracingPipelineInterfaceCreateInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_ENABLE_BETA_EXTENSIONS
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(PipelineLibraryCreateInfoKHR) == sizeof(VkPipelineLibraryCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineLibraryCreateInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_ENABLE_BETA_EXTENSIONS
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(RayTracingPipelineCreateInfoKHR) == sizeof(VkRayTracingPipelineCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<RayTracingPipelineCreateInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_ENABLE_BETA_EXTENSIONS
static_assert( sizeof(GeometryTrianglesNV) == sizeof(VkGeometryTrianglesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<GeometryTrianglesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(GeometryAABBNV) == sizeof(VkGeometryAABBNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<GeometryAABBNV>::value, "Must be a standard layout type" );
static_assert( sizeof(GeometryDataNV) == sizeof(VkGeometryDataNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<GeometryDataNV>::value, "Must be a standard layout type" );
static_assert( sizeof(GeometryNV) == sizeof(VkGeometryNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<GeometryNV>::value, "Must be a standard layout type" );
static_assert( sizeof(AccelerationStructureInfoNV) == sizeof(VkAccelerationStructureInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<AccelerationStructureInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(AccelerationStructureCreateInfoNV) == sizeof(VkAccelerationStructureCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<AccelerationStructureCreateInfoNV>::value, "Must be a standard layout type" );
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(BindAccelerationStructureMemoryInfoKHR) == sizeof(VkBindAccelerationStructureMemoryInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<BindAccelerationStructureMemoryInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_ENABLE_BETA_EXTENSIONS
static_assert( sizeof(BindAccelerationStructureMemoryInfoNV) == sizeof(VkBindAccelerationStructureMemoryInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<BindAccelerationStructureMemoryInfoNV>::value, "Must be a standard layout type" );
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(WriteDescriptorSetAccelerationStructureKHR) == sizeof(VkWriteDescriptorSetAccelerationStructureKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<WriteDescriptorSetAccelerationStructureKHR>::value, "Must be a standard layout type" );
#endif // VK_ENABLE_BETA_EXTENSIONS
static_assert( sizeof(WriteDescriptorSetAccelerationStructureNV) == sizeof(VkWriteDescriptorSetAccelerationStructureNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<WriteDescriptorSetAccelerationStructureNV>::value, "Must be a standard layout type" );
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(AccelerationStructureMemoryRequirementsInfoKHR) == sizeof(VkAccelerationStructureMemoryRequirementsInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<AccelerationStructureMemoryRequirementsInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_ENABLE_BETA_EXTENSIONS
static_assert( sizeof(AccelerationStructureMemoryRequirementsInfoNV) == sizeof(VkAccelerationStructureMemoryRequirementsInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<AccelerationStructureMemoryRequirementsInfoNV>::value, "Must be a standard layout type" );
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(PhysicalDeviceRayTracingFeaturesKHR) == sizeof(VkPhysicalDeviceRayTracingFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceRayTracingFeaturesKHR>::value, "Must be a standard layout type" );
#endif // VK_ENABLE_BETA_EXTENSIONS
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(PhysicalDeviceRayTracingPropertiesKHR) == sizeof(VkPhysicalDeviceRayTracingPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceRayTracingPropertiesKHR>::value, "Must be a standard layout type" );
#endif // VK_ENABLE_BETA_EXTENSIONS
static_assert( sizeof(PhysicalDeviceRayTracingPropertiesNV) == sizeof(VkPhysicalDeviceRayTracingPropertiesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceRayTracingPropertiesNV>::value, "Must be a standard layout type" );
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(StridedBufferRegionKHR) == sizeof(VkStridedBufferRegionKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<StridedBufferRegionKHR>::value, "Must be a standard layout type" );
#endif // VK_ENABLE_BETA_EXTENSIONS
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(TraceRaysIndirectCommandKHR) == sizeof(VkTraceRaysIndirectCommandKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<TraceRaysIndirectCommandKHR>::value, "Must be a standard layout type" );
#endif // VK_ENABLE_BETA_EXTENSIONS
static_assert( sizeof(DrmFormatModifierPropertiesEXT) == sizeof(VkDrmFormatModifierPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<DrmFormatModifierPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(DrmFormatModifierPropertiesListEXT) == sizeof(VkDrmFormatModifierPropertiesListEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<DrmFormatModifierPropertiesListEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceImageDrmFormatModifierInfoEXT) == sizeof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceImageDrmFormatModifierInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageDrmFormatModifierListCreateInfoEXT) == sizeof(VkImageDrmFormatModifierListCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageDrmFormatModifierListCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageDrmFormatModifierExplicitCreateInfoEXT) == sizeof(VkImageDrmFormatModifierExplicitCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageDrmFormatModifierExplicitCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageDrmFormatModifierPropertiesEXT) == sizeof(VkImageDrmFormatModifierPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageDrmFormatModifierPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageStencilUsageCreateInfo) == sizeof(VkImageStencilUsageCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageStencilUsageCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageStencilUsageCreateInfoEXT) == sizeof(VkImageStencilUsageCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageStencilUsageCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(DeviceMemoryOverallocationCreateInfoAMD) == sizeof(VkDeviceMemoryOverallocationCreateInfoAMD), "Must maintain size between types" );
static_assert( std::is_standard_layout<DeviceMemoryOverallocationCreateInfoAMD>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceFragmentDensityMapFeaturesEXT) == sizeof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceFragmentDensityMapFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceFragmentDensityMap2FeaturesEXT) == sizeof(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceFragmentDensityMap2FeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceFragmentDensityMapPropertiesEXT) == sizeof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceFragmentDensityMapPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceFragmentDensityMap2PropertiesEXT) == sizeof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceFragmentDensityMap2PropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(RenderPassFragmentDensityMapCreateInfoEXT) == sizeof(VkRenderPassFragmentDensityMapCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<RenderPassFragmentDensityMapCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceScalarBlockLayoutFeatures) == sizeof(VkPhysicalDeviceScalarBlockLayoutFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceScalarBlockLayoutFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceScalarBlockLayoutFeaturesEXT) == sizeof(VkPhysicalDeviceScalarBlockLayoutFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceScalarBlockLayoutFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(SurfaceProtectedCapabilitiesKHR) == sizeof(VkSurfaceProtectedCapabilitiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<SurfaceProtectedCapabilitiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceUniformBufferStandardLayoutFeatures) == sizeof(VkPhysicalDeviceUniformBufferStandardLayoutFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceUniformBufferStandardLayoutFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceUniformBufferStandardLayoutFeaturesKHR) == sizeof(VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceUniformBufferStandardLayoutFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceDepthClipEnableFeaturesEXT) == sizeof(VkPhysicalDeviceDepthClipEnableFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceDepthClipEnableFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineRasterizationDepthClipStateCreateInfoEXT) == sizeof(VkPipelineRasterizationDepthClipStateCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineRasterizationDepthClipStateCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceMemoryBudgetPropertiesEXT) == sizeof(VkPhysicalDeviceMemoryBudgetPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceMemoryBudgetPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceMemoryPriorityFeaturesEXT) == sizeof(VkPhysicalDeviceMemoryPriorityFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceMemoryPriorityFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(MemoryPriorityAllocateInfoEXT) == sizeof(VkMemoryPriorityAllocateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<MemoryPriorityAllocateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceBufferDeviceAddressFeatures) == sizeof(VkPhysicalDeviceBufferDeviceAddressFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceBufferDeviceAddressFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceBufferDeviceAddressFeaturesKHR) == sizeof(VkPhysicalDeviceBufferDeviceAddressFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceBufferDeviceAddressFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceBufferDeviceAddressFeaturesEXT) == sizeof(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceBufferDeviceAddressFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceBufferAddressFeaturesEXT) == sizeof(VkPhysicalDeviceBufferAddressFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceBufferAddressFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(BufferDeviceAddressInfo) == sizeof(VkBufferDeviceAddressInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<BufferDeviceAddressInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(BufferDeviceAddressInfoKHR) == sizeof(VkBufferDeviceAddressInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<BufferDeviceAddressInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(BufferDeviceAddressInfoEXT) == sizeof(VkBufferDeviceAddressInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<BufferDeviceAddressInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(BufferOpaqueCaptureAddressCreateInfo) == sizeof(VkBufferOpaqueCaptureAddressCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<BufferOpaqueCaptureAddressCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(BufferOpaqueCaptureAddressCreateInfoKHR) == sizeof(VkBufferOpaqueCaptureAddressCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<BufferOpaqueCaptureAddressCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(BufferDeviceAddressCreateInfoEXT) == sizeof(VkBufferDeviceAddressCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<BufferDeviceAddressCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceImageViewImageFormatInfoEXT) == sizeof(VkPhysicalDeviceImageViewImageFormatInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceImageViewImageFormatInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(FilterCubicImageViewImageFormatPropertiesEXT) == sizeof(VkFilterCubicImageViewImageFormatPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<FilterCubicImageViewImageFormatPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceImagelessFramebufferFeatures) == sizeof(VkPhysicalDeviceImagelessFramebufferFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceImagelessFramebufferFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceImagelessFramebufferFeaturesKHR) == sizeof(VkPhysicalDeviceImagelessFramebufferFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceImagelessFramebufferFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(FramebufferAttachmentImageInfo) == sizeof(VkFramebufferAttachmentImageInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<FramebufferAttachmentImageInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(FramebufferAttachmentsCreateInfo) == sizeof(VkFramebufferAttachmentsCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<FramebufferAttachmentsCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(FramebufferAttachmentsCreateInfoKHR) == sizeof(VkFramebufferAttachmentsCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<FramebufferAttachmentsCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(FramebufferAttachmentImageInfoKHR) == sizeof(VkFramebufferAttachmentImageInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<FramebufferAttachmentImageInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(RenderPassAttachmentBeginInfo) == sizeof(VkRenderPassAttachmentBeginInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<RenderPassAttachmentBeginInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(RenderPassAttachmentBeginInfoKHR) == sizeof(VkRenderPassAttachmentBeginInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<RenderPassAttachmentBeginInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT) == sizeof(VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceCooperativeMatrixFeaturesNV) == sizeof(VkPhysicalDeviceCooperativeMatrixFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceCooperativeMatrixFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceCooperativeMatrixPropertiesNV) == sizeof(VkPhysicalDeviceCooperativeMatrixPropertiesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceCooperativeMatrixPropertiesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(CooperativeMatrixPropertiesNV) == sizeof(VkCooperativeMatrixPropertiesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<CooperativeMatrixPropertiesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceYcbcrImageArraysFeaturesEXT) == sizeof(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceYcbcrImageArraysFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageViewHandleInfoNVX) == sizeof(VkImageViewHandleInfoNVX), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageViewHandleInfoNVX>::value, "Must be a standard layout type" );
static_assert( sizeof(ImageViewAddressPropertiesNVX) == sizeof(VkImageViewAddressPropertiesNVX), "Must maintain size between types" );
static_assert( std::is_standard_layout<ImageViewAddressPropertiesNVX>::value, "Must be a standard layout type" );
#if defined(VK_USE_PLATFORM_GGP)
static_assert( sizeof(PresentFrameTokenGGP) == sizeof(VkPresentFrameTokenGGP), "Must maintain size between types" );
static_assert( std::is_standard_layout<PresentFrameTokenGGP>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_GGP
static_assert( sizeof(PipelineCreationFeedbackEXT) == sizeof(VkPipelineCreationFeedbackEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineCreationFeedbackEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineCreationFeedbackCreateInfoEXT) == sizeof(VkPipelineCreationFeedbackCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineCreationFeedbackCreateInfoEXT>::value, "Must be a standard layout type" );
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(SurfaceFullScreenExclusiveInfoEXT) == sizeof(VkSurfaceFullScreenExclusiveInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<SurfaceFullScreenExclusiveInfoEXT>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_WIN32_KHR
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(SurfaceFullScreenExclusiveWin32InfoEXT) == sizeof(VkSurfaceFullScreenExclusiveWin32InfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<SurfaceFullScreenExclusiveWin32InfoEXT>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_WIN32_KHR
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(SurfaceCapabilitiesFullScreenExclusiveEXT) == sizeof(VkSurfaceCapabilitiesFullScreenExclusiveEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<SurfaceCapabilitiesFullScreenExclusiveEXT>::value, "Must be a standard layout type" );
#endif // VK_USE_PLATFORM_WIN32_KHR
static_assert( sizeof(PhysicalDevicePerformanceQueryFeaturesKHR) == sizeof(VkPhysicalDevicePerformanceQueryFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDevicePerformanceQueryFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDevicePerformanceQueryPropertiesKHR) == sizeof(VkPhysicalDevicePerformanceQueryPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDevicePerformanceQueryPropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PerformanceCounterKHR) == sizeof(VkPerformanceCounterKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PerformanceCounterKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PerformanceCounterDescriptionKHR) == sizeof(VkPerformanceCounterDescriptionKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PerformanceCounterDescriptionKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(QueryPoolPerformanceCreateInfoKHR) == sizeof(VkQueryPoolPerformanceCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<QueryPoolPerformanceCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(AcquireProfilingLockInfoKHR) == sizeof(VkAcquireProfilingLockInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<AcquireProfilingLockInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PerformanceQuerySubmitInfoKHR) == sizeof(VkPerformanceQuerySubmitInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PerformanceQuerySubmitInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(HeadlessSurfaceCreateInfoEXT) == sizeof(VkHeadlessSurfaceCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<HeadlessSurfaceCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceCoverageReductionModeFeaturesNV) == sizeof(VkPhysicalDeviceCoverageReductionModeFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceCoverageReductionModeFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineCoverageReductionStateCreateInfoNV) == sizeof(VkPipelineCoverageReductionStateCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineCoverageReductionStateCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(FramebufferMixedSamplesCombinationNV) == sizeof(VkFramebufferMixedSamplesCombinationNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<FramebufferMixedSamplesCombinationNV>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL) == sizeof(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL>::value, "Must be a standard layout type" );
static_assert( sizeof(PerformanceValueINTEL) == sizeof(VkPerformanceValueINTEL), "Must maintain size between types" );
static_assert( std::is_standard_layout<PerformanceValueINTEL>::value, "Must be a standard layout type" );
static_assert( sizeof(InitializePerformanceApiInfoINTEL) == sizeof(VkInitializePerformanceApiInfoINTEL), "Must maintain size between types" );
static_assert( std::is_standard_layout<InitializePerformanceApiInfoINTEL>::value, "Must be a standard layout type" );
static_assert( sizeof(QueryPoolPerformanceQueryCreateInfoINTEL) == sizeof(VkQueryPoolPerformanceQueryCreateInfoINTEL), "Must maintain size between types" );
static_assert( std::is_standard_layout<QueryPoolPerformanceQueryCreateInfoINTEL>::value, "Must be a standard layout type" );
static_assert( sizeof(QueryPoolCreateInfoINTEL) == sizeof(VkQueryPoolCreateInfoINTEL), "Must maintain size between types" );
static_assert( std::is_standard_layout<QueryPoolCreateInfoINTEL>::value, "Must be a standard layout type" );
static_assert( sizeof(PerformanceMarkerInfoINTEL) == sizeof(VkPerformanceMarkerInfoINTEL), "Must maintain size between types" );
static_assert( std::is_standard_layout<PerformanceMarkerInfoINTEL>::value, "Must be a standard layout type" );
static_assert( sizeof(PerformanceStreamMarkerInfoINTEL) == sizeof(VkPerformanceStreamMarkerInfoINTEL), "Must maintain size between types" );
static_assert( std::is_standard_layout<PerformanceStreamMarkerInfoINTEL>::value, "Must be a standard layout type" );
static_assert( sizeof(PerformanceOverrideInfoINTEL) == sizeof(VkPerformanceOverrideInfoINTEL), "Must maintain size between types" );
static_assert( std::is_standard_layout<PerformanceOverrideInfoINTEL>::value, "Must be a standard layout type" );
static_assert( sizeof(PerformanceConfigurationAcquireInfoINTEL) == sizeof(VkPerformanceConfigurationAcquireInfoINTEL), "Must maintain size between types" );
static_assert( std::is_standard_layout<PerformanceConfigurationAcquireInfoINTEL>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceShaderClockFeaturesKHR) == sizeof(VkPhysicalDeviceShaderClockFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceShaderClockFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceIndexTypeUint8FeaturesEXT) == sizeof(VkPhysicalDeviceIndexTypeUint8FeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceIndexTypeUint8FeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceShaderSMBuiltinsPropertiesNV) == sizeof(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceShaderSMBuiltinsPropertiesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceShaderSMBuiltinsFeaturesNV) == sizeof(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceShaderSMBuiltinsFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceFragmentShaderInterlockFeaturesEXT) == sizeof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceFragmentShaderInterlockFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceSeparateDepthStencilLayoutsFeatures) == sizeof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceSeparateDepthStencilLayoutsFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR) == sizeof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(AttachmentReferenceStencilLayout) == sizeof(VkAttachmentReferenceStencilLayout), "Must maintain size between types" );
static_assert( std::is_standard_layout<AttachmentReferenceStencilLayout>::value, "Must be a standard layout type" );
static_assert( sizeof(AttachmentReferenceStencilLayoutKHR) == sizeof(VkAttachmentReferenceStencilLayoutKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<AttachmentReferenceStencilLayoutKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(AttachmentDescriptionStencilLayout) == sizeof(VkAttachmentDescriptionStencilLayout), "Must maintain size between types" );
static_assert( std::is_standard_layout<AttachmentDescriptionStencilLayout>::value, "Must be a standard layout type" );
static_assert( sizeof(AttachmentDescriptionStencilLayoutKHR) == sizeof(VkAttachmentDescriptionStencilLayoutKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<AttachmentDescriptionStencilLayoutKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDevicePipelineExecutablePropertiesFeaturesKHR) == sizeof(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDevicePipelineExecutablePropertiesFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineInfoKHR) == sizeof(VkPipelineInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineExecutablePropertiesKHR) == sizeof(VkPipelineExecutablePropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineExecutablePropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineExecutableInfoKHR) == sizeof(VkPipelineExecutableInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineExecutableInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineExecutableStatisticKHR) == sizeof(VkPipelineExecutableStatisticKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineExecutableStatisticKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineExecutableInternalRepresentationKHR) == sizeof(VkPipelineExecutableInternalRepresentationKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineExecutableInternalRepresentationKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT) == sizeof(VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceTexelBufferAlignmentFeaturesEXT) == sizeof(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceTexelBufferAlignmentFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceTexelBufferAlignmentPropertiesEXT) == sizeof(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceTexelBufferAlignmentPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceSubgroupSizeControlFeaturesEXT) == sizeof(VkPhysicalDeviceSubgroupSizeControlFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceSubgroupSizeControlFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceSubgroupSizeControlPropertiesEXT) == sizeof(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceSubgroupSizeControlPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT) == sizeof(VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(MemoryOpaqueCaptureAddressAllocateInfo) == sizeof(VkMemoryOpaqueCaptureAddressAllocateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<MemoryOpaqueCaptureAddressAllocateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(MemoryOpaqueCaptureAddressAllocateInfoKHR) == sizeof(VkMemoryOpaqueCaptureAddressAllocateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<MemoryOpaqueCaptureAddressAllocateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(DeviceMemoryOpaqueCaptureAddressInfo) == sizeof(VkDeviceMemoryOpaqueCaptureAddressInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<DeviceMemoryOpaqueCaptureAddressInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(DeviceMemoryOpaqueCaptureAddressInfoKHR) == sizeof(VkDeviceMemoryOpaqueCaptureAddressInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<DeviceMemoryOpaqueCaptureAddressInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceLineRasterizationFeaturesEXT) == sizeof(VkPhysicalDeviceLineRasterizationFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceLineRasterizationFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceLineRasterizationPropertiesEXT) == sizeof(VkPhysicalDeviceLineRasterizationPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceLineRasterizationPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineRasterizationLineStateCreateInfoEXT) == sizeof(VkPipelineRasterizationLineStateCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineRasterizationLineStateCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDevicePipelineCreationCacheControlFeaturesEXT) == sizeof(VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDevicePipelineCreationCacheControlFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceVulkan11Features) == sizeof(VkPhysicalDeviceVulkan11Features), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceVulkan11Features>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceVulkan11Properties) == sizeof(VkPhysicalDeviceVulkan11Properties), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceVulkan11Properties>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceVulkan12Features) == sizeof(VkPhysicalDeviceVulkan12Features), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceVulkan12Features>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceVulkan12Properties) == sizeof(VkPhysicalDeviceVulkan12Properties), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceVulkan12Properties>::value, "Must be a standard layout type" );
static_assert( sizeof(PipelineCompilerControlCreateInfoAMD) == sizeof(VkPipelineCompilerControlCreateInfoAMD), "Must maintain size between types" );
static_assert( std::is_standard_layout<PipelineCompilerControlCreateInfoAMD>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceCoherentMemoryFeaturesAMD) == sizeof(VkPhysicalDeviceCoherentMemoryFeaturesAMD), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceCoherentMemoryFeaturesAMD>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceToolPropertiesEXT) == sizeof(VkPhysicalDeviceToolPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceToolPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(SamplerCustomBorderColorCreateInfoEXT) == sizeof(VkSamplerCustomBorderColorCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<SamplerCustomBorderColorCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceCustomBorderColorPropertiesEXT) == sizeof(VkPhysicalDeviceCustomBorderColorPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceCustomBorderColorPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceCustomBorderColorFeaturesEXT) == sizeof(VkPhysicalDeviceCustomBorderColorFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceCustomBorderColorFeaturesEXT>::value, "Must be a standard layout type" );
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(AccelerationStructureGeometryTrianglesDataKHR) == sizeof(VkAccelerationStructureGeometryTrianglesDataKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<AccelerationStructureGeometryTrianglesDataKHR>::value, "Must be a standard layout type" );
#endif // VK_ENABLE_BETA_EXTENSIONS
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(AccelerationStructureGeometryAabbsDataKHR) == sizeof(VkAccelerationStructureGeometryAabbsDataKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<AccelerationStructureGeometryAabbsDataKHR>::value, "Must be a standard layout type" );
#endif // VK_ENABLE_BETA_EXTENSIONS
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(AccelerationStructureGeometryInstancesDataKHR) == sizeof(VkAccelerationStructureGeometryInstancesDataKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<AccelerationStructureGeometryInstancesDataKHR>::value, "Must be a standard layout type" );
#endif // VK_ENABLE_BETA_EXTENSIONS
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(AccelerationStructureGeometryKHR) == sizeof(VkAccelerationStructureGeometryKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<AccelerationStructureGeometryKHR>::value, "Must be a standard layout type" );
#endif // VK_ENABLE_BETA_EXTENSIONS
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(AccelerationStructureBuildGeometryInfoKHR) == sizeof(VkAccelerationStructureBuildGeometryInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<AccelerationStructureBuildGeometryInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_ENABLE_BETA_EXTENSIONS
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(AccelerationStructureBuildOffsetInfoKHR) == sizeof(VkAccelerationStructureBuildOffsetInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<AccelerationStructureBuildOffsetInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_ENABLE_BETA_EXTENSIONS
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(AccelerationStructureCreateGeometryTypeInfoKHR) == sizeof(VkAccelerationStructureCreateGeometryTypeInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<AccelerationStructureCreateGeometryTypeInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_ENABLE_BETA_EXTENSIONS
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(AccelerationStructureCreateInfoKHR) == sizeof(VkAccelerationStructureCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<AccelerationStructureCreateInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_ENABLE_BETA_EXTENSIONS
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(AabbPositionsKHR) == sizeof(VkAabbPositionsKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<AabbPositionsKHR>::value, "Must be a standard layout type" );
#endif // VK_ENABLE_BETA_EXTENSIONS
static_assert( sizeof(AabbPositionsNV) == sizeof(VkAabbPositionsNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<AabbPositionsNV>::value, "Must be a standard layout type" );
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(TransformMatrixKHR) == sizeof(VkTransformMatrixKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<TransformMatrixKHR>::value, "Must be a standard layout type" );
#endif // VK_ENABLE_BETA_EXTENSIONS
static_assert( sizeof(TransformMatrixNV) == sizeof(VkTransformMatrixNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<TransformMatrixNV>::value, "Must be a standard layout type" );
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(AccelerationStructureInstanceKHR) == sizeof(VkAccelerationStructureInstanceKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<AccelerationStructureInstanceKHR>::value, "Must be a standard layout type" );
#endif // VK_ENABLE_BETA_EXTENSIONS
static_assert( sizeof(AccelerationStructureInstanceNV) == sizeof(VkAccelerationStructureInstanceNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<AccelerationStructureInstanceNV>::value, "Must be a standard layout type" );
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(AccelerationStructureDeviceAddressInfoKHR) == sizeof(VkAccelerationStructureDeviceAddressInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<AccelerationStructureDeviceAddressInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_ENABLE_BETA_EXTENSIONS
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(AccelerationStructureVersionKHR) == sizeof(VkAccelerationStructureVersionKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<AccelerationStructureVersionKHR>::value, "Must be a standard layout type" );
#endif // VK_ENABLE_BETA_EXTENSIONS
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(CopyAccelerationStructureInfoKHR) == sizeof(VkCopyAccelerationStructureInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<CopyAccelerationStructureInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_ENABLE_BETA_EXTENSIONS
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(CopyAccelerationStructureToMemoryInfoKHR) == sizeof(VkCopyAccelerationStructureToMemoryInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<CopyAccelerationStructureToMemoryInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_ENABLE_BETA_EXTENSIONS
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(CopyMemoryToAccelerationStructureInfoKHR) == sizeof(VkCopyMemoryToAccelerationStructureInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<CopyMemoryToAccelerationStructureInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_ENABLE_BETA_EXTENSIONS
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(DeferredOperationInfoKHR) == sizeof(VkDeferredOperationInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<DeferredOperationInfoKHR>::value, "Must be a standard layout type" );
#endif // VK_ENABLE_BETA_EXTENSIONS
static_assert( sizeof(PhysicalDeviceExtendedDynamicStateFeaturesEXT) == sizeof(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceExtendedDynamicStateFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(RenderPassTransformBeginInfoQCOM) == sizeof(VkRenderPassTransformBeginInfoQCOM), "Must maintain size between types" );
static_assert( std::is_standard_layout<RenderPassTransformBeginInfoQCOM>::value, "Must be a standard layout type" );
static_assert( sizeof(CommandBufferInheritanceRenderPassTransformInfoQCOM) == sizeof(VkCommandBufferInheritanceRenderPassTransformInfoQCOM), "Must maintain size between types" );
static_assert( std::is_standard_layout<CommandBufferInheritanceRenderPassTransformInfoQCOM>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceDiagnosticsConfigFeaturesNV) == sizeof(VkPhysicalDeviceDiagnosticsConfigFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceDiagnosticsConfigFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(DeviceDiagnosticsConfigCreateInfoNV) == sizeof(VkDeviceDiagnosticsConfigCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<DeviceDiagnosticsConfigCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceRobustness2FeaturesEXT) == sizeof(VkPhysicalDeviceRobustness2FeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceRobustness2FeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceRobustness2PropertiesEXT) == sizeof(VkPhysicalDeviceRobustness2PropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceRobustness2PropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDeviceImageRobustnessFeaturesEXT) == sizeof(VkPhysicalDeviceImageRobustnessFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDeviceImageRobustnessFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(PhysicalDevice4444FormatsFeaturesEXT) == sizeof(VkPhysicalDevice4444FormatsFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<PhysicalDevice4444FormatsFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(Instance) == sizeof(VkInstance),"Must maintain size between handles");
static_assert( sizeof(PhysicalDevice) == sizeof(VkPhysicalDevice),"Must maintain size between handles");
static_assert( sizeof(Device) == sizeof(VkDevice),"Must maintain size between handles");
static_assert( sizeof(Queue) == sizeof(VkQueue),"Must maintain size between handles");
static_assert( sizeof(CommandBuffer) == sizeof(VkCommandBuffer),"Must maintain size between handles");
static_assert( sizeof(DeviceMemory) == sizeof(VkDeviceMemory),"Must maintain size between handles");
static_assert( sizeof(CommandPool) == sizeof(VkCommandPool),"Must maintain size between handles");
static_assert( sizeof(Buffer) == sizeof(VkBuffer),"Must maintain size between handles");
static_assert( sizeof(BufferView) == sizeof(VkBufferView),"Must maintain size between handles");
static_assert( sizeof(Image) == sizeof(VkImage),"Must maintain size between handles");
static_assert( sizeof(ImageView) == sizeof(VkImageView),"Must maintain size between handles");
static_assert( sizeof(ShaderModule) == sizeof(VkShaderModule),"Must maintain size between handles");
static_assert( sizeof(Pipeline) == sizeof(VkPipeline),"Must maintain size between handles");
static_assert( sizeof(PipelineLayout) == sizeof(VkPipelineLayout),"Must maintain size between handles");
static_assert( sizeof(Sampler) == sizeof(VkSampler),"Must maintain size between handles");
static_assert( sizeof(DescriptorSet) == sizeof(VkDescriptorSet),"Must maintain size between handles");
static_assert( sizeof(DescriptorSetLayout) == sizeof(VkDescriptorSetLayout),"Must maintain size between handles");
static_assert( sizeof(DescriptorPool) == sizeof(VkDescriptorPool),"Must maintain size between handles");
static_assert( sizeof(Fence) == sizeof(VkFence),"Must maintain size between handles");
static_assert( sizeof(Semaphore) == sizeof(VkSemaphore),"Must maintain size between handles");
static_assert( sizeof(Event) == sizeof(VkEvent),"Must maintain size between handles");
static_assert( sizeof(QueryPool) == sizeof(VkQueryPool),"Must maintain size between handles");
static_assert( sizeof(Framebuffer) == sizeof(VkFramebuffer),"Must maintain size between handles");
static_assert( sizeof(RenderPass) == sizeof(VkRenderPass),"Must maintain size between handles");
static_assert( sizeof(PipelineCache) == sizeof(VkPipelineCache),"Must maintain size between handles");
static_assert( sizeof(IndirectCommandsLayoutNV) == sizeof(VkIndirectCommandsLayoutNV),"Must maintain size between handles");
static_assert( sizeof(DescriptorUpdateTemplate) == sizeof(VkDescriptorUpdateTemplate),"Must maintain size between handles");
static_assert( sizeof(SamplerYcbcrConversion) == sizeof(VkSamplerYcbcrConversion),"Must maintain size between handles");
static_assert( sizeof(ValidationCacheEXT) == sizeof(VkValidationCacheEXT),"Must maintain size between handles");
static_assert( sizeof(AccelerationStructureKHR) == sizeof(VkAccelerationStructureKHR),"Must maintain size between handles");
static_assert( sizeof(PerformanceConfigurationINTEL) == sizeof(VkPerformanceConfigurationINTEL),"Must maintain size between handles");
static_assert( sizeof(DeferredOperationKHR) == sizeof(VkDeferredOperationKHR),"Must maintain size between handles");
static_assert( sizeof(PrivateDataSlotEXT) == sizeof(VkPrivateDataSlotEXT),"Must maintain size between handles");
static_assert( sizeof(DisplayKHR) == sizeof(VkDisplayKHR),"Must maintain size between handles");
static_assert( sizeof(DisplayModeKHR) == sizeof(VkDisplayModeKHR),"Must maintain size between handles");
static_assert( sizeof(SurfaceKHR) == sizeof(VkSurfaceKHR),"Must maintain size between handles");
static_assert( sizeof(SwapchainKHR) == sizeof(VkSwapchainKHR),"Must maintain size between handles");
static_assert( sizeof(DebugReportCallbackEXT) == sizeof(VkDebugReportCallbackEXT),"Must maintain size between handles");
static_assert( sizeof(DebugUtilsMessengerEXT) == sizeof(VkDebugUtilsMessengerEXT),"Must maintain size between handles");
} // namespace vk
// clang-format on
