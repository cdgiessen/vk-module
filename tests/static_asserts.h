/*
 * Copyright 2021 Charles Giessen (cdgiessen@gmail.com)
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files
 * (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
#pragma once
// clang-format off
#include "vk_module.h"
#include <type_traits>
#include "vulkan/vulkan.h"
static_assert( sizeof(vk::BaseOutStructure) == sizeof(VkBaseOutStructure), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BaseOutStructure>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BaseInStructure) == sizeof(VkBaseInStructure), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BaseInStructure>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::Offset2D) == sizeof(VkOffset2D), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::Offset2D>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::Offset3D) == sizeof(VkOffset3D), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::Offset3D>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::Extent2D) == sizeof(VkExtent2D), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::Extent2D>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::Extent3D) == sizeof(VkExtent3D), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::Extent3D>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::Viewport) == sizeof(VkViewport), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::Viewport>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::Rect2D) == sizeof(VkRect2D), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::Rect2D>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ClearRect) == sizeof(VkClearRect), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ClearRect>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ComponentMapping) == sizeof(VkComponentMapping), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ComponentMapping>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceSparseProperties) == sizeof(VkPhysicalDeviceSparseProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceSparseProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceLimits) == sizeof(VkPhysicalDeviceLimits), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceLimits>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceProperties) == sizeof(VkPhysicalDeviceProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ExtensionProperties) == sizeof(VkExtensionProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExtensionProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::LayerProperties) == sizeof(VkLayerProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::LayerProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ApplicationInfo) == sizeof(VkApplicationInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ApplicationInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AllocationCallbacks) == sizeof(VkAllocationCallbacks), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AllocationCallbacks>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DeviceQueueCreateInfo) == sizeof(VkDeviceQueueCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DeviceQueueCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceFeatures) == sizeof(VkPhysicalDeviceFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DeviceCreateInfo) == sizeof(VkDeviceCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DeviceCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::InstanceCreateInfo) == sizeof(VkInstanceCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::InstanceCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::QueueFamilyProperties) == sizeof(VkQueueFamilyProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::QueueFamilyProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::MemoryHeap) == sizeof(VkMemoryHeap), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::MemoryHeap>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::MemoryType) == sizeof(VkMemoryType), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::MemoryType>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceMemoryProperties) == sizeof(VkPhysicalDeviceMemoryProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceMemoryProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::MemoryAllocateInfo) == sizeof(VkMemoryAllocateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::MemoryAllocateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::MemoryRequirements) == sizeof(VkMemoryRequirements), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::MemoryRequirements>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SparseImageFormatProperties) == sizeof(VkSparseImageFormatProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SparseImageFormatProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SparseImageMemoryRequirements) == sizeof(VkSparseImageMemoryRequirements), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SparseImageMemoryRequirements>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::MappedMemoryRange) == sizeof(VkMappedMemoryRange), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::MappedMemoryRange>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::FormatProperties) == sizeof(VkFormatProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::FormatProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageFormatProperties) == sizeof(VkImageFormatProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageFormatProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DescriptorBufferInfo) == sizeof(VkDescriptorBufferInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DescriptorBufferInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DescriptorImageInfo) == sizeof(VkDescriptorImageInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DescriptorImageInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::WriteDescriptorSet) == sizeof(VkWriteDescriptorSet), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::WriteDescriptorSet>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::CopyDescriptorSet) == sizeof(VkCopyDescriptorSet), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::CopyDescriptorSet>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BufferCreateInfo) == sizeof(VkBufferCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BufferCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BufferViewCreateInfo) == sizeof(VkBufferViewCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BufferViewCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageSubresource) == sizeof(VkImageSubresource), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageSubresource>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageSubresourceLayers) == sizeof(VkImageSubresourceLayers), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageSubresourceLayers>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageSubresourceRange) == sizeof(VkImageSubresourceRange), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageSubresourceRange>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::MemoryBarrier) == sizeof(VkMemoryBarrier), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::MemoryBarrier>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BufferMemoryBarrier) == sizeof(VkBufferMemoryBarrier), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BufferMemoryBarrier>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageMemoryBarrier) == sizeof(VkImageMemoryBarrier), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageMemoryBarrier>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageCreateInfo) == sizeof(VkImageCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SubresourceLayout) == sizeof(VkSubresourceLayout), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SubresourceLayout>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageViewCreateInfo) == sizeof(VkImageViewCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageViewCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BufferCopy) == sizeof(VkBufferCopy), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BufferCopy>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SparseMemoryBind) == sizeof(VkSparseMemoryBind), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SparseMemoryBind>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SparseImageMemoryBind) == sizeof(VkSparseImageMemoryBind), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SparseImageMemoryBind>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SparseBufferMemoryBindInfo) == sizeof(VkSparseBufferMemoryBindInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SparseBufferMemoryBindInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SparseImageOpaqueMemoryBindInfo) == sizeof(VkSparseImageOpaqueMemoryBindInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SparseImageOpaqueMemoryBindInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SparseImageMemoryBindInfo) == sizeof(VkSparseImageMemoryBindInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SparseImageMemoryBindInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BindSparseInfo) == sizeof(VkBindSparseInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BindSparseInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageCopy) == sizeof(VkImageCopy), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageCopy>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageBlit) == sizeof(VkImageBlit), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageBlit>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BufferImageCopy) == sizeof(VkBufferImageCopy), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BufferImageCopy>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageResolve) == sizeof(VkImageResolve), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageResolve>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ShaderModuleCreateInfo) == sizeof(VkShaderModuleCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ShaderModuleCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DescriptorSetLayoutBinding) == sizeof(VkDescriptorSetLayoutBinding), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DescriptorSetLayoutBinding>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DescriptorSetLayoutCreateInfo) == sizeof(VkDescriptorSetLayoutCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DescriptorSetLayoutCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DescriptorPoolSize) == sizeof(VkDescriptorPoolSize), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DescriptorPoolSize>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DescriptorPoolCreateInfo) == sizeof(VkDescriptorPoolCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DescriptorPoolCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DescriptorSetAllocateInfo) == sizeof(VkDescriptorSetAllocateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DescriptorSetAllocateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SpecializationMapEntry) == sizeof(VkSpecializationMapEntry), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SpecializationMapEntry>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SpecializationInfo) == sizeof(VkSpecializationInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SpecializationInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineShaderStageCreateInfo) == sizeof(VkPipelineShaderStageCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineShaderStageCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ComputePipelineCreateInfo) == sizeof(VkComputePipelineCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ComputePipelineCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::VertexInputBindingDescription) == sizeof(VkVertexInputBindingDescription), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::VertexInputBindingDescription>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::VertexInputAttributeDescription) == sizeof(VkVertexInputAttributeDescription), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::VertexInputAttributeDescription>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineVertexInputStateCreateInfo) == sizeof(VkPipelineVertexInputStateCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineVertexInputStateCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineInputAssemblyStateCreateInfo) == sizeof(VkPipelineInputAssemblyStateCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineInputAssemblyStateCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineTessellationStateCreateInfo) == sizeof(VkPipelineTessellationStateCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineTessellationStateCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineViewportStateCreateInfo) == sizeof(VkPipelineViewportStateCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineViewportStateCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineRasterizationStateCreateInfo) == sizeof(VkPipelineRasterizationStateCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineRasterizationStateCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineMultisampleStateCreateInfo) == sizeof(VkPipelineMultisampleStateCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineMultisampleStateCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineColorBlendAttachmentState) == sizeof(VkPipelineColorBlendAttachmentState), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineColorBlendAttachmentState>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineColorBlendStateCreateInfo) == sizeof(VkPipelineColorBlendStateCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineColorBlendStateCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineDynamicStateCreateInfo) == sizeof(VkPipelineDynamicStateCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineDynamicStateCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::StencilOpState) == sizeof(VkStencilOpState), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::StencilOpState>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineDepthStencilStateCreateInfo) == sizeof(VkPipelineDepthStencilStateCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineDepthStencilStateCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::GraphicsPipelineCreateInfo) == sizeof(VkGraphicsPipelineCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::GraphicsPipelineCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineCacheCreateInfo) == sizeof(VkPipelineCacheCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineCacheCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PushConstantRange) == sizeof(VkPushConstantRange), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PushConstantRange>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineLayoutCreateInfo) == sizeof(VkPipelineLayoutCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineLayoutCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SamplerCreateInfo) == sizeof(VkSamplerCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SamplerCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::CommandPoolCreateInfo) == sizeof(VkCommandPoolCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::CommandPoolCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::CommandBufferAllocateInfo) == sizeof(VkCommandBufferAllocateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::CommandBufferAllocateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::CommandBufferInheritanceInfo) == sizeof(VkCommandBufferInheritanceInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::CommandBufferInheritanceInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::CommandBufferBeginInfo) == sizeof(VkCommandBufferBeginInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::CommandBufferBeginInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ClearDepthStencilValue) == sizeof(VkClearDepthStencilValue), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ClearDepthStencilValue>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::RenderPassBeginInfo) == sizeof(VkRenderPassBeginInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::RenderPassBeginInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ClearAttachment) == sizeof(VkClearAttachment), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ClearAttachment>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AttachmentDescription) == sizeof(VkAttachmentDescription), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AttachmentDescription>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AttachmentReference) == sizeof(VkAttachmentReference), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AttachmentReference>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SubpassDescription) == sizeof(VkSubpassDescription), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SubpassDescription>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SubpassDependency) == sizeof(VkSubpassDependency), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SubpassDependency>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::RenderPassCreateInfo) == sizeof(VkRenderPassCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::RenderPassCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::EventCreateInfo) == sizeof(VkEventCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::EventCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::FenceCreateInfo) == sizeof(VkFenceCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::FenceCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SemaphoreCreateInfo) == sizeof(VkSemaphoreCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SemaphoreCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::QueryPoolCreateInfo) == sizeof(VkQueryPoolCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::QueryPoolCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::FramebufferCreateInfo) == sizeof(VkFramebufferCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::FramebufferCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DrawIndirectCommand) == sizeof(VkDrawIndirectCommand), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DrawIndirectCommand>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DrawIndexedIndirectCommand) == sizeof(VkDrawIndexedIndirectCommand), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DrawIndexedIndirectCommand>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DispatchIndirectCommand) == sizeof(VkDispatchIndirectCommand), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DispatchIndirectCommand>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SubmitInfo) == sizeof(VkSubmitInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SubmitInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DisplayPropertiesKHR) == sizeof(VkDisplayPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DisplayPropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DisplayPlanePropertiesKHR) == sizeof(VkDisplayPlanePropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DisplayPlanePropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DisplayModeParametersKHR) == sizeof(VkDisplayModeParametersKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DisplayModeParametersKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DisplayModePropertiesKHR) == sizeof(VkDisplayModePropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DisplayModePropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DisplayModeCreateInfoKHR) == sizeof(VkDisplayModeCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DisplayModeCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DisplayPlaneCapabilitiesKHR) == sizeof(VkDisplayPlaneCapabilitiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DisplayPlaneCapabilitiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DisplaySurfaceCreateInfoKHR) == sizeof(VkDisplaySurfaceCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DisplaySurfaceCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DisplayPresentInfoKHR) == sizeof(VkDisplayPresentInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DisplayPresentInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SurfaceCapabilitiesKHR) == sizeof(VkSurfaceCapabilitiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SurfaceCapabilitiesKHR>::value, "Must be a standard layout type" );
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
static_assert( sizeof(vk::AndroidSurfaceCreateInfoKHR) == sizeof(VkAndroidSurfaceCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AndroidSurfaceCreateInfoKHR>::value, "Must be a standard layout type" );
#endif // defined(VK_USE_PLATFORM_ANDROID_KHR)
#if defined(VK_USE_PLATFORM_VI_NN)
static_assert( sizeof(vk::ViSurfaceCreateInfoNN) == sizeof(VkViSurfaceCreateInfoNN), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ViSurfaceCreateInfoNN>::value, "Must be a standard layout type" );
#endif // defined(VK_USE_PLATFORM_VI_NN)
#if defined(VK_USE_PLATFORM_WAYLAND_KHR)
static_assert( sizeof(vk::WaylandSurfaceCreateInfoKHR) == sizeof(VkWaylandSurfaceCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::WaylandSurfaceCreateInfoKHR>::value, "Must be a standard layout type" );
#endif // defined(VK_USE_PLATFORM_WAYLAND_KHR)
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(vk::Win32SurfaceCreateInfoKHR) == sizeof(VkWin32SurfaceCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::Win32SurfaceCreateInfoKHR>::value, "Must be a standard layout type" );
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
#if defined(VK_USE_PLATFORM_XLIB_KHR)
static_assert( sizeof(vk::XlibSurfaceCreateInfoKHR) == sizeof(VkXlibSurfaceCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::XlibSurfaceCreateInfoKHR>::value, "Must be a standard layout type" );
#endif // defined(VK_USE_PLATFORM_XLIB_KHR)
#if defined(VK_USE_PLATFORM_XCB_KHR)
static_assert( sizeof(vk::XcbSurfaceCreateInfoKHR) == sizeof(VkXcbSurfaceCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::XcbSurfaceCreateInfoKHR>::value, "Must be a standard layout type" );
#endif // defined(VK_USE_PLATFORM_XCB_KHR)
#if defined(VK_USE_PLATFORM_DIRECTFB_EXT)
static_assert( sizeof(vk::DirectFBSurfaceCreateInfoEXT) == sizeof(VkDirectFBSurfaceCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DirectFBSurfaceCreateInfoEXT>::value, "Must be a standard layout type" );
#endif // defined(VK_USE_PLATFORM_DIRECTFB_EXT)
#if defined(VK_USE_PLATFORM_FUCHSIA)
static_assert( sizeof(vk::ImagePipeSurfaceCreateInfoFUCHSIA) == sizeof(VkImagePipeSurfaceCreateInfoFUCHSIA), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImagePipeSurfaceCreateInfoFUCHSIA>::value, "Must be a standard layout type" );
#endif // defined(VK_USE_PLATFORM_FUCHSIA)
#if defined(VK_USE_PLATFORM_GGP)
static_assert( sizeof(vk::StreamDescriptorSurfaceCreateInfoGGP) == sizeof(VkStreamDescriptorSurfaceCreateInfoGGP), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::StreamDescriptorSurfaceCreateInfoGGP>::value, "Must be a standard layout type" );
#endif // defined(VK_USE_PLATFORM_GGP)
static_assert( sizeof(vk::SurfaceFormatKHR) == sizeof(VkSurfaceFormatKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SurfaceFormatKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SwapchainCreateInfoKHR) == sizeof(VkSwapchainCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SwapchainCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PresentInfoKHR) == sizeof(VkPresentInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PresentInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DebugReportCallbackCreateInfoEXT) == sizeof(VkDebugReportCallbackCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DebugReportCallbackCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ValidationFlagsEXT) == sizeof(VkValidationFlagsEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ValidationFlagsEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ValidationFeaturesEXT) == sizeof(VkValidationFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ValidationFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineRasterizationStateRasterizationOrderAMD) == sizeof(VkPipelineRasterizationStateRasterizationOrderAMD), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineRasterizationStateRasterizationOrderAMD>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DebugMarkerObjectNameInfoEXT) == sizeof(VkDebugMarkerObjectNameInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DebugMarkerObjectNameInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DebugMarkerObjectTagInfoEXT) == sizeof(VkDebugMarkerObjectTagInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DebugMarkerObjectTagInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DebugMarkerMarkerInfoEXT) == sizeof(VkDebugMarkerMarkerInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DebugMarkerMarkerInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DedicatedAllocationImageCreateInfoNV) == sizeof(VkDedicatedAllocationImageCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DedicatedAllocationImageCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DedicatedAllocationBufferCreateInfoNV) == sizeof(VkDedicatedAllocationBufferCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DedicatedAllocationBufferCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DedicatedAllocationMemoryAllocateInfoNV) == sizeof(VkDedicatedAllocationMemoryAllocateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DedicatedAllocationMemoryAllocateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ExternalImageFormatPropertiesNV) == sizeof(VkExternalImageFormatPropertiesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExternalImageFormatPropertiesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ExternalMemoryImageCreateInfoNV) == sizeof(VkExternalMemoryImageCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExternalMemoryImageCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ExportMemoryAllocateInfoNV) == sizeof(VkExportMemoryAllocateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExportMemoryAllocateInfoNV>::value, "Must be a standard layout type" );
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(vk::ImportMemoryWin32HandleInfoNV) == sizeof(VkImportMemoryWin32HandleInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImportMemoryWin32HandleInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ExportMemoryWin32HandleInfoNV) == sizeof(VkExportMemoryWin32HandleInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExportMemoryWin32HandleInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::Win32KeyedMutexAcquireReleaseInfoNV) == sizeof(VkWin32KeyedMutexAcquireReleaseInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::Win32KeyedMutexAcquireReleaseInfoNV>::value, "Must be a standard layout type" );
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(vk::PhysicalDeviceDeviceGeneratedCommandsFeaturesNV) == sizeof(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceDeviceGeneratedCommandsFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DevicePrivateDataCreateInfoEXT) == sizeof(VkDevicePrivateDataCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DevicePrivateDataCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PrivateDataSlotCreateInfoEXT) == sizeof(VkPrivateDataSlotCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PrivateDataSlotCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDevicePrivateDataFeaturesEXT) == sizeof(VkPhysicalDevicePrivateDataFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDevicePrivateDataFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceDeviceGeneratedCommandsPropertiesNV) == sizeof(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceDeviceGeneratedCommandsPropertiesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::GraphicsShaderGroupCreateInfoNV) == sizeof(VkGraphicsShaderGroupCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::GraphicsShaderGroupCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::GraphicsPipelineShaderGroupsCreateInfoNV) == sizeof(VkGraphicsPipelineShaderGroupsCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::GraphicsPipelineShaderGroupsCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BindShaderGroupIndirectCommandNV) == sizeof(VkBindShaderGroupIndirectCommandNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BindShaderGroupIndirectCommandNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BindIndexBufferIndirectCommandNV) == sizeof(VkBindIndexBufferIndirectCommandNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BindIndexBufferIndirectCommandNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BindVertexBufferIndirectCommandNV) == sizeof(VkBindVertexBufferIndirectCommandNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BindVertexBufferIndirectCommandNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SetStateFlagsIndirectCommandNV) == sizeof(VkSetStateFlagsIndirectCommandNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SetStateFlagsIndirectCommandNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::IndirectCommandsStreamNV) == sizeof(VkIndirectCommandsStreamNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::IndirectCommandsStreamNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::IndirectCommandsLayoutTokenNV) == sizeof(VkIndirectCommandsLayoutTokenNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::IndirectCommandsLayoutTokenNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::IndirectCommandsLayoutCreateInfoNV) == sizeof(VkIndirectCommandsLayoutCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::IndirectCommandsLayoutCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::GeneratedCommandsInfoNV) == sizeof(VkGeneratedCommandsInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::GeneratedCommandsInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::GeneratedCommandsMemoryRequirementsInfoNV) == sizeof(VkGeneratedCommandsMemoryRequirementsInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::GeneratedCommandsMemoryRequirementsInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceFeatures2) == sizeof(VkPhysicalDeviceFeatures2), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceFeatures2>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceFeatures2KHR) == sizeof(VkPhysicalDeviceFeatures2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceFeatures2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceProperties2) == sizeof(VkPhysicalDeviceProperties2), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceProperties2>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceProperties2KHR) == sizeof(VkPhysicalDeviceProperties2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceProperties2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::FormatProperties2) == sizeof(VkFormatProperties2), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::FormatProperties2>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::FormatProperties2KHR) == sizeof(VkFormatProperties2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::FormatProperties2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageFormatProperties2) == sizeof(VkImageFormatProperties2), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageFormatProperties2>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageFormatProperties2KHR) == sizeof(VkImageFormatProperties2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageFormatProperties2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceImageFormatInfo2) == sizeof(VkPhysicalDeviceImageFormatInfo2), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceImageFormatInfo2>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceImageFormatInfo2KHR) == sizeof(VkPhysicalDeviceImageFormatInfo2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceImageFormatInfo2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::QueueFamilyProperties2) == sizeof(VkQueueFamilyProperties2), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::QueueFamilyProperties2>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::QueueFamilyProperties2KHR) == sizeof(VkQueueFamilyProperties2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::QueueFamilyProperties2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceMemoryProperties2) == sizeof(VkPhysicalDeviceMemoryProperties2), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceMemoryProperties2>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceMemoryProperties2KHR) == sizeof(VkPhysicalDeviceMemoryProperties2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceMemoryProperties2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SparseImageFormatProperties2) == sizeof(VkSparseImageFormatProperties2), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SparseImageFormatProperties2>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SparseImageFormatProperties2KHR) == sizeof(VkSparseImageFormatProperties2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SparseImageFormatProperties2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceSparseImageFormatInfo2) == sizeof(VkPhysicalDeviceSparseImageFormatInfo2), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceSparseImageFormatInfo2>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceSparseImageFormatInfo2KHR) == sizeof(VkPhysicalDeviceSparseImageFormatInfo2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceSparseImageFormatInfo2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDevicePushDescriptorPropertiesKHR) == sizeof(VkPhysicalDevicePushDescriptorPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDevicePushDescriptorPropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ConformanceVersion) == sizeof(VkConformanceVersion), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ConformanceVersion>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ConformanceVersionKHR) == sizeof(VkConformanceVersionKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ConformanceVersionKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceDriverProperties) == sizeof(VkPhysicalDeviceDriverProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceDriverProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceDriverPropertiesKHR) == sizeof(VkPhysicalDeviceDriverPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceDriverPropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::RectLayerKHR) == sizeof(VkRectLayerKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::RectLayerKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PresentRegionKHR) == sizeof(VkPresentRegionKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PresentRegionKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PresentRegionsKHR) == sizeof(VkPresentRegionsKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PresentRegionsKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceVariablePointersFeatures) == sizeof(VkPhysicalDeviceVariablePointersFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceVariablePointersFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceVariablePointersFeaturesKHR) == sizeof(VkPhysicalDeviceVariablePointersFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceVariablePointersFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceVariablePointerFeaturesKHR) == sizeof(VkPhysicalDeviceVariablePointerFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceVariablePointerFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceVariablePointerFeatures) == sizeof(VkPhysicalDeviceVariablePointerFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceVariablePointerFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ExternalMemoryProperties) == sizeof(VkExternalMemoryProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExternalMemoryProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ExternalMemoryPropertiesKHR) == sizeof(VkExternalMemoryPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExternalMemoryPropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceExternalImageFormatInfo) == sizeof(VkPhysicalDeviceExternalImageFormatInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceExternalImageFormatInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceExternalImageFormatInfoKHR) == sizeof(VkPhysicalDeviceExternalImageFormatInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceExternalImageFormatInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ExternalImageFormatProperties) == sizeof(VkExternalImageFormatProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExternalImageFormatProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ExternalImageFormatPropertiesKHR) == sizeof(VkExternalImageFormatPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExternalImageFormatPropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceExternalBufferInfo) == sizeof(VkPhysicalDeviceExternalBufferInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceExternalBufferInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceExternalBufferInfoKHR) == sizeof(VkPhysicalDeviceExternalBufferInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceExternalBufferInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ExternalBufferProperties) == sizeof(VkExternalBufferProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExternalBufferProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ExternalBufferPropertiesKHR) == sizeof(VkExternalBufferPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExternalBufferPropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceIDProperties) == sizeof(VkPhysicalDeviceIDProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceIDProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceIDPropertiesKHR) == sizeof(VkPhysicalDeviceIDPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceIDPropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ExternalMemoryImageCreateInfo) == sizeof(VkExternalMemoryImageCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExternalMemoryImageCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ExternalMemoryImageCreateInfoKHR) == sizeof(VkExternalMemoryImageCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExternalMemoryImageCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ExternalMemoryBufferCreateInfo) == sizeof(VkExternalMemoryBufferCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExternalMemoryBufferCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ExternalMemoryBufferCreateInfoKHR) == sizeof(VkExternalMemoryBufferCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExternalMemoryBufferCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ExportMemoryAllocateInfo) == sizeof(VkExportMemoryAllocateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExportMemoryAllocateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ExportMemoryAllocateInfoKHR) == sizeof(VkExportMemoryAllocateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExportMemoryAllocateInfoKHR>::value, "Must be a standard layout type" );
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(vk::ImportMemoryWin32HandleInfoKHR) == sizeof(VkImportMemoryWin32HandleInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImportMemoryWin32HandleInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ExportMemoryWin32HandleInfoKHR) == sizeof(VkExportMemoryWin32HandleInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExportMemoryWin32HandleInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::MemoryWin32HandlePropertiesKHR) == sizeof(VkMemoryWin32HandlePropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::MemoryWin32HandlePropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::MemoryGetWin32HandleInfoKHR) == sizeof(VkMemoryGetWin32HandleInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::MemoryGetWin32HandleInfoKHR>::value, "Must be a standard layout type" );
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(vk::ImportMemoryFdInfoKHR) == sizeof(VkImportMemoryFdInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImportMemoryFdInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::MemoryFdPropertiesKHR) == sizeof(VkMemoryFdPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::MemoryFdPropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::MemoryGetFdInfoKHR) == sizeof(VkMemoryGetFdInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::MemoryGetFdInfoKHR>::value, "Must be a standard layout type" );
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(vk::Win32KeyedMutexAcquireReleaseInfoKHR) == sizeof(VkWin32KeyedMutexAcquireReleaseInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::Win32KeyedMutexAcquireReleaseInfoKHR>::value, "Must be a standard layout type" );
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(vk::PhysicalDeviceExternalSemaphoreInfo) == sizeof(VkPhysicalDeviceExternalSemaphoreInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceExternalSemaphoreInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceExternalSemaphoreInfoKHR) == sizeof(VkPhysicalDeviceExternalSemaphoreInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceExternalSemaphoreInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ExternalSemaphoreProperties) == sizeof(VkExternalSemaphoreProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExternalSemaphoreProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ExternalSemaphorePropertiesKHR) == sizeof(VkExternalSemaphorePropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExternalSemaphorePropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ExportSemaphoreCreateInfo) == sizeof(VkExportSemaphoreCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExportSemaphoreCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ExportSemaphoreCreateInfoKHR) == sizeof(VkExportSemaphoreCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExportSemaphoreCreateInfoKHR>::value, "Must be a standard layout type" );
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(vk::ImportSemaphoreWin32HandleInfoKHR) == sizeof(VkImportSemaphoreWin32HandleInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImportSemaphoreWin32HandleInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ExportSemaphoreWin32HandleInfoKHR) == sizeof(VkExportSemaphoreWin32HandleInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExportSemaphoreWin32HandleInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::D3D12FenceSubmitInfoKHR) == sizeof(VkD3D12FenceSubmitInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::D3D12FenceSubmitInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SemaphoreGetWin32HandleInfoKHR) == sizeof(VkSemaphoreGetWin32HandleInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SemaphoreGetWin32HandleInfoKHR>::value, "Must be a standard layout type" );
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(vk::ImportSemaphoreFdInfoKHR) == sizeof(VkImportSemaphoreFdInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImportSemaphoreFdInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SemaphoreGetFdInfoKHR) == sizeof(VkSemaphoreGetFdInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SemaphoreGetFdInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceExternalFenceInfo) == sizeof(VkPhysicalDeviceExternalFenceInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceExternalFenceInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceExternalFenceInfoKHR) == sizeof(VkPhysicalDeviceExternalFenceInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceExternalFenceInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ExternalFenceProperties) == sizeof(VkExternalFenceProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExternalFenceProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ExternalFencePropertiesKHR) == sizeof(VkExternalFencePropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExternalFencePropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ExportFenceCreateInfo) == sizeof(VkExportFenceCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExportFenceCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ExportFenceCreateInfoKHR) == sizeof(VkExportFenceCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExportFenceCreateInfoKHR>::value, "Must be a standard layout type" );
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(vk::ImportFenceWin32HandleInfoKHR) == sizeof(VkImportFenceWin32HandleInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImportFenceWin32HandleInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ExportFenceWin32HandleInfoKHR) == sizeof(VkExportFenceWin32HandleInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExportFenceWin32HandleInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::FenceGetWin32HandleInfoKHR) == sizeof(VkFenceGetWin32HandleInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::FenceGetWin32HandleInfoKHR>::value, "Must be a standard layout type" );
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(vk::ImportFenceFdInfoKHR) == sizeof(VkImportFenceFdInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImportFenceFdInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::FenceGetFdInfoKHR) == sizeof(VkFenceGetFdInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::FenceGetFdInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceMultiviewFeatures) == sizeof(VkPhysicalDeviceMultiviewFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceMultiviewFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceMultiviewFeaturesKHR) == sizeof(VkPhysicalDeviceMultiviewFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceMultiviewFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceMultiviewProperties) == sizeof(VkPhysicalDeviceMultiviewProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceMultiviewProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceMultiviewPropertiesKHR) == sizeof(VkPhysicalDeviceMultiviewPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceMultiviewPropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::RenderPassMultiviewCreateInfo) == sizeof(VkRenderPassMultiviewCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::RenderPassMultiviewCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::RenderPassMultiviewCreateInfoKHR) == sizeof(VkRenderPassMultiviewCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::RenderPassMultiviewCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SurfaceCapabilities2EXT) == sizeof(VkSurfaceCapabilities2EXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SurfaceCapabilities2EXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DisplayPowerInfoEXT) == sizeof(VkDisplayPowerInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DisplayPowerInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DeviceEventInfoEXT) == sizeof(VkDeviceEventInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DeviceEventInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DisplayEventInfoEXT) == sizeof(VkDisplayEventInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DisplayEventInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SwapchainCounterCreateInfoEXT) == sizeof(VkSwapchainCounterCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SwapchainCounterCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceGroupProperties) == sizeof(VkPhysicalDeviceGroupProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceGroupProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceGroupPropertiesKHR) == sizeof(VkPhysicalDeviceGroupPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceGroupPropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::MemoryAllocateFlagsInfo) == sizeof(VkMemoryAllocateFlagsInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::MemoryAllocateFlagsInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::MemoryAllocateFlagsInfoKHR) == sizeof(VkMemoryAllocateFlagsInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::MemoryAllocateFlagsInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BindBufferMemoryInfo) == sizeof(VkBindBufferMemoryInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BindBufferMemoryInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BindBufferMemoryInfoKHR) == sizeof(VkBindBufferMemoryInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BindBufferMemoryInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BindBufferMemoryDeviceGroupInfo) == sizeof(VkBindBufferMemoryDeviceGroupInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BindBufferMemoryDeviceGroupInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BindBufferMemoryDeviceGroupInfoKHR) == sizeof(VkBindBufferMemoryDeviceGroupInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BindBufferMemoryDeviceGroupInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BindImageMemoryInfo) == sizeof(VkBindImageMemoryInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BindImageMemoryInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BindImageMemoryInfoKHR) == sizeof(VkBindImageMemoryInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BindImageMemoryInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BindImageMemoryDeviceGroupInfo) == sizeof(VkBindImageMemoryDeviceGroupInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BindImageMemoryDeviceGroupInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BindImageMemoryDeviceGroupInfoKHR) == sizeof(VkBindImageMemoryDeviceGroupInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BindImageMemoryDeviceGroupInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DeviceGroupRenderPassBeginInfo) == sizeof(VkDeviceGroupRenderPassBeginInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DeviceGroupRenderPassBeginInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DeviceGroupRenderPassBeginInfoKHR) == sizeof(VkDeviceGroupRenderPassBeginInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DeviceGroupRenderPassBeginInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DeviceGroupCommandBufferBeginInfo) == sizeof(VkDeviceGroupCommandBufferBeginInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DeviceGroupCommandBufferBeginInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DeviceGroupCommandBufferBeginInfoKHR) == sizeof(VkDeviceGroupCommandBufferBeginInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DeviceGroupCommandBufferBeginInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DeviceGroupSubmitInfo) == sizeof(VkDeviceGroupSubmitInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DeviceGroupSubmitInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DeviceGroupSubmitInfoKHR) == sizeof(VkDeviceGroupSubmitInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DeviceGroupSubmitInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DeviceGroupBindSparseInfo) == sizeof(VkDeviceGroupBindSparseInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DeviceGroupBindSparseInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DeviceGroupBindSparseInfoKHR) == sizeof(VkDeviceGroupBindSparseInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DeviceGroupBindSparseInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DeviceGroupPresentCapabilitiesKHR) == sizeof(VkDeviceGroupPresentCapabilitiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DeviceGroupPresentCapabilitiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageSwapchainCreateInfoKHR) == sizeof(VkImageSwapchainCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageSwapchainCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BindImageMemorySwapchainInfoKHR) == sizeof(VkBindImageMemorySwapchainInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BindImageMemorySwapchainInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AcquireNextImageInfoKHR) == sizeof(VkAcquireNextImageInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AcquireNextImageInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DeviceGroupPresentInfoKHR) == sizeof(VkDeviceGroupPresentInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DeviceGroupPresentInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DeviceGroupDeviceCreateInfo) == sizeof(VkDeviceGroupDeviceCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DeviceGroupDeviceCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DeviceGroupDeviceCreateInfoKHR) == sizeof(VkDeviceGroupDeviceCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DeviceGroupDeviceCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DeviceGroupSwapchainCreateInfoKHR) == sizeof(VkDeviceGroupSwapchainCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DeviceGroupSwapchainCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DescriptorUpdateTemplateEntry) == sizeof(VkDescriptorUpdateTemplateEntry), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DescriptorUpdateTemplateEntry>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DescriptorUpdateTemplateEntryKHR) == sizeof(VkDescriptorUpdateTemplateEntryKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DescriptorUpdateTemplateEntryKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DescriptorUpdateTemplateCreateInfo) == sizeof(VkDescriptorUpdateTemplateCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DescriptorUpdateTemplateCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DescriptorUpdateTemplateCreateInfoKHR) == sizeof(VkDescriptorUpdateTemplateCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DescriptorUpdateTemplateCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::XYColorEXT) == sizeof(VkXYColorEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::XYColorEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::HdrMetadataEXT) == sizeof(VkHdrMetadataEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::HdrMetadataEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DisplayNativeHdrSurfaceCapabilitiesAMD) == sizeof(VkDisplayNativeHdrSurfaceCapabilitiesAMD), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DisplayNativeHdrSurfaceCapabilitiesAMD>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SwapchainDisplayNativeHdrCreateInfoAMD) == sizeof(VkSwapchainDisplayNativeHdrCreateInfoAMD), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SwapchainDisplayNativeHdrCreateInfoAMD>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::RefreshCycleDurationGOOGLE) == sizeof(VkRefreshCycleDurationGOOGLE), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::RefreshCycleDurationGOOGLE>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PastPresentationTimingGOOGLE) == sizeof(VkPastPresentationTimingGOOGLE), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PastPresentationTimingGOOGLE>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PresentTimeGOOGLE) == sizeof(VkPresentTimeGOOGLE), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PresentTimeGOOGLE>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PresentTimesInfoGOOGLE) == sizeof(VkPresentTimesInfoGOOGLE), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PresentTimesInfoGOOGLE>::value, "Must be a standard layout type" );
#if defined(VK_USE_PLATFORM_IOS_MVK)
static_assert( sizeof(vk::IOSSurfaceCreateInfoMVK) == sizeof(VkIOSSurfaceCreateInfoMVK), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::IOSSurfaceCreateInfoMVK>::value, "Must be a standard layout type" );
#endif // defined(VK_USE_PLATFORM_IOS_MVK)
#if defined(VK_USE_PLATFORM_MACOS_MVK)
static_assert( sizeof(vk::MacOSSurfaceCreateInfoMVK) == sizeof(VkMacOSSurfaceCreateInfoMVK), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::MacOSSurfaceCreateInfoMVK>::value, "Must be a standard layout type" );
#endif // defined(VK_USE_PLATFORM_MACOS_MVK)
#if defined(VK_USE_PLATFORM_METAL_EXT)
static_assert( sizeof(vk::MetalSurfaceCreateInfoEXT) == sizeof(VkMetalSurfaceCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::MetalSurfaceCreateInfoEXT>::value, "Must be a standard layout type" );
#endif // defined(VK_USE_PLATFORM_METAL_EXT)
static_assert( sizeof(vk::ViewportWScalingNV) == sizeof(VkViewportWScalingNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ViewportWScalingNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineViewportWScalingStateCreateInfoNV) == sizeof(VkPipelineViewportWScalingStateCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineViewportWScalingStateCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ViewportSwizzleNV) == sizeof(VkViewportSwizzleNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ViewportSwizzleNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineViewportSwizzleStateCreateInfoNV) == sizeof(VkPipelineViewportSwizzleStateCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineViewportSwizzleStateCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceDiscardRectanglePropertiesEXT) == sizeof(VkPhysicalDeviceDiscardRectanglePropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceDiscardRectanglePropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineDiscardRectangleStateCreateInfoEXT) == sizeof(VkPipelineDiscardRectangleStateCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineDiscardRectangleStateCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX) == sizeof(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::InputAttachmentAspectReference) == sizeof(VkInputAttachmentAspectReference), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::InputAttachmentAspectReference>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::InputAttachmentAspectReferenceKHR) == sizeof(VkInputAttachmentAspectReferenceKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::InputAttachmentAspectReferenceKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::RenderPassInputAttachmentAspectCreateInfo) == sizeof(VkRenderPassInputAttachmentAspectCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::RenderPassInputAttachmentAspectCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::RenderPassInputAttachmentAspectCreateInfoKHR) == sizeof(VkRenderPassInputAttachmentAspectCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::RenderPassInputAttachmentAspectCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceSurfaceInfo2KHR) == sizeof(VkPhysicalDeviceSurfaceInfo2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceSurfaceInfo2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SurfaceCapabilities2KHR) == sizeof(VkSurfaceCapabilities2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SurfaceCapabilities2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SurfaceFormat2KHR) == sizeof(VkSurfaceFormat2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SurfaceFormat2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DisplayProperties2KHR) == sizeof(VkDisplayProperties2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DisplayProperties2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DisplayPlaneProperties2KHR) == sizeof(VkDisplayPlaneProperties2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DisplayPlaneProperties2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DisplayModeProperties2KHR) == sizeof(VkDisplayModeProperties2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DisplayModeProperties2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DisplayPlaneInfo2KHR) == sizeof(VkDisplayPlaneInfo2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DisplayPlaneInfo2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DisplayPlaneCapabilities2KHR) == sizeof(VkDisplayPlaneCapabilities2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DisplayPlaneCapabilities2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SharedPresentSurfaceCapabilitiesKHR) == sizeof(VkSharedPresentSurfaceCapabilitiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SharedPresentSurfaceCapabilitiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDevice16BitStorageFeatures) == sizeof(VkPhysicalDevice16BitStorageFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDevice16BitStorageFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDevice16BitStorageFeaturesKHR) == sizeof(VkPhysicalDevice16BitStorageFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDevice16BitStorageFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceSubgroupProperties) == sizeof(VkPhysicalDeviceSubgroupProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceSubgroupProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceShaderSubgroupExtendedTypesFeatures) == sizeof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceShaderSubgroupExtendedTypesFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR) == sizeof(VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BufferMemoryRequirementsInfo2) == sizeof(VkBufferMemoryRequirementsInfo2), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BufferMemoryRequirementsInfo2>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BufferMemoryRequirementsInfo2KHR) == sizeof(VkBufferMemoryRequirementsInfo2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BufferMemoryRequirementsInfo2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageMemoryRequirementsInfo2) == sizeof(VkImageMemoryRequirementsInfo2), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageMemoryRequirementsInfo2>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageMemoryRequirementsInfo2KHR) == sizeof(VkImageMemoryRequirementsInfo2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageMemoryRequirementsInfo2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageSparseMemoryRequirementsInfo2) == sizeof(VkImageSparseMemoryRequirementsInfo2), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageSparseMemoryRequirementsInfo2>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageSparseMemoryRequirementsInfo2KHR) == sizeof(VkImageSparseMemoryRequirementsInfo2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageSparseMemoryRequirementsInfo2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::MemoryRequirements2) == sizeof(VkMemoryRequirements2), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::MemoryRequirements2>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::MemoryRequirements2KHR) == sizeof(VkMemoryRequirements2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::MemoryRequirements2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SparseImageMemoryRequirements2) == sizeof(VkSparseImageMemoryRequirements2), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SparseImageMemoryRequirements2>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SparseImageMemoryRequirements2KHR) == sizeof(VkSparseImageMemoryRequirements2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SparseImageMemoryRequirements2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDevicePointClippingProperties) == sizeof(VkPhysicalDevicePointClippingProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDevicePointClippingProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDevicePointClippingPropertiesKHR) == sizeof(VkPhysicalDevicePointClippingPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDevicePointClippingPropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::MemoryDedicatedRequirements) == sizeof(VkMemoryDedicatedRequirements), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::MemoryDedicatedRequirements>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::MemoryDedicatedRequirementsKHR) == sizeof(VkMemoryDedicatedRequirementsKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::MemoryDedicatedRequirementsKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::MemoryDedicatedAllocateInfo) == sizeof(VkMemoryDedicatedAllocateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::MemoryDedicatedAllocateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::MemoryDedicatedAllocateInfoKHR) == sizeof(VkMemoryDedicatedAllocateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::MemoryDedicatedAllocateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageViewUsageCreateInfo) == sizeof(VkImageViewUsageCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageViewUsageCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageViewUsageCreateInfoKHR) == sizeof(VkImageViewUsageCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageViewUsageCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineTessellationDomainOriginStateCreateInfo) == sizeof(VkPipelineTessellationDomainOriginStateCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineTessellationDomainOriginStateCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineTessellationDomainOriginStateCreateInfoKHR) == sizeof(VkPipelineTessellationDomainOriginStateCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineTessellationDomainOriginStateCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SamplerYcbcrConversionInfo) == sizeof(VkSamplerYcbcrConversionInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SamplerYcbcrConversionInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SamplerYcbcrConversionInfoKHR) == sizeof(VkSamplerYcbcrConversionInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SamplerYcbcrConversionInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SamplerYcbcrConversionCreateInfo) == sizeof(VkSamplerYcbcrConversionCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SamplerYcbcrConversionCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SamplerYcbcrConversionCreateInfoKHR) == sizeof(VkSamplerYcbcrConversionCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SamplerYcbcrConversionCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BindImagePlaneMemoryInfo) == sizeof(VkBindImagePlaneMemoryInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BindImagePlaneMemoryInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BindImagePlaneMemoryInfoKHR) == sizeof(VkBindImagePlaneMemoryInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BindImagePlaneMemoryInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImagePlaneMemoryRequirementsInfo) == sizeof(VkImagePlaneMemoryRequirementsInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImagePlaneMemoryRequirementsInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImagePlaneMemoryRequirementsInfoKHR) == sizeof(VkImagePlaneMemoryRequirementsInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImagePlaneMemoryRequirementsInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceSamplerYcbcrConversionFeatures) == sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceSamplerYcbcrConversionFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceSamplerYcbcrConversionFeaturesKHR) == sizeof(VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceSamplerYcbcrConversionFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SamplerYcbcrConversionImageFormatProperties) == sizeof(VkSamplerYcbcrConversionImageFormatProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SamplerYcbcrConversionImageFormatProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SamplerYcbcrConversionImageFormatPropertiesKHR) == sizeof(VkSamplerYcbcrConversionImageFormatPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SamplerYcbcrConversionImageFormatPropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::TextureLODGatherFormatPropertiesAMD) == sizeof(VkTextureLODGatherFormatPropertiesAMD), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::TextureLODGatherFormatPropertiesAMD>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ConditionalRenderingBeginInfoEXT) == sizeof(VkConditionalRenderingBeginInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ConditionalRenderingBeginInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ProtectedSubmitInfo) == sizeof(VkProtectedSubmitInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ProtectedSubmitInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceProtectedMemoryFeatures) == sizeof(VkPhysicalDeviceProtectedMemoryFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceProtectedMemoryFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceProtectedMemoryProperties) == sizeof(VkPhysicalDeviceProtectedMemoryProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceProtectedMemoryProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DeviceQueueInfo2) == sizeof(VkDeviceQueueInfo2), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DeviceQueueInfo2>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineCoverageToColorStateCreateInfoNV) == sizeof(VkPipelineCoverageToColorStateCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineCoverageToColorStateCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceSamplerFilterMinmaxProperties) == sizeof(VkPhysicalDeviceSamplerFilterMinmaxProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceSamplerFilterMinmaxProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceSamplerFilterMinmaxPropertiesEXT) == sizeof(VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceSamplerFilterMinmaxPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SampleLocationEXT) == sizeof(VkSampleLocationEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SampleLocationEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SampleLocationsInfoEXT) == sizeof(VkSampleLocationsInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SampleLocationsInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AttachmentSampleLocationsEXT) == sizeof(VkAttachmentSampleLocationsEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AttachmentSampleLocationsEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SubpassSampleLocationsEXT) == sizeof(VkSubpassSampleLocationsEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SubpassSampleLocationsEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::RenderPassSampleLocationsBeginInfoEXT) == sizeof(VkRenderPassSampleLocationsBeginInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::RenderPassSampleLocationsBeginInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineSampleLocationsStateCreateInfoEXT) == sizeof(VkPipelineSampleLocationsStateCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineSampleLocationsStateCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceSampleLocationsPropertiesEXT) == sizeof(VkPhysicalDeviceSampleLocationsPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceSampleLocationsPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::MultisamplePropertiesEXT) == sizeof(VkMultisamplePropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::MultisamplePropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SamplerReductionModeCreateInfo) == sizeof(VkSamplerReductionModeCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SamplerReductionModeCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SamplerReductionModeCreateInfoEXT) == sizeof(VkSamplerReductionModeCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SamplerReductionModeCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceBlendOperationAdvancedFeaturesEXT) == sizeof(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceBlendOperationAdvancedFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceBlendOperationAdvancedPropertiesEXT) == sizeof(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceBlendOperationAdvancedPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineColorBlendAdvancedStateCreateInfoEXT) == sizeof(VkPipelineColorBlendAdvancedStateCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineColorBlendAdvancedStateCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceInlineUniformBlockFeaturesEXT) == sizeof(VkPhysicalDeviceInlineUniformBlockFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceInlineUniformBlockFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceInlineUniformBlockPropertiesEXT) == sizeof(VkPhysicalDeviceInlineUniformBlockPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceInlineUniformBlockPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::WriteDescriptorSetInlineUniformBlockEXT) == sizeof(VkWriteDescriptorSetInlineUniformBlockEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::WriteDescriptorSetInlineUniformBlockEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DescriptorPoolInlineUniformBlockCreateInfoEXT) == sizeof(VkDescriptorPoolInlineUniformBlockCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DescriptorPoolInlineUniformBlockCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineCoverageModulationStateCreateInfoNV) == sizeof(VkPipelineCoverageModulationStateCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineCoverageModulationStateCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageFormatListCreateInfo) == sizeof(VkImageFormatListCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageFormatListCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageFormatListCreateInfoKHR) == sizeof(VkImageFormatListCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageFormatListCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ValidationCacheCreateInfoEXT) == sizeof(VkValidationCacheCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ValidationCacheCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ShaderModuleValidationCacheCreateInfoEXT) == sizeof(VkShaderModuleValidationCacheCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ShaderModuleValidationCacheCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceMaintenance3Properties) == sizeof(VkPhysicalDeviceMaintenance3Properties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceMaintenance3Properties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceMaintenance3PropertiesKHR) == sizeof(VkPhysicalDeviceMaintenance3PropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceMaintenance3PropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DescriptorSetLayoutSupport) == sizeof(VkDescriptorSetLayoutSupport), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DescriptorSetLayoutSupport>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DescriptorSetLayoutSupportKHR) == sizeof(VkDescriptorSetLayoutSupportKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DescriptorSetLayoutSupportKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceShaderDrawParametersFeatures) == sizeof(VkPhysicalDeviceShaderDrawParametersFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceShaderDrawParametersFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceShaderDrawParameterFeatures) == sizeof(VkPhysicalDeviceShaderDrawParameterFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceShaderDrawParameterFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceShaderFloat16Int8Features) == sizeof(VkPhysicalDeviceShaderFloat16Int8Features), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceShaderFloat16Int8Features>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceShaderFloat16Int8FeaturesKHR) == sizeof(VkPhysicalDeviceShaderFloat16Int8FeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceShaderFloat16Int8FeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceFloat16Int8FeaturesKHR) == sizeof(VkPhysicalDeviceFloat16Int8FeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceFloat16Int8FeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceFloatControlsProperties) == sizeof(VkPhysicalDeviceFloatControlsProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceFloatControlsProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceFloatControlsPropertiesKHR) == sizeof(VkPhysicalDeviceFloatControlsPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceFloatControlsPropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceHostQueryResetFeatures) == sizeof(VkPhysicalDeviceHostQueryResetFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceHostQueryResetFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceHostQueryResetFeaturesEXT) == sizeof(VkPhysicalDeviceHostQueryResetFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceHostQueryResetFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ShaderResourceUsageAMD) == sizeof(VkShaderResourceUsageAMD), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ShaderResourceUsageAMD>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ShaderStatisticsInfoAMD) == sizeof(VkShaderStatisticsInfoAMD), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ShaderStatisticsInfoAMD>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DeviceQueueGlobalPriorityCreateInfoEXT) == sizeof(VkDeviceQueueGlobalPriorityCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DeviceQueueGlobalPriorityCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DebugUtilsObjectNameInfoEXT) == sizeof(VkDebugUtilsObjectNameInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DebugUtilsObjectNameInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DebugUtilsObjectTagInfoEXT) == sizeof(VkDebugUtilsObjectTagInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DebugUtilsObjectTagInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DebugUtilsLabelEXT) == sizeof(VkDebugUtilsLabelEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DebugUtilsLabelEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DebugUtilsMessengerCreateInfoEXT) == sizeof(VkDebugUtilsMessengerCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DebugUtilsMessengerCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DebugUtilsMessengerCallbackDataEXT) == sizeof(VkDebugUtilsMessengerCallbackDataEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DebugUtilsMessengerCallbackDataEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceDeviceMemoryReportFeaturesEXT) == sizeof(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceDeviceMemoryReportFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DeviceDeviceMemoryReportCreateInfoEXT) == sizeof(VkDeviceDeviceMemoryReportCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DeviceDeviceMemoryReportCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DeviceMemoryReportCallbackDataEXT) == sizeof(VkDeviceMemoryReportCallbackDataEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DeviceMemoryReportCallbackDataEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImportMemoryHostPointerInfoEXT) == sizeof(VkImportMemoryHostPointerInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImportMemoryHostPointerInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::MemoryHostPointerPropertiesEXT) == sizeof(VkMemoryHostPointerPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::MemoryHostPointerPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceExternalMemoryHostPropertiesEXT) == sizeof(VkPhysicalDeviceExternalMemoryHostPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceExternalMemoryHostPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceConservativeRasterizationPropertiesEXT) == sizeof(VkPhysicalDeviceConservativeRasterizationPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceConservativeRasterizationPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::CalibratedTimestampInfoEXT) == sizeof(VkCalibratedTimestampInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::CalibratedTimestampInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceShaderCorePropertiesAMD) == sizeof(VkPhysicalDeviceShaderCorePropertiesAMD), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceShaderCorePropertiesAMD>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceShaderCoreProperties2AMD) == sizeof(VkPhysicalDeviceShaderCoreProperties2AMD), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceShaderCoreProperties2AMD>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineRasterizationConservativeStateCreateInfoEXT) == sizeof(VkPipelineRasterizationConservativeStateCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineRasterizationConservativeStateCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceDescriptorIndexingFeatures) == sizeof(VkPhysicalDeviceDescriptorIndexingFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceDescriptorIndexingFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceDescriptorIndexingFeaturesEXT) == sizeof(VkPhysicalDeviceDescriptorIndexingFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceDescriptorIndexingFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceDescriptorIndexingProperties) == sizeof(VkPhysicalDeviceDescriptorIndexingProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceDescriptorIndexingProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceDescriptorIndexingPropertiesEXT) == sizeof(VkPhysicalDeviceDescriptorIndexingPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceDescriptorIndexingPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DescriptorSetLayoutBindingFlagsCreateInfo) == sizeof(VkDescriptorSetLayoutBindingFlagsCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DescriptorSetLayoutBindingFlagsCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DescriptorSetLayoutBindingFlagsCreateInfoEXT) == sizeof(VkDescriptorSetLayoutBindingFlagsCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DescriptorSetLayoutBindingFlagsCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DescriptorSetVariableDescriptorCountAllocateInfo) == sizeof(VkDescriptorSetVariableDescriptorCountAllocateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DescriptorSetVariableDescriptorCountAllocateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DescriptorSetVariableDescriptorCountAllocateInfoEXT) == sizeof(VkDescriptorSetVariableDescriptorCountAllocateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DescriptorSetVariableDescriptorCountAllocateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DescriptorSetVariableDescriptorCountLayoutSupport) == sizeof(VkDescriptorSetVariableDescriptorCountLayoutSupport), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DescriptorSetVariableDescriptorCountLayoutSupport>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DescriptorSetVariableDescriptorCountLayoutSupportEXT) == sizeof(VkDescriptorSetVariableDescriptorCountLayoutSupportEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DescriptorSetVariableDescriptorCountLayoutSupportEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AttachmentDescription2) == sizeof(VkAttachmentDescription2), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AttachmentDescription2>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AttachmentDescription2KHR) == sizeof(VkAttachmentDescription2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AttachmentDescription2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AttachmentReference2) == sizeof(VkAttachmentReference2), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AttachmentReference2>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AttachmentReference2KHR) == sizeof(VkAttachmentReference2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AttachmentReference2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SubpassDescription2) == sizeof(VkSubpassDescription2), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SubpassDescription2>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SubpassDescription2KHR) == sizeof(VkSubpassDescription2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SubpassDescription2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SubpassDependency2) == sizeof(VkSubpassDependency2), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SubpassDependency2>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SubpassDependency2KHR) == sizeof(VkSubpassDependency2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SubpassDependency2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::RenderPassCreateInfo2) == sizeof(VkRenderPassCreateInfo2), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::RenderPassCreateInfo2>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::RenderPassCreateInfo2KHR) == sizeof(VkRenderPassCreateInfo2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::RenderPassCreateInfo2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SubpassBeginInfo) == sizeof(VkSubpassBeginInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SubpassBeginInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SubpassBeginInfoKHR) == sizeof(VkSubpassBeginInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SubpassBeginInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SubpassEndInfo) == sizeof(VkSubpassEndInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SubpassEndInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SubpassEndInfoKHR) == sizeof(VkSubpassEndInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SubpassEndInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceTimelineSemaphoreFeatures) == sizeof(VkPhysicalDeviceTimelineSemaphoreFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceTimelineSemaphoreFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceTimelineSemaphoreFeaturesKHR) == sizeof(VkPhysicalDeviceTimelineSemaphoreFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceTimelineSemaphoreFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceTimelineSemaphoreProperties) == sizeof(VkPhysicalDeviceTimelineSemaphoreProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceTimelineSemaphoreProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceTimelineSemaphorePropertiesKHR) == sizeof(VkPhysicalDeviceTimelineSemaphorePropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceTimelineSemaphorePropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SemaphoreTypeCreateInfo) == sizeof(VkSemaphoreTypeCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SemaphoreTypeCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SemaphoreTypeCreateInfoKHR) == sizeof(VkSemaphoreTypeCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SemaphoreTypeCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::TimelineSemaphoreSubmitInfo) == sizeof(VkTimelineSemaphoreSubmitInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::TimelineSemaphoreSubmitInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::TimelineSemaphoreSubmitInfoKHR) == sizeof(VkTimelineSemaphoreSubmitInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::TimelineSemaphoreSubmitInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SemaphoreWaitInfo) == sizeof(VkSemaphoreWaitInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SemaphoreWaitInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SemaphoreWaitInfoKHR) == sizeof(VkSemaphoreWaitInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SemaphoreWaitInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SemaphoreSignalInfo) == sizeof(VkSemaphoreSignalInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SemaphoreSignalInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SemaphoreSignalInfoKHR) == sizeof(VkSemaphoreSignalInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SemaphoreSignalInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::VertexInputBindingDivisorDescriptionEXT) == sizeof(VkVertexInputBindingDivisorDescriptionEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::VertexInputBindingDivisorDescriptionEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineVertexInputDivisorStateCreateInfoEXT) == sizeof(VkPipelineVertexInputDivisorStateCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineVertexInputDivisorStateCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceVertexAttributeDivisorPropertiesEXT) == sizeof(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceVertexAttributeDivisorPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDevicePCIBusInfoPropertiesEXT) == sizeof(VkPhysicalDevicePCIBusInfoPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDevicePCIBusInfoPropertiesEXT>::value, "Must be a standard layout type" );
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
static_assert( sizeof(vk::ImportAndroidHardwareBufferInfoANDROID) == sizeof(VkImportAndroidHardwareBufferInfoANDROID), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImportAndroidHardwareBufferInfoANDROID>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AndroidHardwareBufferUsageANDROID) == sizeof(VkAndroidHardwareBufferUsageANDROID), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AndroidHardwareBufferUsageANDROID>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AndroidHardwareBufferPropertiesANDROID) == sizeof(VkAndroidHardwareBufferPropertiesANDROID), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AndroidHardwareBufferPropertiesANDROID>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::MemoryGetAndroidHardwareBufferInfoANDROID) == sizeof(VkMemoryGetAndroidHardwareBufferInfoANDROID), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::MemoryGetAndroidHardwareBufferInfoANDROID>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AndroidHardwareBufferFormatPropertiesANDROID) == sizeof(VkAndroidHardwareBufferFormatPropertiesANDROID), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AndroidHardwareBufferFormatPropertiesANDROID>::value, "Must be a standard layout type" );
#endif // defined(VK_USE_PLATFORM_ANDROID_KHR)
static_assert( sizeof(vk::CommandBufferInheritanceConditionalRenderingInfoEXT) == sizeof(VkCommandBufferInheritanceConditionalRenderingInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::CommandBufferInheritanceConditionalRenderingInfoEXT>::value, "Must be a standard layout type" );
#if defined(VK_USE_PLATFORM_ANDROID_KHR)
static_assert( sizeof(vk::ExternalFormatANDROID) == sizeof(VkExternalFormatANDROID), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ExternalFormatANDROID>::value, "Must be a standard layout type" );
#endif // defined(VK_USE_PLATFORM_ANDROID_KHR)
static_assert( sizeof(vk::PhysicalDevice8BitStorageFeatures) == sizeof(VkPhysicalDevice8BitStorageFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDevice8BitStorageFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDevice8BitStorageFeaturesKHR) == sizeof(VkPhysicalDevice8BitStorageFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDevice8BitStorageFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceConditionalRenderingFeaturesEXT) == sizeof(VkPhysicalDeviceConditionalRenderingFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceConditionalRenderingFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceVulkanMemoryModelFeatures) == sizeof(VkPhysicalDeviceVulkanMemoryModelFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceVulkanMemoryModelFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceVulkanMemoryModelFeaturesKHR) == sizeof(VkPhysicalDeviceVulkanMemoryModelFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceVulkanMemoryModelFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceShaderAtomicInt64Features) == sizeof(VkPhysicalDeviceShaderAtomicInt64Features), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceShaderAtomicInt64Features>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceShaderAtomicInt64FeaturesKHR) == sizeof(VkPhysicalDeviceShaderAtomicInt64FeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceShaderAtomicInt64FeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceShaderAtomicFloatFeaturesEXT) == sizeof(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceShaderAtomicFloatFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceVertexAttributeDivisorFeaturesEXT) == sizeof(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceVertexAttributeDivisorFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::QueueFamilyCheckpointPropertiesNV) == sizeof(VkQueueFamilyCheckpointPropertiesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::QueueFamilyCheckpointPropertiesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::CheckpointDataNV) == sizeof(VkCheckpointDataNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::CheckpointDataNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceDepthStencilResolveProperties) == sizeof(VkPhysicalDeviceDepthStencilResolveProperties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceDepthStencilResolveProperties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceDepthStencilResolvePropertiesKHR) == sizeof(VkPhysicalDeviceDepthStencilResolvePropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceDepthStencilResolvePropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SubpassDescriptionDepthStencilResolve) == sizeof(VkSubpassDescriptionDepthStencilResolve), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SubpassDescriptionDepthStencilResolve>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SubpassDescriptionDepthStencilResolveKHR) == sizeof(VkSubpassDescriptionDepthStencilResolveKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SubpassDescriptionDepthStencilResolveKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageViewASTCDecodeModeEXT) == sizeof(VkImageViewASTCDecodeModeEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageViewASTCDecodeModeEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceASTCDecodeFeaturesEXT) == sizeof(VkPhysicalDeviceASTCDecodeFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceASTCDecodeFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceTransformFeedbackFeaturesEXT) == sizeof(VkPhysicalDeviceTransformFeedbackFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceTransformFeedbackFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceTransformFeedbackPropertiesEXT) == sizeof(VkPhysicalDeviceTransformFeedbackPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceTransformFeedbackPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineRasterizationStateStreamCreateInfoEXT) == sizeof(VkPipelineRasterizationStateStreamCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineRasterizationStateStreamCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceRepresentativeFragmentTestFeaturesNV) == sizeof(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceRepresentativeFragmentTestFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineRepresentativeFragmentTestStateCreateInfoNV) == sizeof(VkPipelineRepresentativeFragmentTestStateCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineRepresentativeFragmentTestStateCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceExclusiveScissorFeaturesNV) == sizeof(VkPhysicalDeviceExclusiveScissorFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceExclusiveScissorFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineViewportExclusiveScissorStateCreateInfoNV) == sizeof(VkPipelineViewportExclusiveScissorStateCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineViewportExclusiveScissorStateCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceCornerSampledImageFeaturesNV) == sizeof(VkPhysicalDeviceCornerSampledImageFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceCornerSampledImageFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceComputeShaderDerivativesFeaturesNV) == sizeof(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceComputeShaderDerivativesFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceFragmentShaderBarycentricFeaturesNV) == sizeof(VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceFragmentShaderBarycentricFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceShaderImageFootprintFeaturesNV) == sizeof(VkPhysicalDeviceShaderImageFootprintFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceShaderImageFootprintFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV) == sizeof(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ShadingRatePaletteNV) == sizeof(VkShadingRatePaletteNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ShadingRatePaletteNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineViewportShadingRateImageStateCreateInfoNV) == sizeof(VkPipelineViewportShadingRateImageStateCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineViewportShadingRateImageStateCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceShadingRateImageFeaturesNV) == sizeof(VkPhysicalDeviceShadingRateImageFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceShadingRateImageFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceShadingRateImagePropertiesNV) == sizeof(VkPhysicalDeviceShadingRateImagePropertiesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceShadingRateImagePropertiesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::CoarseSampleLocationNV) == sizeof(VkCoarseSampleLocationNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::CoarseSampleLocationNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::CoarseSampleOrderCustomNV) == sizeof(VkCoarseSampleOrderCustomNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::CoarseSampleOrderCustomNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineViewportCoarseSampleOrderStateCreateInfoNV) == sizeof(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineViewportCoarseSampleOrderStateCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceMeshShaderFeaturesNV) == sizeof(VkPhysicalDeviceMeshShaderFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceMeshShaderFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceMeshShaderPropertiesNV) == sizeof(VkPhysicalDeviceMeshShaderPropertiesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceMeshShaderPropertiesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DrawMeshTasksIndirectCommandNV) == sizeof(VkDrawMeshTasksIndirectCommandNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DrawMeshTasksIndirectCommandNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::RayTracingShaderGroupCreateInfoNV) == sizeof(VkRayTracingShaderGroupCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::RayTracingShaderGroupCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::RayTracingShaderGroupCreateInfoKHR) == sizeof(VkRayTracingShaderGroupCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::RayTracingShaderGroupCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::RayTracingPipelineCreateInfoNV) == sizeof(VkRayTracingPipelineCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::RayTracingPipelineCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::RayTracingPipelineInterfaceCreateInfoKHR) == sizeof(VkRayTracingPipelineInterfaceCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::RayTracingPipelineInterfaceCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineLibraryCreateInfoKHR) == sizeof(VkPipelineLibraryCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineLibraryCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::RayTracingPipelineCreateInfoKHR) == sizeof(VkRayTracingPipelineCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::RayTracingPipelineCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::GeometryTrianglesNV) == sizeof(VkGeometryTrianglesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::GeometryTrianglesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::GeometryAABBNV) == sizeof(VkGeometryAABBNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::GeometryAABBNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::GeometryDataNV) == sizeof(VkGeometryDataNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::GeometryDataNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::GeometryNV) == sizeof(VkGeometryNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::GeometryNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AccelerationStructureInfoNV) == sizeof(VkAccelerationStructureInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AccelerationStructureInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AccelerationStructureCreateInfoNV) == sizeof(VkAccelerationStructureCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AccelerationStructureCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BindAccelerationStructureMemoryInfoNV) == sizeof(VkBindAccelerationStructureMemoryInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BindAccelerationStructureMemoryInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::WriteDescriptorSetAccelerationStructureKHR) == sizeof(VkWriteDescriptorSetAccelerationStructureKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::WriteDescriptorSetAccelerationStructureKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::WriteDescriptorSetAccelerationStructureNV) == sizeof(VkWriteDescriptorSetAccelerationStructureNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::WriteDescriptorSetAccelerationStructureNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AccelerationStructureMemoryRequirementsInfoNV) == sizeof(VkAccelerationStructureMemoryRequirementsInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AccelerationStructureMemoryRequirementsInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceAccelerationStructureFeaturesKHR) == sizeof(VkPhysicalDeviceAccelerationStructureFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceAccelerationStructureFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceRayTracingPipelineFeaturesKHR) == sizeof(VkPhysicalDeviceRayTracingPipelineFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceRayTracingPipelineFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceRayQueryFeaturesKHR) == sizeof(VkPhysicalDeviceRayQueryFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceRayQueryFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceAccelerationStructurePropertiesKHR) == sizeof(VkPhysicalDeviceAccelerationStructurePropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceAccelerationStructurePropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceRayTracingPipelinePropertiesKHR) == sizeof(VkPhysicalDeviceRayTracingPipelinePropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceRayTracingPipelinePropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceRayTracingPropertiesNV) == sizeof(VkPhysicalDeviceRayTracingPropertiesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceRayTracingPropertiesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::StridedDeviceAddressRegionKHR) == sizeof(VkStridedDeviceAddressRegionKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::StridedDeviceAddressRegionKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::TraceRaysIndirectCommandKHR) == sizeof(VkTraceRaysIndirectCommandKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::TraceRaysIndirectCommandKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DrmFormatModifierPropertiesEXT) == sizeof(VkDrmFormatModifierPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DrmFormatModifierPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DrmFormatModifierPropertiesListEXT) == sizeof(VkDrmFormatModifierPropertiesListEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DrmFormatModifierPropertiesListEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceImageDrmFormatModifierInfoEXT) == sizeof(VkPhysicalDeviceImageDrmFormatModifierInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceImageDrmFormatModifierInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageDrmFormatModifierListCreateInfoEXT) == sizeof(VkImageDrmFormatModifierListCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageDrmFormatModifierListCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageDrmFormatModifierExplicitCreateInfoEXT) == sizeof(VkImageDrmFormatModifierExplicitCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageDrmFormatModifierExplicitCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageDrmFormatModifierPropertiesEXT) == sizeof(VkImageDrmFormatModifierPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageDrmFormatModifierPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageStencilUsageCreateInfo) == sizeof(VkImageStencilUsageCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageStencilUsageCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageStencilUsageCreateInfoEXT) == sizeof(VkImageStencilUsageCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageStencilUsageCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DeviceMemoryOverallocationCreateInfoAMD) == sizeof(VkDeviceMemoryOverallocationCreateInfoAMD), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DeviceMemoryOverallocationCreateInfoAMD>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceFragmentDensityMapFeaturesEXT) == sizeof(VkPhysicalDeviceFragmentDensityMapFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceFragmentDensityMapFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceFragmentDensityMap2FeaturesEXT) == sizeof(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceFragmentDensityMap2FeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceFragmentDensityMapPropertiesEXT) == sizeof(VkPhysicalDeviceFragmentDensityMapPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceFragmentDensityMapPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceFragmentDensityMap2PropertiesEXT) == sizeof(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceFragmentDensityMap2PropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::RenderPassFragmentDensityMapCreateInfoEXT) == sizeof(VkRenderPassFragmentDensityMapCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::RenderPassFragmentDensityMapCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceScalarBlockLayoutFeatures) == sizeof(VkPhysicalDeviceScalarBlockLayoutFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceScalarBlockLayoutFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceScalarBlockLayoutFeaturesEXT) == sizeof(VkPhysicalDeviceScalarBlockLayoutFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceScalarBlockLayoutFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SurfaceProtectedCapabilitiesKHR) == sizeof(VkSurfaceProtectedCapabilitiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SurfaceProtectedCapabilitiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceUniformBufferStandardLayoutFeatures) == sizeof(VkPhysicalDeviceUniformBufferStandardLayoutFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceUniformBufferStandardLayoutFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceUniformBufferStandardLayoutFeaturesKHR) == sizeof(VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceUniformBufferStandardLayoutFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceDepthClipEnableFeaturesEXT) == sizeof(VkPhysicalDeviceDepthClipEnableFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceDepthClipEnableFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineRasterizationDepthClipStateCreateInfoEXT) == sizeof(VkPipelineRasterizationDepthClipStateCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineRasterizationDepthClipStateCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceMemoryBudgetPropertiesEXT) == sizeof(VkPhysicalDeviceMemoryBudgetPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceMemoryBudgetPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceMemoryPriorityFeaturesEXT) == sizeof(VkPhysicalDeviceMemoryPriorityFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceMemoryPriorityFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::MemoryPriorityAllocateInfoEXT) == sizeof(VkMemoryPriorityAllocateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::MemoryPriorityAllocateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceBufferDeviceAddressFeatures) == sizeof(VkPhysicalDeviceBufferDeviceAddressFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceBufferDeviceAddressFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceBufferDeviceAddressFeaturesKHR) == sizeof(VkPhysicalDeviceBufferDeviceAddressFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceBufferDeviceAddressFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceBufferDeviceAddressFeaturesEXT) == sizeof(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceBufferDeviceAddressFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceBufferAddressFeaturesEXT) == sizeof(VkPhysicalDeviceBufferAddressFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceBufferAddressFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BufferDeviceAddressInfo) == sizeof(VkBufferDeviceAddressInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BufferDeviceAddressInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BufferDeviceAddressInfoKHR) == sizeof(VkBufferDeviceAddressInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BufferDeviceAddressInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BufferDeviceAddressInfoEXT) == sizeof(VkBufferDeviceAddressInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BufferDeviceAddressInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BufferOpaqueCaptureAddressCreateInfo) == sizeof(VkBufferOpaqueCaptureAddressCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BufferOpaqueCaptureAddressCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BufferOpaqueCaptureAddressCreateInfoKHR) == sizeof(VkBufferOpaqueCaptureAddressCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BufferOpaqueCaptureAddressCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BufferDeviceAddressCreateInfoEXT) == sizeof(VkBufferDeviceAddressCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BufferDeviceAddressCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceImageViewImageFormatInfoEXT) == sizeof(VkPhysicalDeviceImageViewImageFormatInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceImageViewImageFormatInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::FilterCubicImageViewImageFormatPropertiesEXT) == sizeof(VkFilterCubicImageViewImageFormatPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::FilterCubicImageViewImageFormatPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceImagelessFramebufferFeatures) == sizeof(VkPhysicalDeviceImagelessFramebufferFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceImagelessFramebufferFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceImagelessFramebufferFeaturesKHR) == sizeof(VkPhysicalDeviceImagelessFramebufferFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceImagelessFramebufferFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::FramebufferAttachmentImageInfo) == sizeof(VkFramebufferAttachmentImageInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::FramebufferAttachmentImageInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::FramebufferAttachmentsCreateInfo) == sizeof(VkFramebufferAttachmentsCreateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::FramebufferAttachmentsCreateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::FramebufferAttachmentsCreateInfoKHR) == sizeof(VkFramebufferAttachmentsCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::FramebufferAttachmentsCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::FramebufferAttachmentImageInfoKHR) == sizeof(VkFramebufferAttachmentImageInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::FramebufferAttachmentImageInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::RenderPassAttachmentBeginInfo) == sizeof(VkRenderPassAttachmentBeginInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::RenderPassAttachmentBeginInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::RenderPassAttachmentBeginInfoKHR) == sizeof(VkRenderPassAttachmentBeginInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::RenderPassAttachmentBeginInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT) == sizeof(VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceCooperativeMatrixFeaturesNV) == sizeof(VkPhysicalDeviceCooperativeMatrixFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceCooperativeMatrixFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceCooperativeMatrixPropertiesNV) == sizeof(VkPhysicalDeviceCooperativeMatrixPropertiesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceCooperativeMatrixPropertiesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::CooperativeMatrixPropertiesNV) == sizeof(VkCooperativeMatrixPropertiesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::CooperativeMatrixPropertiesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceYcbcrImageArraysFeaturesEXT) == sizeof(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceYcbcrImageArraysFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageViewHandleInfoNVX) == sizeof(VkImageViewHandleInfoNVX), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageViewHandleInfoNVX>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageViewAddressPropertiesNVX) == sizeof(VkImageViewAddressPropertiesNVX), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageViewAddressPropertiesNVX>::value, "Must be a standard layout type" );
#if defined(VK_USE_PLATFORM_GGP)
static_assert( sizeof(vk::PresentFrameTokenGGP) == sizeof(VkPresentFrameTokenGGP), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PresentFrameTokenGGP>::value, "Must be a standard layout type" );
#endif // defined(VK_USE_PLATFORM_GGP)
static_assert( sizeof(vk::PipelineCreationFeedbackEXT) == sizeof(VkPipelineCreationFeedbackEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineCreationFeedbackEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineCreationFeedbackCreateInfoEXT) == sizeof(VkPipelineCreationFeedbackCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineCreationFeedbackCreateInfoEXT>::value, "Must be a standard layout type" );
#if defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(vk::SurfaceFullScreenExclusiveInfoEXT) == sizeof(VkSurfaceFullScreenExclusiveInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SurfaceFullScreenExclusiveInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SurfaceFullScreenExclusiveWin32InfoEXT) == sizeof(VkSurfaceFullScreenExclusiveWin32InfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SurfaceFullScreenExclusiveWin32InfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SurfaceCapabilitiesFullScreenExclusiveEXT) == sizeof(VkSurfaceCapabilitiesFullScreenExclusiveEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SurfaceCapabilitiesFullScreenExclusiveEXT>::value, "Must be a standard layout type" );
#endif // defined(VK_USE_PLATFORM_WIN32_KHR)
static_assert( sizeof(vk::PhysicalDevicePerformanceQueryFeaturesKHR) == sizeof(VkPhysicalDevicePerformanceQueryFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDevicePerformanceQueryFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDevicePerformanceQueryPropertiesKHR) == sizeof(VkPhysicalDevicePerformanceQueryPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDevicePerformanceQueryPropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PerformanceCounterKHR) == sizeof(VkPerformanceCounterKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PerformanceCounterKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PerformanceCounterDescriptionKHR) == sizeof(VkPerformanceCounterDescriptionKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PerformanceCounterDescriptionKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::QueryPoolPerformanceCreateInfoKHR) == sizeof(VkQueryPoolPerformanceCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::QueryPoolPerformanceCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AcquireProfilingLockInfoKHR) == sizeof(VkAcquireProfilingLockInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AcquireProfilingLockInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PerformanceQuerySubmitInfoKHR) == sizeof(VkPerformanceQuerySubmitInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PerformanceQuerySubmitInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::HeadlessSurfaceCreateInfoEXT) == sizeof(VkHeadlessSurfaceCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::HeadlessSurfaceCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceCoverageReductionModeFeaturesNV) == sizeof(VkPhysicalDeviceCoverageReductionModeFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceCoverageReductionModeFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineCoverageReductionStateCreateInfoNV) == sizeof(VkPipelineCoverageReductionStateCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineCoverageReductionStateCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::FramebufferMixedSamplesCombinationNV) == sizeof(VkFramebufferMixedSamplesCombinationNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::FramebufferMixedSamplesCombinationNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL) == sizeof(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PerformanceValueINTEL) == sizeof(VkPerformanceValueINTEL), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PerformanceValueINTEL>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::InitializePerformanceApiInfoINTEL) == sizeof(VkInitializePerformanceApiInfoINTEL), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::InitializePerformanceApiInfoINTEL>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::QueryPoolPerformanceQueryCreateInfoINTEL) == sizeof(VkQueryPoolPerformanceQueryCreateInfoINTEL), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::QueryPoolPerformanceQueryCreateInfoINTEL>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::QueryPoolCreateInfoINTEL) == sizeof(VkQueryPoolCreateInfoINTEL), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::QueryPoolCreateInfoINTEL>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PerformanceMarkerInfoINTEL) == sizeof(VkPerformanceMarkerInfoINTEL), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PerformanceMarkerInfoINTEL>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PerformanceStreamMarkerInfoINTEL) == sizeof(VkPerformanceStreamMarkerInfoINTEL), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PerformanceStreamMarkerInfoINTEL>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PerformanceOverrideInfoINTEL) == sizeof(VkPerformanceOverrideInfoINTEL), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PerformanceOverrideInfoINTEL>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PerformanceConfigurationAcquireInfoINTEL) == sizeof(VkPerformanceConfigurationAcquireInfoINTEL), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PerformanceConfigurationAcquireInfoINTEL>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceShaderClockFeaturesKHR) == sizeof(VkPhysicalDeviceShaderClockFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceShaderClockFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceIndexTypeUint8FeaturesEXT) == sizeof(VkPhysicalDeviceIndexTypeUint8FeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceIndexTypeUint8FeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceShaderSMBuiltinsPropertiesNV) == sizeof(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceShaderSMBuiltinsPropertiesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceShaderSMBuiltinsFeaturesNV) == sizeof(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceShaderSMBuiltinsFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceFragmentShaderInterlockFeaturesEXT) == sizeof(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceFragmentShaderInterlockFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceSeparateDepthStencilLayoutsFeatures) == sizeof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceSeparateDepthStencilLayoutsFeatures>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR) == sizeof(VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AttachmentReferenceStencilLayout) == sizeof(VkAttachmentReferenceStencilLayout), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AttachmentReferenceStencilLayout>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AttachmentReferenceStencilLayoutKHR) == sizeof(VkAttachmentReferenceStencilLayoutKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AttachmentReferenceStencilLayoutKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AttachmentDescriptionStencilLayout) == sizeof(VkAttachmentDescriptionStencilLayout), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AttachmentDescriptionStencilLayout>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AttachmentDescriptionStencilLayoutKHR) == sizeof(VkAttachmentDescriptionStencilLayoutKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AttachmentDescriptionStencilLayoutKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDevicePipelineExecutablePropertiesFeaturesKHR) == sizeof(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDevicePipelineExecutablePropertiesFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineInfoKHR) == sizeof(VkPipelineInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineExecutablePropertiesKHR) == sizeof(VkPipelineExecutablePropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineExecutablePropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineExecutableInfoKHR) == sizeof(VkPipelineExecutableInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineExecutableInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineExecutableStatisticKHR) == sizeof(VkPipelineExecutableStatisticKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineExecutableStatisticKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineExecutableInternalRepresentationKHR) == sizeof(VkPipelineExecutableInternalRepresentationKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineExecutableInternalRepresentationKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT) == sizeof(VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceTexelBufferAlignmentFeaturesEXT) == sizeof(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceTexelBufferAlignmentFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceTexelBufferAlignmentPropertiesEXT) == sizeof(VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceTexelBufferAlignmentPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceSubgroupSizeControlFeaturesEXT) == sizeof(VkPhysicalDeviceSubgroupSizeControlFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceSubgroupSizeControlFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceSubgroupSizeControlPropertiesEXT) == sizeof(VkPhysicalDeviceSubgroupSizeControlPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceSubgroupSizeControlPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT) == sizeof(VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::MemoryOpaqueCaptureAddressAllocateInfo) == sizeof(VkMemoryOpaqueCaptureAddressAllocateInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::MemoryOpaqueCaptureAddressAllocateInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::MemoryOpaqueCaptureAddressAllocateInfoKHR) == sizeof(VkMemoryOpaqueCaptureAddressAllocateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::MemoryOpaqueCaptureAddressAllocateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DeviceMemoryOpaqueCaptureAddressInfo) == sizeof(VkDeviceMemoryOpaqueCaptureAddressInfo), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DeviceMemoryOpaqueCaptureAddressInfo>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DeviceMemoryOpaqueCaptureAddressInfoKHR) == sizeof(VkDeviceMemoryOpaqueCaptureAddressInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DeviceMemoryOpaqueCaptureAddressInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceLineRasterizationFeaturesEXT) == sizeof(VkPhysicalDeviceLineRasterizationFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceLineRasterizationFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceLineRasterizationPropertiesEXT) == sizeof(VkPhysicalDeviceLineRasterizationPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceLineRasterizationPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineRasterizationLineStateCreateInfoEXT) == sizeof(VkPipelineRasterizationLineStateCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineRasterizationLineStateCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDevicePipelineCreationCacheControlFeaturesEXT) == sizeof(VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDevicePipelineCreationCacheControlFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceVulkan11Features) == sizeof(VkPhysicalDeviceVulkan11Features), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceVulkan11Features>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceVulkan11Properties) == sizeof(VkPhysicalDeviceVulkan11Properties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceVulkan11Properties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceVulkan12Features) == sizeof(VkPhysicalDeviceVulkan12Features), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceVulkan12Features>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceVulkan12Properties) == sizeof(VkPhysicalDeviceVulkan12Properties), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceVulkan12Properties>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineCompilerControlCreateInfoAMD) == sizeof(VkPipelineCompilerControlCreateInfoAMD), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineCompilerControlCreateInfoAMD>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceCoherentMemoryFeaturesAMD) == sizeof(VkPhysicalDeviceCoherentMemoryFeaturesAMD), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceCoherentMemoryFeaturesAMD>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceToolPropertiesEXT) == sizeof(VkPhysicalDeviceToolPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceToolPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::SamplerCustomBorderColorCreateInfoEXT) == sizeof(VkSamplerCustomBorderColorCreateInfoEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::SamplerCustomBorderColorCreateInfoEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceCustomBorderColorPropertiesEXT) == sizeof(VkPhysicalDeviceCustomBorderColorPropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceCustomBorderColorPropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceCustomBorderColorFeaturesEXT) == sizeof(VkPhysicalDeviceCustomBorderColorFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceCustomBorderColorFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AccelerationStructureGeometryTrianglesDataKHR) == sizeof(VkAccelerationStructureGeometryTrianglesDataKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AccelerationStructureGeometryTrianglesDataKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AccelerationStructureGeometryAabbsDataKHR) == sizeof(VkAccelerationStructureGeometryAabbsDataKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AccelerationStructureGeometryAabbsDataKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AccelerationStructureGeometryInstancesDataKHR) == sizeof(VkAccelerationStructureGeometryInstancesDataKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AccelerationStructureGeometryInstancesDataKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AccelerationStructureGeometryKHR) == sizeof(VkAccelerationStructureGeometryKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AccelerationStructureGeometryKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AccelerationStructureBuildGeometryInfoKHR) == sizeof(VkAccelerationStructureBuildGeometryInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AccelerationStructureBuildGeometryInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AccelerationStructureBuildRangeInfoKHR) == sizeof(VkAccelerationStructureBuildRangeInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AccelerationStructureBuildRangeInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AccelerationStructureCreateInfoKHR) == sizeof(VkAccelerationStructureCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AccelerationStructureCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AabbPositionsKHR) == sizeof(VkAabbPositionsKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AabbPositionsKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AabbPositionsNV) == sizeof(VkAabbPositionsNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AabbPositionsNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::TransformMatrixKHR) == sizeof(VkTransformMatrixKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::TransformMatrixKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::TransformMatrixNV) == sizeof(VkTransformMatrixNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::TransformMatrixNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AccelerationStructureInstanceKHR) == sizeof(VkAccelerationStructureInstanceKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AccelerationStructureInstanceKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AccelerationStructureInstanceNV) == sizeof(VkAccelerationStructureInstanceNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AccelerationStructureInstanceNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AccelerationStructureDeviceAddressInfoKHR) == sizeof(VkAccelerationStructureDeviceAddressInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AccelerationStructureDeviceAddressInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AccelerationStructureVersionInfoKHR) == sizeof(VkAccelerationStructureVersionInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AccelerationStructureVersionInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::CopyAccelerationStructureInfoKHR) == sizeof(VkCopyAccelerationStructureInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::CopyAccelerationStructureInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::CopyAccelerationStructureToMemoryInfoKHR) == sizeof(VkCopyAccelerationStructureToMemoryInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::CopyAccelerationStructureToMemoryInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::CopyMemoryToAccelerationStructureInfoKHR) == sizeof(VkCopyMemoryToAccelerationStructureInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::CopyMemoryToAccelerationStructureInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceExtendedDynamicStateFeaturesEXT) == sizeof(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceExtendedDynamicStateFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::RenderPassTransformBeginInfoQCOM) == sizeof(VkRenderPassTransformBeginInfoQCOM), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::RenderPassTransformBeginInfoQCOM>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::CopyCommandTransformInfoQCOM) == sizeof(VkCopyCommandTransformInfoQCOM), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::CopyCommandTransformInfoQCOM>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::CommandBufferInheritanceRenderPassTransformInfoQCOM) == sizeof(VkCommandBufferInheritanceRenderPassTransformInfoQCOM), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::CommandBufferInheritanceRenderPassTransformInfoQCOM>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceDiagnosticsConfigFeaturesNV) == sizeof(VkPhysicalDeviceDiagnosticsConfigFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceDiagnosticsConfigFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::DeviceDiagnosticsConfigCreateInfoNV) == sizeof(VkDeviceDiagnosticsConfigCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::DeviceDiagnosticsConfigCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR) == sizeof(VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceRobustness2FeaturesEXT) == sizeof(VkPhysicalDeviceRobustness2FeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceRobustness2FeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceRobustness2PropertiesEXT) == sizeof(VkPhysicalDeviceRobustness2PropertiesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceRobustness2PropertiesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceImageRobustnessFeaturesEXT) == sizeof(VkPhysicalDeviceImageRobustnessFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceImageRobustnessFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR) == sizeof(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR>::value, "Must be a standard layout type" );
#if defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(vk::PhysicalDevicePortabilitySubsetFeaturesKHR) == sizeof(VkPhysicalDevicePortabilitySubsetFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDevicePortabilitySubsetFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDevicePortabilitySubsetPropertiesKHR) == sizeof(VkPhysicalDevicePortabilitySubsetPropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDevicePortabilitySubsetPropertiesKHR>::value, "Must be a standard layout type" );
#endif // defined(VK_ENABLE_BETA_EXTENSIONS)
static_assert( sizeof(vk::PhysicalDevice4444FormatsFeaturesEXT) == sizeof(VkPhysicalDevice4444FormatsFeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDevice4444FormatsFeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BufferCopy2KHR) == sizeof(VkBufferCopy2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BufferCopy2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageCopy2KHR) == sizeof(VkImageCopy2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageCopy2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageBlit2KHR) == sizeof(VkImageBlit2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageBlit2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BufferImageCopy2KHR) == sizeof(VkBufferImageCopy2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BufferImageCopy2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ImageResolve2KHR) == sizeof(VkImageResolve2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ImageResolve2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::CopyBufferInfo2KHR) == sizeof(VkCopyBufferInfo2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::CopyBufferInfo2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::CopyImageInfo2KHR) == sizeof(VkCopyImageInfo2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::CopyImageInfo2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::BlitImageInfo2KHR) == sizeof(VkBlitImageInfo2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::BlitImageInfo2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::CopyBufferToImageInfo2KHR) == sizeof(VkCopyBufferToImageInfo2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::CopyBufferToImageInfo2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::CopyImageToBufferInfo2KHR) == sizeof(VkCopyImageToBufferInfo2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::CopyImageToBufferInfo2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::ResolveImageInfo2KHR) == sizeof(VkResolveImageInfo2KHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::ResolveImageInfo2KHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceShaderImageAtomicInt64FeaturesEXT) == sizeof(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceShaderImageAtomicInt64FeaturesEXT>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::FragmentShadingRateAttachmentInfoKHR) == sizeof(VkFragmentShadingRateAttachmentInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::FragmentShadingRateAttachmentInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineFragmentShadingRateStateCreateInfoKHR) == sizeof(VkPipelineFragmentShadingRateStateCreateInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineFragmentShadingRateStateCreateInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceFragmentShadingRateFeaturesKHR) == sizeof(VkPhysicalDeviceFragmentShadingRateFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceFragmentShadingRateFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceFragmentShadingRatePropertiesKHR) == sizeof(VkPhysicalDeviceFragmentShadingRatePropertiesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceFragmentShadingRatePropertiesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceFragmentShadingRateKHR) == sizeof(VkPhysicalDeviceFragmentShadingRateKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceFragmentShadingRateKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceShaderTerminateInvocationFeaturesKHR) == sizeof(VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceShaderTerminateInvocationFeaturesKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceFragmentShadingRateEnumsFeaturesNV) == sizeof(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceFragmentShadingRateEnumsFeaturesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceFragmentShadingRateEnumsPropertiesNV) == sizeof(VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceFragmentShadingRateEnumsPropertiesNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PipelineFragmentShadingRateEnumStateCreateInfoNV) == sizeof(VkPipelineFragmentShadingRateEnumStateCreateInfoNV), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PipelineFragmentShadingRateEnumStateCreateInfoNV>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::AccelerationStructureBuildSizesInfoKHR) == sizeof(VkAccelerationStructureBuildSizesInfoKHR), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::AccelerationStructureBuildSizesInfoKHR>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::PhysicalDeviceMutableDescriptorTypeFeaturesVALVE) == sizeof(VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::PhysicalDeviceMutableDescriptorTypeFeaturesVALVE>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::MutableDescriptorTypeListVALVE) == sizeof(VkMutableDescriptorTypeListVALVE), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::MutableDescriptorTypeListVALVE>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::MutableDescriptorTypeCreateInfoVALVE) == sizeof(VkMutableDescriptorTypeCreateInfoVALVE), "Must maintain size between types" );
static_assert( std::is_standard_layout<vk::MutableDescriptorTypeCreateInfoVALVE>::value, "Must be a standard layout type" );
static_assert( sizeof(vk::Instance) == sizeof(VkInstance),"Must maintain size between handles");
static_assert( sizeof(vk::PhysicalDevice) == sizeof(VkPhysicalDevice),"Must maintain size between handles");
static_assert( sizeof(vk::Device) == sizeof(VkDevice),"Must maintain size between handles");
static_assert( sizeof(vk::Queue) == sizeof(VkQueue),"Must maintain size between handles");
static_assert( sizeof(vk::CommandBuffer) == sizeof(VkCommandBuffer),"Must maintain size between handles");
static_assert( sizeof(vk::DeviceMemory) == sizeof(VkDeviceMemory),"Must maintain size between handles");
static_assert( sizeof(vk::CommandPool) == sizeof(VkCommandPool),"Must maintain size between handles");
static_assert( sizeof(vk::Buffer) == sizeof(VkBuffer),"Must maintain size between handles");
static_assert( sizeof(vk::BufferView) == sizeof(VkBufferView),"Must maintain size between handles");
static_assert( sizeof(vk::Image) == sizeof(VkImage),"Must maintain size between handles");
static_assert( sizeof(vk::ImageView) == sizeof(VkImageView),"Must maintain size between handles");
static_assert( sizeof(vk::ShaderModule) == sizeof(VkShaderModule),"Must maintain size between handles");
static_assert( sizeof(vk::Pipeline) == sizeof(VkPipeline),"Must maintain size between handles");
static_assert( sizeof(vk::PipelineLayout) == sizeof(VkPipelineLayout),"Must maintain size between handles");
static_assert( sizeof(vk::Sampler) == sizeof(VkSampler),"Must maintain size between handles");
static_assert( sizeof(vk::DescriptorSet) == sizeof(VkDescriptorSet),"Must maintain size between handles");
static_assert( sizeof(vk::DescriptorSetLayout) == sizeof(VkDescriptorSetLayout),"Must maintain size between handles");
static_assert( sizeof(vk::DescriptorPool) == sizeof(VkDescriptorPool),"Must maintain size between handles");
static_assert( sizeof(vk::Fence) == sizeof(VkFence),"Must maintain size between handles");
static_assert( sizeof(vk::Semaphore) == sizeof(VkSemaphore),"Must maintain size between handles");
static_assert( sizeof(vk::Event) == sizeof(VkEvent),"Must maintain size between handles");
static_assert( sizeof(vk::QueryPool) == sizeof(VkQueryPool),"Must maintain size between handles");
static_assert( sizeof(vk::Framebuffer) == sizeof(VkFramebuffer),"Must maintain size between handles");
static_assert( sizeof(vk::RenderPass) == sizeof(VkRenderPass),"Must maintain size between handles");
static_assert( sizeof(vk::PipelineCache) == sizeof(VkPipelineCache),"Must maintain size between handles");
static_assert( sizeof(vk::IndirectCommandsLayoutNV) == sizeof(VkIndirectCommandsLayoutNV),"Must maintain size between handles");
static_assert( sizeof(vk::DescriptorUpdateTemplate) == sizeof(VkDescriptorUpdateTemplate),"Must maintain size between handles");
static_assert( sizeof(vk::SamplerYcbcrConversion) == sizeof(VkSamplerYcbcrConversion),"Must maintain size between handles");
static_assert( sizeof(vk::ValidationCacheEXT) == sizeof(VkValidationCacheEXT),"Must maintain size between handles");
static_assert( sizeof(vk::AccelerationStructureKHR) == sizeof(VkAccelerationStructureKHR),"Must maintain size between handles");
static_assert( sizeof(vk::AccelerationStructureNV) == sizeof(VkAccelerationStructureNV),"Must maintain size between handles");
static_assert( sizeof(vk::PerformanceConfigurationINTEL) == sizeof(VkPerformanceConfigurationINTEL),"Must maintain size between handles");
static_assert( sizeof(vk::DeferredOperationKHR) == sizeof(VkDeferredOperationKHR),"Must maintain size between handles");
static_assert( sizeof(vk::PrivateDataSlotEXT) == sizeof(VkPrivateDataSlotEXT),"Must maintain size between handles");
static_assert( sizeof(vk::DisplayKHR) == sizeof(VkDisplayKHR),"Must maintain size between handles");
static_assert( sizeof(vk::DisplayModeKHR) == sizeof(VkDisplayModeKHR),"Must maintain size between handles");
static_assert( sizeof(vk::SurfaceKHR) == sizeof(VkSurfaceKHR),"Must maintain size between handles");
static_assert( sizeof(vk::SwapchainKHR) == sizeof(VkSwapchainKHR),"Must maintain size between handles");
static_assert( sizeof(vk::DebugReportCallbackEXT) == sizeof(VkDebugReportCallbackEXT),"Must maintain size between handles");
static_assert( sizeof(vk::DebugUtilsMessengerEXT) == sizeof(VkDebugUtilsMessengerEXT),"Must maintain size between handles");
// clang-format on
